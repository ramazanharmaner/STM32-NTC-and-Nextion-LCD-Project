
NTC_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005708  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08005818  08005818  00015818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000688  20000000  08005aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a4  20000688  08006134  00020688  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  2000072c  08006134  0002072c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020688  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003dbf  00000000  00000000  000206b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000bdb  00000000  00000000  00024470  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000528  00000000  00000000  00025050  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004b0  00000000  00000000  00025578  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001c5c  00000000  00000000  00025a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001cff  00000000  00000000  00027684  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00029383  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002288  00000000  00000000  00029400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000688 	.word	0x20000688
 800012c:	00000000 	.word	0x00000000
 8000130:	08005800 	.word	0x08005800

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000068c 	.word	0x2000068c
 800014c:	08005800 	.word	0x08005800

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpun>:
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__aeabi_fcmpun+0x14>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d108      	bne.n	80010ee <__aeabi_fcmpun+0x26>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d102      	bne.n	80010e8 <__aeabi_fcmpun+0x20>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d102      	bne.n	80010ee <__aeabi_fcmpun+0x26>
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0001 	mov.w	r0, #1
 80010f2:	4770      	bx	lr

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295
 8001104:	f04f 30ff 	movne.w	r0, #4294967295
 8001108:	f000 b97a 	b.w	8001400 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f806 	bl	8001124 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__udivmoddi4>:
 8001124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001128:	468c      	mov	ip, r1
 800112a:	460e      	mov	r6, r1
 800112c:	4604      	mov	r4, r0
 800112e:	9d08      	ldr	r5, [sp, #32]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d150      	bne.n	80011d6 <__udivmoddi4+0xb2>
 8001134:	428a      	cmp	r2, r1
 8001136:	4617      	mov	r7, r2
 8001138:	d96c      	bls.n	8001214 <__udivmoddi4+0xf0>
 800113a:	fab2 fe82 	clz	lr, r2
 800113e:	f1be 0f00 	cmp.w	lr, #0
 8001142:	d00b      	beq.n	800115c <__udivmoddi4+0x38>
 8001144:	f1ce 0c20 	rsb	ip, lr, #32
 8001148:	fa01 f60e 	lsl.w	r6, r1, lr
 800114c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001150:	fa02 f70e 	lsl.w	r7, r2, lr
 8001154:	ea4c 0c06 	orr.w	ip, ip, r6
 8001158:	fa00 f40e 	lsl.w	r4, r0, lr
 800115c:	0c3a      	lsrs	r2, r7, #16
 800115e:	fbbc f9f2 	udiv	r9, ip, r2
 8001162:	b2bb      	uxth	r3, r7
 8001164:	fb02 cc19 	mls	ip, r2, r9, ip
 8001168:	fb09 fa03 	mul.w	sl, r9, r3
 800116c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8001170:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8001174:	45b2      	cmp	sl, r6
 8001176:	d90a      	bls.n	800118e <__udivmoddi4+0x6a>
 8001178:	19f6      	adds	r6, r6, r7
 800117a:	f109 31ff 	add.w	r1, r9, #4294967295
 800117e:	f080 8125 	bcs.w	80013cc <__udivmoddi4+0x2a8>
 8001182:	45b2      	cmp	sl, r6
 8001184:	f240 8122 	bls.w	80013cc <__udivmoddi4+0x2a8>
 8001188:	f1a9 0902 	sub.w	r9, r9, #2
 800118c:	443e      	add	r6, r7
 800118e:	eba6 060a 	sub.w	r6, r6, sl
 8001192:	fbb6 f0f2 	udiv	r0, r6, r2
 8001196:	fb02 6610 	mls	r6, r2, r0, r6
 800119a:	fb00 f303 	mul.w	r3, r0, r3
 800119e:	b2a4      	uxth	r4, r4
 80011a0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80011a4:	42a3      	cmp	r3, r4
 80011a6:	d909      	bls.n	80011bc <__udivmoddi4+0x98>
 80011a8:	19e4      	adds	r4, r4, r7
 80011aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80011ae:	f080 810b 	bcs.w	80013c8 <__udivmoddi4+0x2a4>
 80011b2:	42a3      	cmp	r3, r4
 80011b4:	f240 8108 	bls.w	80013c8 <__udivmoddi4+0x2a4>
 80011b8:	3802      	subs	r0, #2
 80011ba:	443c      	add	r4, r7
 80011bc:	2100      	movs	r1, #0
 80011be:	1ae4      	subs	r4, r4, r3
 80011c0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011c4:	2d00      	cmp	r5, #0
 80011c6:	d062      	beq.n	800128e <__udivmoddi4+0x16a>
 80011c8:	2300      	movs	r3, #0
 80011ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80011ce:	602c      	str	r4, [r5, #0]
 80011d0:	606b      	str	r3, [r5, #4]
 80011d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d6:	428b      	cmp	r3, r1
 80011d8:	d907      	bls.n	80011ea <__udivmoddi4+0xc6>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d055      	beq.n	800128a <__udivmoddi4+0x166>
 80011de:	2100      	movs	r1, #0
 80011e0:	e885 0041 	stmia.w	r5, {r0, r6}
 80011e4:	4608      	mov	r0, r1
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ea:	fab3 f183 	clz	r1, r3
 80011ee:	2900      	cmp	r1, #0
 80011f0:	f040 808f 	bne.w	8001312 <__udivmoddi4+0x1ee>
 80011f4:	42b3      	cmp	r3, r6
 80011f6:	d302      	bcc.n	80011fe <__udivmoddi4+0xda>
 80011f8:	4282      	cmp	r2, r0
 80011fa:	f200 80fc 	bhi.w	80013f6 <__udivmoddi4+0x2d2>
 80011fe:	1a84      	subs	r4, r0, r2
 8001200:	eb66 0603 	sbc.w	r6, r6, r3
 8001204:	2001      	movs	r0, #1
 8001206:	46b4      	mov	ip, r6
 8001208:	2d00      	cmp	r5, #0
 800120a:	d040      	beq.n	800128e <__udivmoddi4+0x16a>
 800120c:	e885 1010 	stmia.w	r5, {r4, ip}
 8001210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001214:	b912      	cbnz	r2, 800121c <__udivmoddi4+0xf8>
 8001216:	2701      	movs	r7, #1
 8001218:	fbb7 f7f2 	udiv	r7, r7, r2
 800121c:	fab7 fe87 	clz	lr, r7
 8001220:	f1be 0f00 	cmp.w	lr, #0
 8001224:	d135      	bne.n	8001292 <__udivmoddi4+0x16e>
 8001226:	2101      	movs	r1, #1
 8001228:	1bf6      	subs	r6, r6, r7
 800122a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800122e:	fa1f f887 	uxth.w	r8, r7
 8001232:	fbb6 f2fc 	udiv	r2, r6, ip
 8001236:	fb0c 6612 	mls	r6, ip, r2, r6
 800123a:	fb08 f002 	mul.w	r0, r8, r2
 800123e:	0c23      	lsrs	r3, r4, #16
 8001240:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001244:	42b0      	cmp	r0, r6
 8001246:	d907      	bls.n	8001258 <__udivmoddi4+0x134>
 8001248:	19f6      	adds	r6, r6, r7
 800124a:	f102 33ff 	add.w	r3, r2, #4294967295
 800124e:	d202      	bcs.n	8001256 <__udivmoddi4+0x132>
 8001250:	42b0      	cmp	r0, r6
 8001252:	f200 80d2 	bhi.w	80013fa <__udivmoddi4+0x2d6>
 8001256:	461a      	mov	r2, r3
 8001258:	1a36      	subs	r6, r6, r0
 800125a:	fbb6 f0fc 	udiv	r0, r6, ip
 800125e:	fb0c 6610 	mls	r6, ip, r0, r6
 8001262:	fb08 f800 	mul.w	r8, r8, r0
 8001266:	b2a3      	uxth	r3, r4
 8001268:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 800126c:	45a0      	cmp	r8, r4
 800126e:	d907      	bls.n	8001280 <__udivmoddi4+0x15c>
 8001270:	19e4      	adds	r4, r4, r7
 8001272:	f100 33ff 	add.w	r3, r0, #4294967295
 8001276:	d202      	bcs.n	800127e <__udivmoddi4+0x15a>
 8001278:	45a0      	cmp	r8, r4
 800127a:	f200 80b9 	bhi.w	80013f0 <__udivmoddi4+0x2cc>
 800127e:	4618      	mov	r0, r3
 8001280:	eba4 0408 	sub.w	r4, r4, r8
 8001284:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001288:	e79c      	b.n	80011c4 <__udivmoddi4+0xa0>
 800128a:	4629      	mov	r1, r5
 800128c:	4628      	mov	r0, r5
 800128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001292:	fa07 f70e 	lsl.w	r7, r7, lr
 8001296:	f1ce 0320 	rsb	r3, lr, #32
 800129a:	fa26 f203 	lsr.w	r2, r6, r3
 800129e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80012a2:	fbb2 f1fc 	udiv	r1, r2, ip
 80012a6:	fa1f f887 	uxth.w	r8, r7
 80012aa:	fb0c 2211 	mls	r2, ip, r1, r2
 80012ae:	fa06 f60e 	lsl.w	r6, r6, lr
 80012b2:	fa20 f303 	lsr.w	r3, r0, r3
 80012b6:	fb01 f908 	mul.w	r9, r1, r8
 80012ba:	4333      	orrs	r3, r6
 80012bc:	0c1e      	lsrs	r6, r3, #16
 80012be:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80012c2:	45b1      	cmp	r9, r6
 80012c4:	fa00 f40e 	lsl.w	r4, r0, lr
 80012c8:	d909      	bls.n	80012de <__udivmoddi4+0x1ba>
 80012ca:	19f6      	adds	r6, r6, r7
 80012cc:	f101 32ff 	add.w	r2, r1, #4294967295
 80012d0:	f080 808c 	bcs.w	80013ec <__udivmoddi4+0x2c8>
 80012d4:	45b1      	cmp	r9, r6
 80012d6:	f240 8089 	bls.w	80013ec <__udivmoddi4+0x2c8>
 80012da:	3902      	subs	r1, #2
 80012dc:	443e      	add	r6, r7
 80012de:	eba6 0609 	sub.w	r6, r6, r9
 80012e2:	fbb6 f0fc 	udiv	r0, r6, ip
 80012e6:	fb0c 6210 	mls	r2, ip, r0, r6
 80012ea:	fb00 f908 	mul.w	r9, r0, r8
 80012ee:	b29e      	uxth	r6, r3
 80012f0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80012f4:	45b1      	cmp	r9, r6
 80012f6:	d907      	bls.n	8001308 <__udivmoddi4+0x1e4>
 80012f8:	19f6      	adds	r6, r6, r7
 80012fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80012fe:	d271      	bcs.n	80013e4 <__udivmoddi4+0x2c0>
 8001300:	45b1      	cmp	r9, r6
 8001302:	d96f      	bls.n	80013e4 <__udivmoddi4+0x2c0>
 8001304:	3802      	subs	r0, #2
 8001306:	443e      	add	r6, r7
 8001308:	eba6 0609 	sub.w	r6, r6, r9
 800130c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001310:	e78f      	b.n	8001232 <__udivmoddi4+0x10e>
 8001312:	f1c1 0720 	rsb	r7, r1, #32
 8001316:	fa22 f807 	lsr.w	r8, r2, r7
 800131a:	408b      	lsls	r3, r1
 800131c:	ea48 0303 	orr.w	r3, r8, r3
 8001320:	fa26 f407 	lsr.w	r4, r6, r7
 8001324:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001328:	fbb4 f9fe 	udiv	r9, r4, lr
 800132c:	fa1f fc83 	uxth.w	ip, r3
 8001330:	fb0e 4419 	mls	r4, lr, r9, r4
 8001334:	408e      	lsls	r6, r1
 8001336:	fa20 f807 	lsr.w	r8, r0, r7
 800133a:	fb09 fa0c 	mul.w	sl, r9, ip
 800133e:	ea48 0806 	orr.w	r8, r8, r6
 8001342:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8001346:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800134a:	45a2      	cmp	sl, r4
 800134c:	fa02 f201 	lsl.w	r2, r2, r1
 8001350:	fa00 f601 	lsl.w	r6, r0, r1
 8001354:	d908      	bls.n	8001368 <__udivmoddi4+0x244>
 8001356:	18e4      	adds	r4, r4, r3
 8001358:	f109 30ff 	add.w	r0, r9, #4294967295
 800135c:	d244      	bcs.n	80013e8 <__udivmoddi4+0x2c4>
 800135e:	45a2      	cmp	sl, r4
 8001360:	d942      	bls.n	80013e8 <__udivmoddi4+0x2c4>
 8001362:	f1a9 0902 	sub.w	r9, r9, #2
 8001366:	441c      	add	r4, r3
 8001368:	eba4 040a 	sub.w	r4, r4, sl
 800136c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001370:	fb0e 4410 	mls	r4, lr, r0, r4
 8001374:	fb00 fc0c 	mul.w	ip, r0, ip
 8001378:	fa1f f888 	uxth.w	r8, r8
 800137c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8001380:	45a4      	cmp	ip, r4
 8001382:	d907      	bls.n	8001394 <__udivmoddi4+0x270>
 8001384:	18e4      	adds	r4, r4, r3
 8001386:	f100 3eff 	add.w	lr, r0, #4294967295
 800138a:	d229      	bcs.n	80013e0 <__udivmoddi4+0x2bc>
 800138c:	45a4      	cmp	ip, r4
 800138e:	d927      	bls.n	80013e0 <__udivmoddi4+0x2bc>
 8001390:	3802      	subs	r0, #2
 8001392:	441c      	add	r4, r3
 8001394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001398:	fba0 8902 	umull	r8, r9, r0, r2
 800139c:	eba4 0c0c 	sub.w	ip, r4, ip
 80013a0:	45cc      	cmp	ip, r9
 80013a2:	46c2      	mov	sl, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	d315      	bcc.n	80013d4 <__udivmoddi4+0x2b0>
 80013a8:	d012      	beq.n	80013d0 <__udivmoddi4+0x2ac>
 80013aa:	b155      	cbz	r5, 80013c2 <__udivmoddi4+0x29e>
 80013ac:	ebb6 030a 	subs.w	r3, r6, sl
 80013b0:	eb6c 060e 	sbc.w	r6, ip, lr
 80013b4:	fa06 f707 	lsl.w	r7, r6, r7
 80013b8:	40cb      	lsrs	r3, r1
 80013ba:	431f      	orrs	r7, r3
 80013bc:	40ce      	lsrs	r6, r1
 80013be:	602f      	str	r7, [r5, #0]
 80013c0:	606e      	str	r6, [r5, #4]
 80013c2:	2100      	movs	r1, #0
 80013c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c8:	4610      	mov	r0, r2
 80013ca:	e6f7      	b.n	80011bc <__udivmoddi4+0x98>
 80013cc:	4689      	mov	r9, r1
 80013ce:	e6de      	b.n	800118e <__udivmoddi4+0x6a>
 80013d0:	4546      	cmp	r6, r8
 80013d2:	d2ea      	bcs.n	80013aa <__udivmoddi4+0x286>
 80013d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80013d8:	eb69 0e03 	sbc.w	lr, r9, r3
 80013dc:	3801      	subs	r0, #1
 80013de:	e7e4      	b.n	80013aa <__udivmoddi4+0x286>
 80013e0:	4670      	mov	r0, lr
 80013e2:	e7d7      	b.n	8001394 <__udivmoddi4+0x270>
 80013e4:	4618      	mov	r0, r3
 80013e6:	e78f      	b.n	8001308 <__udivmoddi4+0x1e4>
 80013e8:	4681      	mov	r9, r0
 80013ea:	e7bd      	b.n	8001368 <__udivmoddi4+0x244>
 80013ec:	4611      	mov	r1, r2
 80013ee:	e776      	b.n	80012de <__udivmoddi4+0x1ba>
 80013f0:	3802      	subs	r0, #2
 80013f2:	443c      	add	r4, r7
 80013f4:	e744      	b.n	8001280 <__udivmoddi4+0x15c>
 80013f6:	4608      	mov	r0, r1
 80013f8:	e706      	b.n	8001208 <__udivmoddi4+0xe4>
 80013fa:	3a02      	subs	r2, #2
 80013fc:	443e      	add	r6, r7
 80013fe:	e72b      	b.n	8001258 <__udivmoddi4+0x134>

08001400 <__aeabi_idiv0>:
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <ADC_DeInit+0x68>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d10a      	bne.n	800142a <ADC_DeInit+0x26>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001414:	2101      	movs	r1, #1
 8001416:	f44f 7000 	mov.w	r0, #512	; 0x200
 800141a:	f000 fbcb 	bl	8001bb4 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 800141e:	2100      	movs	r1, #0
 8001420:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001424:	f000 fbc6 	bl	8001bb4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    }
  }
}
 8001428:	e01c      	b.n	8001464 <ADC_DeInit+0x60>
  else if (ADCx == ADC2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <ADC_DeInit+0x6c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10a      	bne.n	8001448 <ADC_DeInit+0x44>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 8001432:	2101      	movs	r1, #1
 8001434:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001438:	f000 fbbc 	bl	8001bb4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 800143c:	2100      	movs	r1, #0
 800143e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001442:	f000 fbb7 	bl	8001bb4 <RCC_APB2PeriphResetCmd>
}
 8001446:	e00d      	b.n	8001464 <ADC_DeInit+0x60>
    if (ADCx == ADC3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <ADC_DeInit+0x70>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d109      	bne.n	8001464 <ADC_DeInit+0x60>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 8001450:	2101      	movs	r1, #1
 8001452:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001456:	f000 fbad 	bl	8001bb4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 800145a:	2100      	movs	r1, #0
 800145c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001460:	f000 fba8 	bl	8001bb4 <RCC_APB2PeriphResetCmd>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40012400 	.word	0x40012400
 8001470:	40012800 	.word	0x40012800
 8001474:	40013c00 	.word	0x40013c00

08001478 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	791b      	ldrb	r3, [r3, #4]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	4313      	orrs	r3, r2
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <ADC_Init+0xa0>)
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	795b      	ldrb	r3, [r3, #5]
 80014d0:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80014d2:	4313      	orrs	r3, r2
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80014ec:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	7c1b      	ldrb	r3, [r3, #16]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	051b      	lsls	r3, r3, #20
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	fff1f7fd 	.word	0xfff1f7fd

0800151c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 800153a:	e005      	b.n	8001548 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 0201 	bic.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f043 0208 	orr.w	r2, r3, #8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e001      	b.n	8001592 <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f043 0204 	orr.w	r2, r3, #4
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e001      	b.n	80015de <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 8001608:	e005      	b.n	8001616 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4608      	mov	r0, r1
 800162a:	4611      	mov	r1, r2
 800162c:	461a      	mov	r2, r3
 800162e:	4603      	mov	r3, r0
 8001630:	70fb      	strb	r3, [r7, #3]
 8001632:	460b      	mov	r3, r1
 8001634:	70bb      	strb	r3, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d923      	bls.n	8001690 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	f1a3 020a 	sub.w	r2, r3, #10
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	2207      	movs	r2, #7
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	43db      	mvns	r3, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800166c:	7879      	ldrb	r1, [r7, #1]
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	f1a3 020a 	sub.w	r2, r3, #10
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4313      	orrs	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	e01e      	b.n	80016ce <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	2207      	movs	r2, #7
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80016b0:	7879      	ldrb	r1, [r7, #1]
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80016ce:	78bb      	ldrb	r3, [r7, #2]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d821      	bhi.n	8001718 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 80016da:	78bb      	ldrb	r3, [r7, #2]
 80016dc:	1e5a      	subs	r2, r3, #1
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	221f      	movs	r2, #31
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80016f6:	78f9      	ldrb	r1, [r7, #3]
 80016f8:	78bb      	ldrb	r3, [r7, #2]
 80016fa:	1e5a      	subs	r2, r3, #1
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	4313      	orrs	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001716:	e047      	b.n	80017a8 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8001718:	78bb      	ldrb	r3, [r7, #2]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d821      	bhi.n	8001762 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8001724:	78bb      	ldrb	r3, [r7, #2]
 8001726:	1fda      	subs	r2, r3, #7
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	221f      	movs	r2, #31
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	43db      	mvns	r3, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001740:	78f9      	ldrb	r1, [r7, #3]
 8001742:	78bb      	ldrb	r3, [r7, #2]
 8001744:	1fda      	subs	r2, r3, #7
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001760:	e022      	b.n	80017a8 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8001768:	78bb      	ldrb	r3, [r7, #2]
 800176a:	f1a3 020d 	sub.w	r2, r3, #13
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	221f      	movs	r2, #31
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	43db      	mvns	r3, r3
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001786:	78f9      	ldrb	r1, [r7, #3]
 8001788:	78bb      	ldrb	r3, [r7, #2]
 800178a:	f1a3 020d 	sub.w	r2, r3, #13
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	b29b      	uxth	r3, r3
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	e001      	b.n	80017f0 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	78db      	ldrb	r3, [r3, #3]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	789b      	ldrb	r3, [r3, #2]
 8001838:	461a      	mov	r2, r3
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4313      	orrs	r3, r2
 800183e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	e038      	b.n	80018c8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001856:	2201      	movs	r2, #1
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d126      	bne.n	80018c2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800187a:	220f      	movs	r2, #15
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	43db      	mvns	r3, r3
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4013      	ands	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	78db      	ldrb	r3, [r3, #3]
 80018a0:	2b28      	cmp	r3, #40	; 0x28
 80018a2:	d105      	bne.n	80018b0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80018a4:	2201      	movs	r2, #1
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	409a      	lsls	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	615a      	str	r2, [r3, #20]
 80018ae:	e008      	b.n	80018c2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	78db      	ldrb	r3, [r3, #3]
 80018b4:	2b48      	cmp	r3, #72	; 0x48
 80018b6:	d104      	bne.n	80018c2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80018b8:	2201      	movs	r2, #1
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	409a      	lsls	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	3301      	adds	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b07      	cmp	r3, #7
 80018cc:	d9c3      	bls.n	8001856 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d946      	bls.n	800196a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	e03a      	b.n	800195e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	3308      	adds	r3, #8
 80018ec:	2201      	movs	r2, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d127      	bne.n	8001958 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800190e:	220f      	movs	r2, #15
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	43db      	mvns	r3, r3
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4013      	ands	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	78db      	ldrb	r3, [r3, #3]
 8001934:	2b28      	cmp	r3, #40	; 0x28
 8001936:	d105      	bne.n	8001944 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	3308      	adds	r3, #8
 800193c:	2201      	movs	r2, #1
 800193e:	409a      	lsls	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	78db      	ldrb	r3, [r3, #3]
 8001948:	2b48      	cmp	r3, #72	; 0x48
 800194a:	d105      	bne.n	8001958 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	3308      	adds	r3, #8
 8001950:	2201      	movs	r2, #1
 8001952:	409a      	lsls	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	3301      	adds	r3, #1
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b07      	cmp	r3, #7
 8001962:	d9c1      	bls.n	80018e8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	605a      	str	r2, [r3, #4]
  }
}
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	611a      	str	r2, [r3, #16]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	615a      	str	r2, [r3, #20]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <RCC_ADCCLKConfig+0x34>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019f8:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <RCC_ADCCLKConfig+0x34>)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6053      	str	r3, [r2, #4]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000

08001a18 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001a30:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <RCC_GetClocksFreq+0x14c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d007      	beq.n	8001a50 <RCC_GetClocksFreq+0x38>
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d009      	beq.n	8001a58 <RCC_GetClocksFreq+0x40>
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d133      	bne.n	8001ab0 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a47      	ldr	r2, [pc, #284]	; (8001b68 <RCC_GetClocksFreq+0x150>)
 8001a4c:	601a      	str	r2, [r3, #0]
      break;
 8001a4e:	e033      	b.n	8001ab8 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a45      	ldr	r2, [pc, #276]	; (8001b68 <RCC_GetClocksFreq+0x150>)
 8001a54:	601a      	str	r2, [r3, #0]
      break;
 8001a56:	e02f      	b.n	8001ab8 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <RCC_GetClocksFreq+0x14c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001a60:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001a62:	4b40      	ldr	r3, [pc, #256]	; (8001b64 <RCC_GetClocksFreq+0x14c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	3302      	adds	r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <RCC_GetClocksFreq+0x154>)
 8001a7e:	fb02 f203 	mul.w	r2, r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001a86:	e017      	b.n	8001ab8 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <RCC_GetClocksFreq+0x14c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4a35      	ldr	r2, [pc, #212]	; (8001b6c <RCC_GetClocksFreq+0x154>)
 8001a98:	fb02 f203 	mul.w	r2, r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
      break;
 8001aa0:	e00a      	b.n	8001ab8 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4a30      	ldr	r2, [pc, #192]	; (8001b68 <RCC_GetClocksFreq+0x150>)
 8001aa6:	fb02 f203 	mul.w	r2, r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
      break;
 8001aae:	e003      	b.n	8001ab8 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <RCC_GetClocksFreq+0x150>)
 8001ab4:	601a      	str	r2, [r3, #0]
      break;
 8001ab6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <RCC_GetClocksFreq+0x14c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001ac8:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <RCC_GetClocksFreq+0x158>)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	40da      	lsrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <RCC_GetClocksFreq+0x14c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ae8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <RCC_GetClocksFreq+0x158>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	40da      	lsrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <RCC_GetClocksFreq+0x14c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001b10:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	0adb      	lsrs	r3, r3, #11
 8001b16:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <RCC_GetClocksFreq+0x158>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	40da      	lsrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <RCC_GetClocksFreq+0x14c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b38:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	0b9b      	lsrs	r3, r3, #14
 8001b3e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001b40:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <RCC_GetClocksFreq+0x15c>)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	611a      	str	r2, [r3, #16]
}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	003d0900 	.word	0x003d0900
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000010 	.word	0x20000010

08001b78 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b8a:	4909      	ldr	r1, [pc, #36]	; (8001bb0 <RCC_APB2PeriphClockCmd+0x38>)
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <RCC_APB2PeriphClockCmd+0x38>)
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001b96:	e006      	b.n	8001ba6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001b98:	4905      	ldr	r1, [pc, #20]	; (8001bb0 <RCC_APB2PeriphClockCmd+0x38>)
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <RCC_APB2PeriphClockCmd+0x38>)
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	618b      	str	r3, [r1, #24]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001bc6:	4909      	ldr	r1, [pc, #36]	; (8001bec <RCC_APB2PeriphResetCmd+0x38>)
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <RCC_APB2PeriphResetCmd+0x38>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001bd2:	e006      	b.n	8001be2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001bd4:	4905      	ldr	r1, [pc, #20]	; (8001bec <RCC_APB2PeriphResetCmd+0x38>)
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <RCC_APB2PeriphResetCmd+0x38>)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4013      	ands	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000

08001bf0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	8a1b      	ldrh	r3, [r3, #16]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c1c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001c20:	4013      	ands	r3, r2
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	88db      	ldrh	r3, [r3, #6]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	899b      	ldrh	r3, [r3, #12]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c42:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001c46:	4013      	ands	r3, r2
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	889a      	ldrh	r2, [r3, #4]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	891b      	ldrh	r3, [r3, #8]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	4313      	orrs	r3, r2
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8a9b      	ldrh	r3, [r3, #20]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c78:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	899b      	ldrh	r3, [r3, #12]
 8001c84:	461a      	mov	r2, r3
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff febd 	bl	8001a18 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <USART_Init+0x16c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d102      	bne.n	8001cac <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001caa:	e001      	b.n	8001cb0 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	899b      	ldrh	r3, [r3, #12]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da0c      	bge.n	8001cd6 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009a      	lsls	r2, r3, #2
 8001cc6:	441a      	add	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	e00b      	b.n	8001cee <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009a      	lsls	r2, r3, #2
 8001ce0:	441a      	add	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <USART_Init+0x170>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	2264      	movs	r2, #100	; 0x64
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	899b      	ldrh	r3, [r3, #12]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da0c      	bge.n	8001d32 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	3332      	adds	r3, #50	; 0x32
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <USART_Init+0x170>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d30:	e00b      	b.n	8001d4a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	3332      	adds	r3, #50	; 0x32
 8001d38:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <USART_Init+0x170>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d46:	4313      	orrs	r3, r2
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	811a      	strh	r2, [r3, #8]
}
 8001d52:	bf00      	nop
 8001d54:	3730      	adds	r7, #48	; 0x30
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	51eb851f 	.word	0x51eb851f

08001d64 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	899b      	ldrh	r3, [r3, #12]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001d86:	e007      	b.n	8001d98 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	899b      	ldrh	r3, [r3, #12]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	819a      	strh	r2, [r3, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b087      	sub	sp, #28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	807b      	strh	r3, [r7, #2]
 8001dae:	4613      	mov	r3, r2
 8001db0:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d103      	bne.n	8001df0 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	330c      	adds	r3, #12
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e009      	b.n	8001e04 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d103      	bne.n	8001dfe <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3310      	adds	r3, #16
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e002      	b.n	8001e04 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3314      	adds	r3, #20
 8001e02:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	6811      	ldr	r1, [r2, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001e16:	e006      	b.n	8001e26 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	43d2      	mvns	r2, r2
 8001e22:	400a      	ands	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	809a      	strh	r2, [r3, #4]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	889b      	ldrh	r3, [r3, #4]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e64:	b29b      	uxth	r3, r3
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e001      	b.n	8001e9a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e011      	b.n	8001f18 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d107      	bne.n	8001f0a <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	8a1b      	ldrh	r3, [r3, #16]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e006      	b.n	8001f18 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	8a9b      	ldrh	r3, [r3, #20]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	4013      	ands	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001f18:	887b      	ldrh	r3, [r7, #2]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001f20:	2201      	movs	r2, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <USART_GetITStatus+0xa4>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	74fb      	strb	r3, [r7, #19]
 8001f48:	e001      	b.n	8001f4e <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
	...

08001f5c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <NVIC_EnableIRQ+0x2c>)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	79fa      	ldrb	r2, [r7, #7]
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	00000000 	.word	0x00000000

08001f90 <main>:
u16 adcValue;
float VNtc,RNtc,TNtc;



int main(void) {
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	 To reconfigure the default setting of SystemInit() function, refer to
	 system_stm32f0xx.c file
	 */

	/* Initialize GPIOA PIN8 */
	GPIOC_Init();
 8001f94:	f000 f8d6 	bl	8002144 <GPIOC_Init>
	/* Initialize USART1 */
	USART1_Init();
 8001f98:	f000 f8f2 	bl	8002180 <USART1_Init>

	ADC_Configuration();
 8001f9c:	f000 f972 	bl	8002284 <ADC_Configuration>

	sprintf(out_buffer, "Hello world\r\n");
 8001fa0:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <main+0x190>)
 8001fa2:	4b60      	ldr	r3, [pc, #384]	; (8002124 <main+0x194>)
 8001fa4:	4614      	mov	r4, r2
 8001fa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001fa8:	6020      	str	r0, [r4, #0]
 8001faa:	6061      	str	r1, [r4, #4]
 8001fac:	60a2      	str	r2, [r4, #8]
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	81a3      	strh	r3, [r4, #12]
	putst(out_buffer);
 8001fb2:	485b      	ldr	r0, [pc, #364]	; (8002120 <main+0x190>)
 8001fb4:	f000 f9f0 	bl	8002398 <putst>

	while (1) {
		adcValue = readADC1(ADC_Channel_8);
 8001fb8:	2008      	movs	r0, #8
 8001fba:	f000 f9b1 	bl	8002320 <readADC1>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b59      	ldr	r3, [pc, #356]	; (8002128 <main+0x198>)
 8001fc4:	801a      	strh	r2, [r3, #0]
		VNtc = (float)(adcValue*VSupply/4096);
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <main+0x198>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa1a 	bl	8000404 <__aeabi_i2d>
 8001fd0:	a349      	add	r3, pc, #292	; (adr r3, 80020f8 <main+0x168>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fa7b 	bl	80004d0 <__aeabi_dmul>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460c      	mov	r4, r1
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b51      	ldr	r3, [pc, #324]	; (800212c <main+0x19c>)
 8001fe8:	f7fe fb9c 	bl	8000724 <__aeabi_ddiv>
 8001fec:	4603      	mov	r3, r0
 8001fee:	460c      	mov	r4, r1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	f7fe fd44 	bl	8000a80 <__aeabi_d2f>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <main+0x1a0>)
 8001ffc:	601a      	str	r2, [r3, #0]
		RNtc = RConstant*VNtc/(VSupply-VNtc);
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <main+0x1a0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa10 	bl	8000428 <__aeabi_f2d>
 8002008:	a33d      	add	r3, pc, #244	; (adr r3, 8002100 <main+0x170>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe fa5f 	bl	80004d0 <__aeabi_dmul>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	4625      	mov	r5, r4
 8002018:	461c      	mov	r4, r3
 800201a:	4b45      	ldr	r3, [pc, #276]	; (8002130 <main+0x1a0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa02 	bl	8000428 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	a133      	add	r1, pc, #204	; (adr r1, 80020f8 <main+0x168>)
 800202a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800202e:	f7fe f89b 	bl	8000168 <__aeabi_dsub>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4620      	mov	r0, r4
 8002038:	4629      	mov	r1, r5
 800203a:	f7fe fb73 	bl	8000724 <__aeabi_ddiv>
 800203e:	4603      	mov	r3, r0
 8002040:	460c      	mov	r4, r1
 8002042:	4618      	mov	r0, r3
 8002044:	4621      	mov	r1, r4
 8002046:	f7fe fd1b 	bl	8000a80 <__aeabi_d2f>
 800204a:	4602      	mov	r2, r0
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <main+0x1a4>)
 800204e:	601a      	str	r2, [r3, #0]
		TNtc = logf(RNtc/RNtc_25)/Beta + 1/ TK_25;
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <main+0x1a4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4938      	ldr	r1, [pc, #224]	; (8002138 <main+0x1a8>)
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe ff24 	bl	8000ea4 <__aeabi_fdiv>
 800205c:	4603      	mov	r3, r0
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fa00 	bl	8005464 <logf>
 8002064:	4603      	mov	r3, r0
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f9de 	bl	8000428 <__aeabi_f2d>
 800206c:	a326      	add	r3, pc, #152	; (adr r3, 8002108 <main+0x178>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fb57 	bl	8000724 <__aeabi_ddiv>
 8002076:	4603      	mov	r3, r0
 8002078:	460c      	mov	r4, r1
 800207a:	4618      	mov	r0, r3
 800207c:	4621      	mov	r1, r4
 800207e:	a324      	add	r3, pc, #144	; (adr r3, 8002110 <main+0x180>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe f872 	bl	800016c <__adddf3>
 8002088:	4603      	mov	r3, r0
 800208a:	460c      	mov	r4, r1
 800208c:	4618      	mov	r0, r3
 800208e:	4621      	mov	r1, r4
 8002090:	f7fe fcf6 	bl	8000a80 <__aeabi_d2f>
 8002094:	4602      	mov	r2, r0
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <main+0x1ac>)
 8002098:	601a      	str	r2, [r3, #0]
		TNtc = 1/TNtc - TK_0;
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <main+0x1ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80020a4:	f7fe fefe 	bl	8000ea4 <__aeabi_fdiv>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f9bc 	bl	8000428 <__aeabi_f2d>
 80020b0:	a319      	add	r3, pc, #100	; (adr r3, 8002118 <main+0x188>)
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f7fe f857 	bl	8000168 <__aeabi_dsub>
 80020ba:	4603      	mov	r3, r0
 80020bc:	460c      	mov	r4, r1
 80020be:	4618      	mov	r0, r3
 80020c0:	4621      	mov	r1, r4
 80020c2:	f7fe fcdd 	bl	8000a80 <__aeabi_d2f>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <main+0x1ac>)
 80020ca:	601a      	str	r2, [r3, #0]


		sprintf(out_buffer, "%f\r\n",TNtc);
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <main+0x1ac>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f9a9 	bl	8000428 <__aeabi_f2d>
 80020d6:	4603      	mov	r3, r0
 80020d8:	460c      	mov	r4, r1
 80020da:	461a      	mov	r2, r3
 80020dc:	4623      	mov	r3, r4
 80020de:	4918      	ldr	r1, [pc, #96]	; (8002140 <main+0x1b0>)
 80020e0:	480f      	ldr	r0, [pc, #60]	; (8002120 <main+0x190>)
 80020e2:	f000 fabf 	bl	8002664 <sprintf>
		putst(out_buffer);
 80020e6:	480e      	ldr	r0, [pc, #56]	; (8002120 <main+0x190>)
 80020e8:	f000 f956 	bl	8002398 <putst>
		led_toggle();
 80020ec:	f000 f890 	bl	8002210 <led_toggle>
		delay(150);
 80020f0:	2096      	movs	r0, #150	; 0x96
 80020f2:	f000 f966 	bl	80023c2 <delay>
		adcValue = readADC1(ADC_Channel_8);
 80020f6:	e75f      	b.n	8001fb8 <main+0x28>
 80020f8:	66666666 	.word	0x66666666
 80020fc:	400a6666 	.word	0x400a6666
 8002100:	00000000 	.word	0x00000000
 8002104:	40b13000 	.word	0x40b13000
 8002108:	00000000 	.word	0x00000000
 800210c:	40ae6800 	.word	0x40ae6800
 8002110:	dcb5db83 	.word	0xdcb5db83
 8002114:	3f6b79e1 	.word	0x3f6b79e1
 8002118:	66666666 	.word	0x66666666
 800211c:	40711266 	.word	0x40711266
 8002120:	200006e4 	.word	0x200006e4
 8002124:	08005818 	.word	0x08005818
 8002128:	2000071c 	.word	0x2000071c
 800212c:	40b00000 	.word	0x40b00000
 8002130:	200006e0 	.word	0x200006e0
 8002134:	200006dc 	.word	0x200006dc
 8002138:	450cc000 	.word	0x450cc000
 800213c:	20000718 	.word	0x20000718
 8002140:	08005828 	.word	0x08005828

08002144 <GPIOC_Init>:
}

/***********************************************
 * Initialize GPIOC PIN13 as push-pull output
 ***********************************************/
void GPIOC_Init(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioc_init_struct;

	/* Enable PORT C clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800214a:	2101      	movs	r1, #1
 800214c:	2010      	movs	r0, #16
 800214e:	f7ff fd13 	bl	8001b78 <RCC_APB2PeriphClockCmd>

	gpioc_init_struct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002152:	2310      	movs	r3, #16
 8002154:	71fb      	strb	r3, [r7, #7]

	gpioc_init_struct.GPIO_Pin = GPIO_Pin_13;
 8002156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800215a:	80bb      	strh	r3, [r7, #4]

	gpioc_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800215c:	2303      	movs	r3, #3
 800215e:	71bb      	strb	r3, [r7, #6]
	/* Initialize GPIOA: 50MHz, PIN13, Push-pull Output */
	GPIO_Init(GPIOC, &gpioc_init_struct);
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <GPIOC_Init+0x38>)
 8002166:	f7ff fb49 	bl	80017fc <GPIO_Init>

	/* Turn off LED to start with */
	GPIO_SetBits(GPIOC, GPIO_Pin_13);
 800216a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <GPIOC_Init+0x38>)
 8002170:	f7ff fc19 	bl	80019a6 <GPIO_SetBits>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40011000 	.word	0x40011000

08002180 <USART1_Init>:

/*****************************************************
 * Initialize USART1: enable interrupt on reception
 * of a character
 *****************************************************/
void USART1_Init(void) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
	USART_InitTypeDef usart1_init_struct;
	/* Bit configuration structure for GPIOA PIN9 and PIN10 */
	GPIO_InitTypeDef gpioa_init_struct;

	/* Enalbe clock for USART1, AFIO and GPIOA */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8002186:	2101      	movs	r1, #1
 8002188:	f244 0005 	movw	r0, #16389	; 0x4005
 800218c:	f7ff fcf4 	bl	8001b78 <RCC_APB2PeriphClockCmd>
	RCC_APB2Periph_GPIOA, ENABLE);

	/* GPIOA PIN9 alternative function Tx */
	gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 8002190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002194:	80bb      	strh	r3, [r7, #4]
	gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002196:	2303      	movs	r3, #3
 8002198:	71bb      	strb	r3, [r7, #6]
	gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800219a:	2318      	movs	r3, #24
 800219c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &gpioa_init_struct);
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4819      	ldr	r0, [pc, #100]	; (8002208 <USART1_Init+0x88>)
 80021a4:	f7ff fb2a 	bl	80017fc <GPIO_Init>
	/* GPIOA PIN9 alternative function Rx */
	gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 80021a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ac:	80bb      	strh	r3, [r7, #4]
	gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80021ae:	2303      	movs	r3, #3
 80021b0:	71bb      	strb	r3, [r7, #6]
	gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80021b2:	2304      	movs	r3, #4
 80021b4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &gpioa_init_struct);
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4813      	ldr	r0, [pc, #76]	; (8002208 <USART1_Init+0x88>)
 80021bc:	f7ff fb1e 	bl	80017fc <GPIO_Init>

	/* Enable USART1 */
	USART_Cmd(USART1, ENABLE);
 80021c0:	2101      	movs	r1, #1
 80021c2:	4812      	ldr	r0, [pc, #72]	; (800220c <USART1_Init+0x8c>)
 80021c4:	f7ff fdce 	bl	8001d64 <USART_Cmd>
	/* Baud rate 9600, 8-bit data, One stop bit
	 * No parity, Do both Rx and Tx, No HW flow control
	 */
	usart1_init_struct.USART_BaudRate = 19200;
 80021c8:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80021cc:	60bb      	str	r3, [r7, #8]
	usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 80021ce:	2300      	movs	r3, #0
 80021d0:	81bb      	strh	r3, [r7, #12]
	usart1_init_struct.USART_StopBits = USART_StopBits_1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	81fb      	strh	r3, [r7, #14]
	usart1_init_struct.USART_Parity = USART_Parity_No;
 80021d6:	2300      	movs	r3, #0
 80021d8:	823b      	strh	r3, [r7, #16]
	usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80021da:	230c      	movs	r3, #12
 80021dc:	827b      	strh	r3, [r7, #18]
	usart1_init_struct.USART_HardwareFlowControl =
 80021de:	2300      	movs	r3, #0
 80021e0:	82bb      	strh	r3, [r7, #20]
	USART_HardwareFlowControl_None;
	/* Configure USART1 */
	USART_Init(USART1, &usart1_init_struct);
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	4619      	mov	r1, r3
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <USART1_Init+0x8c>)
 80021ea:	f7ff fd01 	bl	8001bf0 <USART_Init>
	/* Enable RXNE interrupt */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80021ee:	2201      	movs	r2, #1
 80021f0:	f240 5125 	movw	r1, #1317	; 0x525
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <USART1_Init+0x8c>)
 80021f6:	f7ff fdd4 	bl	8001da2 <USART_ITConfig>
	/* Enable USART1 global interrupt */
	NVIC_EnableIRQ(USART1_IRQn);
 80021fa:	2025      	movs	r0, #37	; 0x25
 80021fc:	f7ff feae 	bl	8001f5c <NVIC_EnableIRQ>
}
 8002200:	bf00      	nop
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40010800 	.word	0x40010800
 800220c:	40013800 	.word	0x40013800

08002210 <led_toggle>:

/*******************************************
 * Toggle LED
 *******************************************/
void led_toggle(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	/* Read LED output (GPIOC PIN13) status */
	uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_13);
 8002216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800221a:	480b      	ldr	r0, [pc, #44]	; (8002248 <led_toggle+0x38>)
 800221c:	f7ff fbaa 	bl	8001974 <GPIO_ReadOutputDataBit>
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]

	/* If LED output set, clear it */
	if (led_bit == (uint8_t) Bit_SET) {
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <led_toggle+0x26>
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 800222a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800222e:	4806      	ldr	r0, [pc, #24]	; (8002248 <led_toggle+0x38>)
 8002230:	f7ff fbc7 	bl	80019c2 <GPIO_ResetBits>
	}
	/* If LED output clear, set it */
	else {
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
	}
}
 8002234:	e004      	b.n	8002240 <led_toggle+0x30>
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
 8002236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800223a:	4803      	ldr	r0, [pc, #12]	; (8002248 <led_toggle+0x38>)
 800223c:	f7ff fbb3 	bl	80019a6 <GPIO_SetBits>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40011000 	.word	0x40011000

0800224c <USART1_IRQHandler>:

/**********************************************************
 * USART1 interrupt request handler: on reception of a
 * character 't', toggle LED and transmit a character 'T'
 *********************************************************/
void USART1_IRQHandler(void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
	/* RXNE handler */
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 8002250:	f240 5125 	movw	r1, #1317	; 0x525
 8002254:	480a      	ldr	r0, [pc, #40]	; (8002280 <USART1_IRQHandler+0x34>)
 8002256:	f7ff fe26 	bl	8001ea6 <USART_GetITStatus>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <USART1_IRQHandler+0x2e>
		/* If received 't', toggle LED and transmit 'T' */
		if ((char) USART_ReceiveData(USART1) == 't') {
 8002260:	4807      	ldr	r0, [pc, #28]	; (8002280 <USART1_IRQHandler+0x34>)
 8002262:	f7ff fdf6 	bl	8001e52 <USART_ReceiveData>
 8002266:	4603      	mov	r3, r0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b74      	cmp	r3, #116	; 0x74
 800226c:	d105      	bne.n	800227a <USART1_IRQHandler+0x2e>
			led_toggle();
 800226e:	f7ff ffcf 	bl	8002210 <led_toggle>
			USART_SendData(USART1, 'T');
 8002272:	2154      	movs	r1, #84	; 0x54
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <USART1_IRQHandler+0x34>)
 8002276:	f7ff fddb 	bl	8001e30 <USART_SendData>
		}
	}

	/* ------------------------------------------------------------ */
	/* Other USART1 interrupts handler can go here ...             */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40013800 	.word	0x40013800

08002284 <ADC_Configuration>:

void ADC_Configuration(void) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpiob_init_struct;

	ADC_InitTypeDef ADC_InitStructure;
	/* PCLK2 is the APB2 clock */
	/* ADCCLK = PCLK2/6 = 72/6 = 12MHz*/
	RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 800228a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800228e:	f7ff fba7 	bl	80019e0 <RCC_ADCCLKConfig>

	/* Enable ADC1 clock so that we can talk to it */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8002292:	2101      	movs	r1, #1
 8002294:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002298:	f7ff fc6e 	bl	8001b78 <RCC_APB2PeriphClockCmd>
	/* Put everything back to power-on defaults */
	ADC_DeInit(ADC1);
 800229c:	481e      	ldr	r0, [pc, #120]	; (8002318 <ADC_Configuration+0x94>)
 800229e:	f7ff f8b1 	bl	8001404 <ADC_DeInit>

	// C - Init the GPIO with the structure - Testing ADC
	gpiob_init_struct.GPIO_Pin = GPIO_Pin_0;
 80022a2:	2301      	movs	r3, #1
 80022a4:	82bb      	strh	r3, [r7, #20]
	gpiob_init_struct.GPIO_Speed = GPIO_Speed_2MHz;
 80022a6:	2302      	movs	r3, #2
 80022a8:	75bb      	strb	r3, [r7, #22]
	gpiob_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80022aa:	2304      	movs	r3, #4
 80022ac:	75fb      	strb	r3, [r7, #23]

	/* Initialize GPIOA: 50MHz, PIN13, Push-pull Output */
	GPIO_Init(GPIOB, &gpiob_init_struct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4819      	ldr	r0, [pc, #100]	; (800231c <ADC_Configuration+0x98>)
 80022b6:	f7ff faa1 	bl	80017fc <GPIO_Init>

	/* ADC1 Configuration ------------------------------------------------------*/
	/* ADC1 and ADC2 operate independently */
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
	/* Disable the scan conversion so we do one at a time */
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	713b      	strb	r3, [r7, #4]
	/* Don't do contimuous conversions - do them on demand */
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	717b      	strb	r3, [r7, #5]
	/* Start conversin by software, not an external trigger */
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 80022c6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80022ca:	60bb      	str	r3, [r7, #8]
	/* Conversions are 12 bit - put them in the lower 12 bits of the result */
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
	/* Say how many channels would be used by the sequencer */
	ADC_InitStructure.ADC_NbrOfChannel = 1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	743b      	strb	r3, [r7, #16]

	/* Now do the setup */
	ADC_Init(ADC1, &ADC_InitStructure);
 80022d4:	463b      	mov	r3, r7
 80022d6:	4619      	mov	r1, r3
 80022d8:	480f      	ldr	r0, [pc, #60]	; (8002318 <ADC_Configuration+0x94>)
 80022da:	f7ff f8cd 	bl	8001478 <ADC_Init>
	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 80022de:	2101      	movs	r1, #1
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <ADC_Configuration+0x94>)
 80022e2:	f7ff f91b 	bl	800151c <ADC_Cmd>

	/* Enable ADC1 reset calibaration register */
	ADC_ResetCalibration(ADC1);
 80022e6:	480c      	ldr	r0, [pc, #48]	; (8002318 <ADC_Configuration+0x94>)
 80022e8:	f7ff f933 	bl	8001552 <ADC_ResetCalibration>
	/* Check the end of ADC1 reset calibration register */
	while (ADC_GetResetCalibrationStatus(ADC1))
 80022ec:	bf00      	nop
 80022ee:	480a      	ldr	r0, [pc, #40]	; (8002318 <ADC_Configuration+0x94>)
 80022f0:	f7ff f93e 	bl	8001570 <ADC_GetResetCalibrationStatus>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f9      	bne.n	80022ee <ADC_Configuration+0x6a>
		;
	/* Start ADC1 calibaration */
	ADC_StartCalibration(ADC1);
 80022fa:	4807      	ldr	r0, [pc, #28]	; (8002318 <ADC_Configuration+0x94>)
 80022fc:	f7ff f94f 	bl	800159e <ADC_StartCalibration>
	/* Check the end of ADC1 calibration */
	while (ADC_GetCalibrationStatus(ADC1))
 8002300:	bf00      	nop
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <ADC_Configuration+0x94>)
 8002304:	f7ff f95a 	bl	80015bc <ADC_GetCalibrationStatus>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <ADC_Configuration+0x7e>
		;
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40012400 	.word	0x40012400
 800231c:	40010c00 	.word	0x40010c00

08002320 <readADC1>:

u16 readADC1(u8 channel) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
	ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_7Cycles5);
 800232a:	79f9      	ldrb	r1, [r7, #7]
 800232c:	2301      	movs	r3, #1
 800232e:	2201      	movs	r2, #1
 8002330:	480b      	ldr	r0, [pc, #44]	; (8002360 <readADC1+0x40>)
 8002332:	f7ff f975 	bl	8001620 <ADC_RegularChannelConfig>
	// Start the conversion
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8002336:	2101      	movs	r1, #1
 8002338:	4809      	ldr	r0, [pc, #36]	; (8002360 <readADC1+0x40>)
 800233a:	f7ff f956 	bl	80015ea <ADC_SoftwareStartConvCmd>
	// Wait until conversion completion
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET)
 800233e:	bf00      	nop
 8002340:	2102      	movs	r1, #2
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <readADC1+0x40>)
 8002344:	f7ff fa41 	bl	80017ca <ADC_GetFlagStatus>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f8      	beq.n	8002340 <readADC1+0x20>
		;
	// Get the conversion value
	return ADC_GetConversionValue(ADC1);
 800234e:	4804      	ldr	r0, [pc, #16]	; (8002360 <readADC1+0x40>)
 8002350:	f7ff fa2f 	bl	80017b2 <ADC_GetConversionValue>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40012400 	.word	0x40012400

08002364 <putch>:

//writes a character to the serial port
void putch(char c) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
	USART_SendData(USART1, c);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	b29b      	uxth	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	4807      	ldr	r0, [pc, #28]	; (8002394 <putch+0x30>)
 8002376:	f7ff fd5b 	bl	8001e30 <USART_SendData>
	while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)
 800237a:	bf00      	nop
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <putch+0x30>)
 8002380:	f7ff fd76 	bl	8001e70 <USART_GetFlagStatus>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f8      	beq.n	800237c <putch+0x18>
		;
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40013800 	.word	0x40013800

08002398 <putst>:

// writes a NULL terminated string to serial port
void putst(char *str) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	while (*str != 0) {
 80023a0:	e007      	b.n	80023b2 <putst+0x1a>

		putch(*str);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ffdc 	bl	8002364 <putch>
		str++;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3301      	adds	r3, #1
 80023b0:	607b      	str	r3, [r7, #4]
	while (*str != 0) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f3      	bne.n	80023a2 <putst+0xa>
	}
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <delay>:
	{
	}
}
#endif

void delay(unsigned int nCount) {
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
	unsigned int i, j;

	for (i = 0; i < nCount; i++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e00d      	b.n	80023ec <delay+0x2a>
		for (j = 0; j < 0x2AFF; j++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	e002      	b.n	80023dc <delay+0x1a>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3301      	adds	r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f642 22fe 	movw	r2, #11006	; 0x2afe
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d9f7      	bls.n	80023d6 <delay+0x14>
	for (i = 0; i < nCount; i++)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3301      	adds	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3ed      	bcc.n	80023d0 <delay+0xe>
			;
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002406:	e003      	b.n	8002410 <LoopCopyDataInit>

08002408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800240a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800240c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800240e:	3104      	adds	r1, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002410:	480b      	ldr	r0, [pc, #44]	; (8002440 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002418:	d3f6      	bcc.n	8002408 <CopyDataInit>
	ldr	r2, =_sbss
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800241c:	e002      	b.n	8002424 <LoopFillZerobss>

0800241e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800241e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002420:	f842 3b04 	str.w	r3, [r2], #4

08002424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002428:	d3f9      	bcc.n	800241e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800242a:	f000 f83d 	bl	80024a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242e:	f000 f8f5 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002432:	f7ff fdad 	bl	8001f90 <main>
	bx	lr
 8002436:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002438:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800243c:	08005aac 	.word	0x08005aac
	ldr	r0, =_sdata
 8002440:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002444:	20000688 	.word	0x20000688
	ldr	r2, =_sbss
 8002448:	20000688 	.word	0x20000688
	ldr	r3, = _ebss
 800244c:	2000072c 	.word	0x2000072c

08002450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC1_2_IRQHandler>

08002452 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
	...

080024a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <SystemInit+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <SystemInit+0x5c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80024b8:	4912      	ldr	r1, [pc, #72]	; (8002504 <SystemInit+0x5c>)
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <SystemInit+0x5c>)
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <SystemInit+0x60>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80024c4:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <SystemInit+0x5c>)
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <SystemInit+0x5c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <SystemInit+0x5c>)
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <SystemInit+0x5c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80024e0:	4a08      	ldr	r2, [pc, #32]	; (8002504 <SystemInit+0x5c>)
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <SystemInit+0x5c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SystemInit+0x5c>)
 80024ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80024f2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80024f4:	f000 f80c 	bl	8002510 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <SystemInit+0x64>)
 80024fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	f8ff0000 	.word	0xf8ff0000
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002514:	f000 f802 	bl	800251c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800252a:	4a3a      	ldr	r2, [pc, #232]	; (8002614 <SetSysClockTo72+0xf8>)
 800252c:	4b39      	ldr	r3, [pc, #228]	; (8002614 <SetSysClockTo72+0xf8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <SetSysClockTo72+0xf8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3301      	adds	r3, #1
 8002544:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <SetSysClockTo72+0x38>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002552:	d1f0      	bne.n	8002536 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002554:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <SetSysClockTo72+0xf8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002560:	2301      	movs	r3, #1
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	e001      	b.n	800256a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d14b      	bne.n	8002608 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002570:	4a29      	ldr	r2, [pc, #164]	; (8002618 <SetSysClockTo72+0xfc>)
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <SetSysClockTo72+0xfc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f043 0310 	orr.w	r3, r3, #16
 800257a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <SetSysClockTo72+0xfc>)
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <SetSysClockTo72+0xfc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002588:	4a23      	ldr	r2, [pc, #140]	; (8002618 <SetSysClockTo72+0xfc>)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <SetSysClockTo72+0xfc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002594:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <SetSysClockTo72+0xf8>)
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <SetSysClockTo72+0xf8>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800259c:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <SetSysClockTo72+0xf8>)
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <SetSysClockTo72+0xf8>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80025a4:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <SetSysClockTo72+0xf8>)
 80025a6:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <SetSysClockTo72+0xf8>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80025b0:	4a18      	ldr	r2, [pc, #96]	; (8002614 <SetSysClockTo72+0xf8>)
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <SetSysClockTo72+0xf8>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025ba:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <SetSysClockTo72+0xf8>)
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <SetSysClockTo72+0xf8>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80025c6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80025c8:	4a12      	ldr	r2, [pc, #72]	; (8002614 <SetSysClockTo72+0xf8>)
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <SetSysClockTo72+0xf8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80025d4:	bf00      	nop
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <SetSysClockTo72+0xf8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f9      	beq.n	80025d6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80025e2:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <SetSysClockTo72+0xf8>)
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <SetSysClockTo72+0xf8>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 0303 	bic.w	r3, r3, #3
 80025ec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <SetSysClockTo72+0xf8>)
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <SetSysClockTo72+0xf8>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80025fa:	bf00      	nop
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SetSysClockTo72+0xf8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d1f9      	bne.n	80025fc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	40022000 	.word	0x40022000

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	2500      	movs	r5, #0
 8002620:	4e0c      	ldr	r6, [pc, #48]	; (8002654 <__libc_init_array+0x38>)
 8002622:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002624:	1ba4      	subs	r4, r4, r6
 8002626:	10a4      	asrs	r4, r4, #2
 8002628:	42a5      	cmp	r5, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	f003 f8e8 	bl	8005800 <_init>
 8002630:	2500      	movs	r5, #0
 8002632:	4e0a      	ldr	r6, [pc, #40]	; (800265c <__libc_init_array+0x40>)
 8002634:	4c0a      	ldr	r4, [pc, #40]	; (8002660 <__libc_init_array+0x44>)
 8002636:	1ba4      	subs	r4, r4, r6
 8002638:	10a4      	asrs	r4, r4, #2
 800263a:	42a5      	cmp	r5, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002644:	4798      	blx	r3
 8002646:	3501      	adds	r5, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800264e:	4798      	blx	r3
 8002650:	3501      	adds	r5, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	08005aa4 	.word	0x08005aa4
 8002658:	08005aa4 	.word	0x08005aa4
 800265c:	08005aa4 	.word	0x08005aa4
 8002660:	08005aa8 	.word	0x08005aa8

08002664 <sprintf>:
 8002664:	b40e      	push	{r1, r2, r3}
 8002666:	f44f 7102 	mov.w	r1, #520	; 0x208
 800266a:	b500      	push	{lr}
 800266c:	b09c      	sub	sp, #112	; 0x70
 800266e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002672:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002676:	9104      	str	r1, [sp, #16]
 8002678:	9107      	str	r1, [sp, #28]
 800267a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800267e:	ab1d      	add	r3, sp, #116	; 0x74
 8002680:	9002      	str	r0, [sp, #8]
 8002682:	9006      	str	r0, [sp, #24]
 8002684:	4808      	ldr	r0, [pc, #32]	; (80026a8 <sprintf+0x44>)
 8002686:	f853 2b04 	ldr.w	r2, [r3], #4
 800268a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800268e:	6800      	ldr	r0, [r0, #0]
 8002690:	a902      	add	r1, sp, #8
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	f000 f80a 	bl	80026ac <_svfprintf_r>
 8002698:	2200      	movs	r2, #0
 800269a:	9b02      	ldr	r3, [sp, #8]
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	b01c      	add	sp, #112	; 0x70
 80026a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80026a4:	b003      	add	sp, #12
 80026a6:	4770      	bx	lr
 80026a8:	20000014 	.word	0x20000014

080026ac <_svfprintf_r>:
 80026ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b0:	b0bf      	sub	sp, #252	; 0xfc
 80026b2:	4689      	mov	r9, r1
 80026b4:	4615      	mov	r5, r2
 80026b6:	461f      	mov	r7, r3
 80026b8:	4682      	mov	sl, r0
 80026ba:	f001 fe29 	bl	8004310 <_localeconv_r>
 80026be:	6803      	ldr	r3, [r0, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	9311      	str	r3, [sp, #68]	; 0x44
 80026c4:	f7fd fd44 	bl	8000150 <strlen>
 80026c8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80026cc:	900a      	str	r0, [sp, #40]	; 0x28
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	d518      	bpl.n	8002704 <_svfprintf_r+0x58>
 80026d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80026d6:	b9ab      	cbnz	r3, 8002704 <_svfprintf_r+0x58>
 80026d8:	2140      	movs	r1, #64	; 0x40
 80026da:	4650      	mov	r0, sl
 80026dc:	f001 fe2e 	bl	800433c <_malloc_r>
 80026e0:	f8c9 0000 	str.w	r0, [r9]
 80026e4:	f8c9 0010 	str.w	r0, [r9, #16]
 80026e8:	b948      	cbnz	r0, 80026fe <_svfprintf_r+0x52>
 80026ea:	230c      	movs	r3, #12
 80026ec:	f8ca 3000 	str.w	r3, [sl]
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80026f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80026f8:	b03f      	add	sp, #252	; 0xfc
 80026fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fe:	2340      	movs	r3, #64	; 0x40
 8002700:	f8c9 3014 	str.w	r3, [r9, #20]
 8002704:	2300      	movs	r3, #0
 8002706:	ac2e      	add	r4, sp, #184	; 0xb8
 8002708:	9421      	str	r4, [sp, #132]	; 0x84
 800270a:	9323      	str	r3, [sp, #140]	; 0x8c
 800270c:	9322      	str	r3, [sp, #136]	; 0x88
 800270e:	9509      	str	r5, [sp, #36]	; 0x24
 8002710:	9307      	str	r3, [sp, #28]
 8002712:	930d      	str	r3, [sp, #52]	; 0x34
 8002714:	930e      	str	r3, [sp, #56]	; 0x38
 8002716:	9315      	str	r3, [sp, #84]	; 0x54
 8002718:	9314      	str	r3, [sp, #80]	; 0x50
 800271a:	930b      	str	r3, [sp, #44]	; 0x2c
 800271c:	9312      	str	r3, [sp, #72]	; 0x48
 800271e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002720:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002722:	462b      	mov	r3, r5
 8002724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002728:	b112      	cbz	r2, 8002730 <_svfprintf_r+0x84>
 800272a:	2a25      	cmp	r2, #37	; 0x25
 800272c:	f040 8083 	bne.w	8002836 <_svfprintf_r+0x18a>
 8002730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002732:	1aee      	subs	r6, r5, r3
 8002734:	d00d      	beq.n	8002752 <_svfprintf_r+0xa6>
 8002736:	e884 0048 	stmia.w	r4, {r3, r6}
 800273a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800273c:	4433      	add	r3, r6
 800273e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002742:	3301      	adds	r3, #1
 8002744:	2b07      	cmp	r3, #7
 8002746:	9322      	str	r3, [sp, #136]	; 0x88
 8002748:	dc77      	bgt.n	800283a <_svfprintf_r+0x18e>
 800274a:	3408      	adds	r4, #8
 800274c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800274e:	4433      	add	r3, r6
 8002750:	930b      	str	r3, [sp, #44]	; 0x2c
 8002752:	782b      	ldrb	r3, [r5, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8725 	beq.w	80035a4 <_svfprintf_r+0xef8>
 800275a:	2300      	movs	r3, #0
 800275c:	1c69      	adds	r1, r5, #1
 800275e:	461a      	mov	r2, r3
 8002760:	f04f 3bff 	mov.w	fp, #4294967295
 8002764:	461d      	mov	r5, r3
 8002766:	200a      	movs	r0, #10
 8002768:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800276c:	930c      	str	r3, [sp, #48]	; 0x30
 800276e:	1c4e      	adds	r6, r1, #1
 8002770:	7809      	ldrb	r1, [r1, #0]
 8002772:	9609      	str	r6, [sp, #36]	; 0x24
 8002774:	9106      	str	r1, [sp, #24]
 8002776:	9906      	ldr	r1, [sp, #24]
 8002778:	3920      	subs	r1, #32
 800277a:	2958      	cmp	r1, #88	; 0x58
 800277c:	f200 8414 	bhi.w	8002fa8 <_svfprintf_r+0x8fc>
 8002780:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002784:	041200a5 	.word	0x041200a5
 8002788:	00aa0412 	.word	0x00aa0412
 800278c:	04120412 	.word	0x04120412
 8002790:	04120412 	.word	0x04120412
 8002794:	04120412 	.word	0x04120412
 8002798:	006500ad 	.word	0x006500ad
 800279c:	00b50412 	.word	0x00b50412
 80027a0:	041200b8 	.word	0x041200b8
 80027a4:	00d800d5 	.word	0x00d800d5
 80027a8:	00d800d8 	.word	0x00d800d8
 80027ac:	00d800d8 	.word	0x00d800d8
 80027b0:	00d800d8 	.word	0x00d800d8
 80027b4:	00d800d8 	.word	0x00d800d8
 80027b8:	04120412 	.word	0x04120412
 80027bc:	04120412 	.word	0x04120412
 80027c0:	04120412 	.word	0x04120412
 80027c4:	04120412 	.word	0x04120412
 80027c8:	04120412 	.word	0x04120412
 80027cc:	0122010c 	.word	0x0122010c
 80027d0:	01220412 	.word	0x01220412
 80027d4:	04120412 	.word	0x04120412
 80027d8:	04120412 	.word	0x04120412
 80027dc:	041200eb 	.word	0x041200eb
 80027e0:	033c0412 	.word	0x033c0412
 80027e4:	04120412 	.word	0x04120412
 80027e8:	04120412 	.word	0x04120412
 80027ec:	03a40412 	.word	0x03a40412
 80027f0:	04120412 	.word	0x04120412
 80027f4:	04120085 	.word	0x04120085
 80027f8:	04120412 	.word	0x04120412
 80027fc:	04120412 	.word	0x04120412
 8002800:	04120412 	.word	0x04120412
 8002804:	04120412 	.word	0x04120412
 8002808:	00fe0412 	.word	0x00fe0412
 800280c:	0122006b 	.word	0x0122006b
 8002810:	01220122 	.word	0x01220122
 8002814:	006b00ee 	.word	0x006b00ee
 8002818:	04120412 	.word	0x04120412
 800281c:	041200f1 	.word	0x041200f1
 8002820:	033e031e 	.word	0x033e031e
 8002824:	00f80372 	.word	0x00f80372
 8002828:	03830412 	.word	0x03830412
 800282c:	03a60412 	.word	0x03a60412
 8002830:	04120412 	.word	0x04120412
 8002834:	03be      	.short	0x03be
 8002836:	461d      	mov	r5, r3
 8002838:	e773      	b.n	8002722 <_svfprintf_r+0x76>
 800283a:	aa21      	add	r2, sp, #132	; 0x84
 800283c:	4649      	mov	r1, r9
 800283e:	4650      	mov	r0, sl
 8002840:	f002 fa90 	bl	8004d64 <__ssprint_r>
 8002844:	2800      	cmp	r0, #0
 8002846:	f040 868e 	bne.w	8003566 <_svfprintf_r+0xeba>
 800284a:	ac2e      	add	r4, sp, #184	; 0xb8
 800284c:	e77e      	b.n	800274c <_svfprintf_r+0xa0>
 800284e:	2301      	movs	r3, #1
 8002850:	222b      	movs	r2, #43	; 0x2b
 8002852:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002854:	e78b      	b.n	800276e <_svfprintf_r+0xc2>
 8002856:	460f      	mov	r7, r1
 8002858:	e7fb      	b.n	8002852 <_svfprintf_r+0x1a6>
 800285a:	b10b      	cbz	r3, 8002860 <_svfprintf_r+0x1b4>
 800285c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002860:	06ae      	lsls	r6, r5, #26
 8002862:	f140 80a1 	bpl.w	80029a8 <_svfprintf_r+0x2fc>
 8002866:	3707      	adds	r7, #7
 8002868:	f027 0707 	bic.w	r7, r7, #7
 800286c:	f107 0308 	add.w	r3, r7, #8
 8002870:	9308      	str	r3, [sp, #32]
 8002872:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002876:	2e00      	cmp	r6, #0
 8002878:	f177 0300 	sbcs.w	r3, r7, #0
 800287c:	da05      	bge.n	800288a <_svfprintf_r+0x1de>
 800287e:	232d      	movs	r3, #45	; 0x2d
 8002880:	4276      	negs	r6, r6
 8002882:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002886:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800288a:	2301      	movs	r3, #1
 800288c:	e2c7      	b.n	8002e1e <_svfprintf_r+0x772>
 800288e:	b10b      	cbz	r3, 8002894 <_svfprintf_r+0x1e8>
 8002890:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002894:	4ba0      	ldr	r3, [pc, #640]	; (8002b18 <_svfprintf_r+0x46c>)
 8002896:	9315      	str	r3, [sp, #84]	; 0x54
 8002898:	06ab      	lsls	r3, r5, #26
 800289a:	f140 8336 	bpl.w	8002f0a <_svfprintf_r+0x85e>
 800289e:	3707      	adds	r7, #7
 80028a0:	f027 0707 	bic.w	r7, r7, #7
 80028a4:	f107 0308 	add.w	r3, r7, #8
 80028a8:	9308      	str	r3, [sp, #32]
 80028aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80028ae:	07e8      	lsls	r0, r5, #31
 80028b0:	d50b      	bpl.n	80028ca <_svfprintf_r+0x21e>
 80028b2:	ea56 0307 	orrs.w	r3, r6, r7
 80028b6:	d008      	beq.n	80028ca <_svfprintf_r+0x21e>
 80028b8:	2330      	movs	r3, #48	; 0x30
 80028ba:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80028be:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80028c2:	f045 0502 	orr.w	r5, r5, #2
 80028c6:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 80028ca:	2302      	movs	r3, #2
 80028cc:	e2a4      	b.n	8002e18 <_svfprintf_r+0x76c>
 80028ce:	2a00      	cmp	r2, #0
 80028d0:	d1bf      	bne.n	8002852 <_svfprintf_r+0x1a6>
 80028d2:	2301      	movs	r3, #1
 80028d4:	2220      	movs	r2, #32
 80028d6:	e7bc      	b.n	8002852 <_svfprintf_r+0x1a6>
 80028d8:	f045 0501 	orr.w	r5, r5, #1
 80028dc:	e7b9      	b.n	8002852 <_svfprintf_r+0x1a6>
 80028de:	683e      	ldr	r6, [r7, #0]
 80028e0:	1d39      	adds	r1, r7, #4
 80028e2:	2e00      	cmp	r6, #0
 80028e4:	960c      	str	r6, [sp, #48]	; 0x30
 80028e6:	dab6      	bge.n	8002856 <_svfprintf_r+0x1aa>
 80028e8:	460f      	mov	r7, r1
 80028ea:	4276      	negs	r6, r6
 80028ec:	960c      	str	r6, [sp, #48]	; 0x30
 80028ee:	f045 0504 	orr.w	r5, r5, #4
 80028f2:	e7ae      	b.n	8002852 <_svfprintf_r+0x1a6>
 80028f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028f6:	1c4e      	adds	r6, r1, #1
 80028f8:	7809      	ldrb	r1, [r1, #0]
 80028fa:	292a      	cmp	r1, #42	; 0x2a
 80028fc:	9106      	str	r1, [sp, #24]
 80028fe:	d010      	beq.n	8002922 <_svfprintf_r+0x276>
 8002900:	f04f 0b00 	mov.w	fp, #0
 8002904:	9609      	str	r6, [sp, #36]	; 0x24
 8002906:	9906      	ldr	r1, [sp, #24]
 8002908:	3930      	subs	r1, #48	; 0x30
 800290a:	2909      	cmp	r1, #9
 800290c:	f63f af33 	bhi.w	8002776 <_svfprintf_r+0xca>
 8002910:	fb00 1b0b 	mla	fp, r0, fp, r1
 8002914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002916:	460e      	mov	r6, r1
 8002918:	f816 1b01 	ldrb.w	r1, [r6], #1
 800291c:	9106      	str	r1, [sp, #24]
 800291e:	9609      	str	r6, [sp, #36]	; 0x24
 8002920:	e7f1      	b.n	8002906 <_svfprintf_r+0x25a>
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	9609      	str	r6, [sp, #36]	; 0x24
 8002926:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800292a:	3704      	adds	r7, #4
 800292c:	e791      	b.n	8002852 <_svfprintf_r+0x1a6>
 800292e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002932:	e78e      	b.n	8002852 <_svfprintf_r+0x1a6>
 8002934:	2100      	movs	r1, #0
 8002936:	910c      	str	r1, [sp, #48]	; 0x30
 8002938:	9906      	ldr	r1, [sp, #24]
 800293a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800293c:	3930      	subs	r1, #48	; 0x30
 800293e:	fb00 1106 	mla	r1, r0, r6, r1
 8002942:	910c      	str	r1, [sp, #48]	; 0x30
 8002944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002946:	460e      	mov	r6, r1
 8002948:	f816 1b01 	ldrb.w	r1, [r6], #1
 800294c:	9106      	str	r1, [sp, #24]
 800294e:	9906      	ldr	r1, [sp, #24]
 8002950:	9609      	str	r6, [sp, #36]	; 0x24
 8002952:	3930      	subs	r1, #48	; 0x30
 8002954:	2909      	cmp	r1, #9
 8002956:	d9ef      	bls.n	8002938 <_svfprintf_r+0x28c>
 8002958:	e70d      	b.n	8002776 <_svfprintf_r+0xca>
 800295a:	f045 0508 	orr.w	r5, r5, #8
 800295e:	e778      	b.n	8002852 <_svfprintf_r+0x1a6>
 8002960:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002964:	e775      	b.n	8002852 <_svfprintf_r+0x1a6>
 8002966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002968:	7809      	ldrb	r1, [r1, #0]
 800296a:	296c      	cmp	r1, #108	; 0x6c
 800296c:	d105      	bne.n	800297a <_svfprintf_r+0x2ce>
 800296e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002970:	3101      	adds	r1, #1
 8002972:	9109      	str	r1, [sp, #36]	; 0x24
 8002974:	f045 0520 	orr.w	r5, r5, #32
 8002978:	e76b      	b.n	8002852 <_svfprintf_r+0x1a6>
 800297a:	f045 0510 	orr.w	r5, r5, #16
 800297e:	e768      	b.n	8002852 <_svfprintf_r+0x1a6>
 8002980:	2600      	movs	r6, #0
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	9308      	str	r3, [sp, #32]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800298c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8002990:	f04f 0b01 	mov.w	fp, #1
 8002994:	4637      	mov	r7, r6
 8002996:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800299a:	e11c      	b.n	8002bd6 <_svfprintf_r+0x52a>
 800299c:	b10b      	cbz	r3, 80029a2 <_svfprintf_r+0x2f6>
 800299e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80029a2:	f045 0510 	orr.w	r5, r5, #16
 80029a6:	e75b      	b.n	8002860 <_svfprintf_r+0x1b4>
 80029a8:	f015 0f10 	tst.w	r5, #16
 80029ac:	f107 0304 	add.w	r3, r7, #4
 80029b0:	d003      	beq.n	80029ba <_svfprintf_r+0x30e>
 80029b2:	683e      	ldr	r6, [r7, #0]
 80029b4:	9308      	str	r3, [sp, #32]
 80029b6:	17f7      	asrs	r7, r6, #31
 80029b8:	e75d      	b.n	8002876 <_svfprintf_r+0x1ca>
 80029ba:	683e      	ldr	r6, [r7, #0]
 80029bc:	f015 0f40 	tst.w	r5, #64	; 0x40
 80029c0:	9308      	str	r3, [sp, #32]
 80029c2:	bf18      	it	ne
 80029c4:	b236      	sxthne	r6, r6
 80029c6:	e7f6      	b.n	80029b6 <_svfprintf_r+0x30a>
 80029c8:	b10b      	cbz	r3, 80029ce <_svfprintf_r+0x322>
 80029ca:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80029ce:	3707      	adds	r7, #7
 80029d0:	f027 0707 	bic.w	r7, r7, #7
 80029d4:	f107 0308 	add.w	r3, r7, #8
 80029d8:	9308      	str	r3, [sp, #32]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	930d      	str	r3, [sp, #52]	; 0x34
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80029e6:	930e      	str	r3, [sp, #56]	; 0x38
 80029e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029ea:	4638      	mov	r0, r7
 80029ec:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80029f0:	4631      	mov	r1, r6
 80029f2:	4b4a      	ldr	r3, [pc, #296]	; (8002b1c <_svfprintf_r+0x470>)
 80029f4:	f7fe f806 	bl	8000a04 <__aeabi_dcmpun>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	f040 85dc 	bne.w	80035b6 <_svfprintf_r+0xf0a>
 80029fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <_svfprintf_r+0x470>)
 8002a04:	4638      	mov	r0, r7
 8002a06:	4631      	mov	r1, r6
 8002a08:	f7fd ffde 	bl	80009c8 <__aeabi_dcmple>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	f040 85d2 	bne.w	80035b6 <_svfprintf_r+0xf0a>
 8002a12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002a14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002a16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002a1a:	f7fd ffcb 	bl	80009b4 <__aeabi_dcmplt>
 8002a1e:	b110      	cbz	r0, 8002a26 <_svfprintf_r+0x37a>
 8002a20:	232d      	movs	r3, #45	; 0x2d
 8002a22:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <_svfprintf_r+0x474>)
 8002a28:	4a3e      	ldr	r2, [pc, #248]	; (8002b24 <_svfprintf_r+0x478>)
 8002a2a:	9906      	ldr	r1, [sp, #24]
 8002a2c:	f04f 0b03 	mov.w	fp, #3
 8002a30:	2947      	cmp	r1, #71	; 0x47
 8002a32:	bfcc      	ite	gt
 8002a34:	4690      	movgt	r8, r2
 8002a36:	4698      	movle	r8, r3
 8002a38:	2600      	movs	r6, #0
 8002a3a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002a3e:	4637      	mov	r7, r6
 8002a40:	e0c9      	b.n	8002bd6 <_svfprintf_r+0x52a>
 8002a42:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002a46:	d026      	beq.n	8002a96 <_svfprintf_r+0x3ea>
 8002a48:	9b06      	ldr	r3, [sp, #24]
 8002a4a:	f023 0320 	bic.w	r3, r3, #32
 8002a4e:	2b47      	cmp	r3, #71	; 0x47
 8002a50:	d104      	bne.n	8002a5c <_svfprintf_r+0x3b0>
 8002a52:	f1bb 0f00 	cmp.w	fp, #0
 8002a56:	bf08      	it	eq
 8002a58:	f04f 0b01 	moveq.w	fp, #1
 8002a5c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002a60:	9317      	str	r3, [sp, #92]	; 0x5c
 8002a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a64:	1e1f      	subs	r7, r3, #0
 8002a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a68:	bfa8      	it	ge
 8002a6a:	9710      	strge	r7, [sp, #64]	; 0x40
 8002a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a6e:	bfbd      	ittte	lt
 8002a70:	463b      	movlt	r3, r7
 8002a72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	9310      	strlt	r3, [sp, #64]	; 0x40
 8002a78:	2300      	movge	r3, #0
 8002a7a:	bfb8      	it	lt
 8002a7c:	232d      	movlt	r3, #45	; 0x2d
 8002a7e:	9316      	str	r3, [sp, #88]	; 0x58
 8002a80:	9b06      	ldr	r3, [sp, #24]
 8002a82:	f023 0720 	bic.w	r7, r3, #32
 8002a86:	2f46      	cmp	r7, #70	; 0x46
 8002a88:	d008      	beq.n	8002a9c <_svfprintf_r+0x3f0>
 8002a8a:	2f45      	cmp	r7, #69	; 0x45
 8002a8c:	d142      	bne.n	8002b14 <_svfprintf_r+0x468>
 8002a8e:	f10b 0601 	add.w	r6, fp, #1
 8002a92:	2302      	movs	r3, #2
 8002a94:	e004      	b.n	8002aa0 <_svfprintf_r+0x3f4>
 8002a96:	f04f 0b06 	mov.w	fp, #6
 8002a9a:	e7df      	b.n	8002a5c <_svfprintf_r+0x3b0>
 8002a9c:	465e      	mov	r6, fp
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	aa1f      	add	r2, sp, #124	; 0x7c
 8002aa2:	9204      	str	r2, [sp, #16]
 8002aa4:	aa1c      	add	r2, sp, #112	; 0x70
 8002aa6:	9203      	str	r2, [sp, #12]
 8002aa8:	aa1b      	add	r2, sp, #108	; 0x6c
 8002aaa:	9202      	str	r2, [sp, #8]
 8002aac:	e88d 0048 	stmia.w	sp, {r3, r6}
 8002ab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002ab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ab4:	4650      	mov	r0, sl
 8002ab6:	f000 fe57 	bl	8003768 <_dtoa_r>
 8002aba:	2f47      	cmp	r7, #71	; 0x47
 8002abc:	4680      	mov	r8, r0
 8002abe:	d102      	bne.n	8002ac6 <_svfprintf_r+0x41a>
 8002ac0:	07e8      	lsls	r0, r5, #31
 8002ac2:	f140 8585 	bpl.w	80035d0 <_svfprintf_r+0xf24>
 8002ac6:	eb08 0306 	add.w	r3, r8, r6
 8002aca:	2f46      	cmp	r7, #70	; 0x46
 8002acc:	9307      	str	r3, [sp, #28]
 8002ace:	d111      	bne.n	8002af4 <_svfprintf_r+0x448>
 8002ad0:	f898 3000 	ldrb.w	r3, [r8]
 8002ad4:	2b30      	cmp	r3, #48	; 0x30
 8002ad6:	d109      	bne.n	8002aec <_svfprintf_r+0x440>
 8002ad8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ada:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002adc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002ade:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002ae0:	f7fd ff5e 	bl	80009a0 <__aeabi_dcmpeq>
 8002ae4:	b910      	cbnz	r0, 8002aec <_svfprintf_r+0x440>
 8002ae6:	f1c6 0601 	rsb	r6, r6, #1
 8002aea:	961b      	str	r6, [sp, #108]	; 0x6c
 8002aec:	9a07      	ldr	r2, [sp, #28]
 8002aee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002af0:	441a      	add	r2, r3
 8002af2:	9207      	str	r2, [sp, #28]
 8002af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002af6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002af8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002afa:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002afc:	f7fd ff50 	bl	80009a0 <__aeabi_dcmpeq>
 8002b00:	b990      	cbnz	r0, 8002b28 <_svfprintf_r+0x47c>
 8002b02:	2230      	movs	r2, #48	; 0x30
 8002b04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002b06:	9907      	ldr	r1, [sp, #28]
 8002b08:	4299      	cmp	r1, r3
 8002b0a:	d90f      	bls.n	8002b2c <_svfprintf_r+0x480>
 8002b0c:	1c59      	adds	r1, r3, #1
 8002b0e:	911f      	str	r1, [sp, #124]	; 0x7c
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e7f7      	b.n	8002b04 <_svfprintf_r+0x458>
 8002b14:	465e      	mov	r6, fp
 8002b16:	e7bc      	b.n	8002a92 <_svfprintf_r+0x3e6>
 8002b18:	0800583d 	.word	0x0800583d
 8002b1c:	7fefffff 	.word	0x7fefffff
 8002b20:	0800582d 	.word	0x0800582d
 8002b24:	08005831 	.word	0x08005831
 8002b28:	9b07      	ldr	r3, [sp, #28]
 8002b2a:	931f      	str	r3, [sp, #124]	; 0x7c
 8002b2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002b2e:	2f47      	cmp	r7, #71	; 0x47
 8002b30:	eba3 0308 	sub.w	r3, r3, r8
 8002b34:	9307      	str	r3, [sp, #28]
 8002b36:	f040 8100 	bne.w	8002d3a <_svfprintf_r+0x68e>
 8002b3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002b3c:	1cd9      	adds	r1, r3, #3
 8002b3e:	db02      	blt.n	8002b46 <_svfprintf_r+0x49a>
 8002b40:	459b      	cmp	fp, r3
 8002b42:	f280 8126 	bge.w	8002d92 <_svfprintf_r+0x6e6>
 8002b46:	9b06      	ldr	r3, [sp, #24]
 8002b48:	3b02      	subs	r3, #2
 8002b4a:	9306      	str	r3, [sp, #24]
 8002b4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002b4e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8002b52:	1e53      	subs	r3, r2, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bfa8      	it	ge
 8002b58:	222b      	movge	r2, #43	; 0x2b
 8002b5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8002b5c:	bfbc      	itt	lt
 8002b5e:	f1c2 0301 	rsblt	r3, r2, #1
 8002b62:	222d      	movlt	r2, #45	; 0x2d
 8002b64:	2b09      	cmp	r3, #9
 8002b66:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8002b6a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8002b6e:	f340 8100 	ble.w	8002d72 <_svfprintf_r+0x6c6>
 8002b72:	260a      	movs	r6, #10
 8002b74:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8002b78:	fb93 f0f6 	sdiv	r0, r3, r6
 8002b7c:	fb06 3310 	mls	r3, r6, r0, r3
 8002b80:	2809      	cmp	r0, #9
 8002b82:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002b86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002b8a:	f102 31ff 	add.w	r1, r2, #4294967295
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f300 80e8 	bgt.w	8002d64 <_svfprintf_r+0x6b8>
 8002b94:	3330      	adds	r3, #48	; 0x30
 8002b96:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002b9a:	3a02      	subs	r2, #2
 8002b9c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8002ba0:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8002ba4:	4282      	cmp	r2, r0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f0c0 80de 	bcc.w	8002d68 <_svfprintf_r+0x6bc>
 8002bac:	9a07      	ldr	r2, [sp, #28]
 8002bae:	ab1d      	add	r3, sp, #116	; 0x74
 8002bb0:	1acb      	subs	r3, r1, r3
 8002bb2:	2a01      	cmp	r2, #1
 8002bb4:	9314      	str	r3, [sp, #80]	; 0x50
 8002bb6:	eb03 0b02 	add.w	fp, r3, r2
 8002bba:	dc02      	bgt.n	8002bc2 <_svfprintf_r+0x516>
 8002bbc:	f015 0701 	ands.w	r7, r5, #1
 8002bc0:	d002      	beq.n	8002bc8 <_svfprintf_r+0x51c>
 8002bc2:	2700      	movs	r7, #0
 8002bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bc6:	449b      	add	fp, r3
 8002bc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002bca:	b113      	cbz	r3, 8002bd2 <_svfprintf_r+0x526>
 8002bcc:	232d      	movs	r3, #45	; 0x2d
 8002bce:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002bd6:	455e      	cmp	r6, fp
 8002bd8:	4633      	mov	r3, r6
 8002bda:	bfb8      	it	lt
 8002bdc:	465b      	movlt	r3, fp
 8002bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8002be0:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8002be4:	b113      	cbz	r3, 8002bec <_svfprintf_r+0x540>
 8002be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002be8:	3301      	adds	r3, #1
 8002bea:	930f      	str	r3, [sp, #60]	; 0x3c
 8002bec:	f015 0302 	ands.w	r3, r5, #2
 8002bf0:	9316      	str	r3, [sp, #88]	; 0x58
 8002bf2:	bf1e      	ittt	ne
 8002bf4:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8002bf6:	3302      	addne	r3, #2
 8002bf8:	930f      	strne	r3, [sp, #60]	; 0x3c
 8002bfa:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002bfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8002c00:	d118      	bne.n	8002c34 <_svfprintf_r+0x588>
 8002c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8002c0c:	dd12      	ble.n	8002c34 <_svfprintf_r+0x588>
 8002c0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	4bab      	ldr	r3, [pc, #684]	; (8002ec0 <_svfprintf_r+0x814>)
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	f300 81d9 	bgt.w	8002fcc <_svfprintf_r+0x920>
 8002c1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c1e:	6063      	str	r3, [r4, #4]
 8002c20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c22:	4413      	add	r3, r2
 8002c24:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c28:	3301      	adds	r3, #1
 8002c2a:	2b07      	cmp	r3, #7
 8002c2c:	9322      	str	r3, [sp, #136]	; 0x88
 8002c2e:	f300 81e6 	bgt.w	8002ffe <_svfprintf_r+0x952>
 8002c32:	3408      	adds	r4, #8
 8002c34:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8002c38:	b173      	cbz	r3, 8002c58 <_svfprintf_r+0x5ac>
 8002c3a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8002c3e:	6023      	str	r3, [r4, #0]
 8002c40:	2301      	movs	r3, #1
 8002c42:	6063      	str	r3, [r4, #4]
 8002c44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c46:	3301      	adds	r3, #1
 8002c48:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	2b07      	cmp	r3, #7
 8002c50:	9322      	str	r3, [sp, #136]	; 0x88
 8002c52:	f300 81de 	bgt.w	8003012 <_svfprintf_r+0x966>
 8002c56:	3408      	adds	r4, #8
 8002c58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002c5a:	b16b      	cbz	r3, 8002c78 <_svfprintf_r+0x5cc>
 8002c5c:	ab1a      	add	r3, sp, #104	; 0x68
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	2302      	movs	r3, #2
 8002c62:	6063      	str	r3, [r4, #4]
 8002c64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c66:	3302      	adds	r3, #2
 8002c68:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	2b07      	cmp	r3, #7
 8002c70:	9322      	str	r3, [sp, #136]	; 0x88
 8002c72:	f300 81d8 	bgt.w	8003026 <_svfprintf_r+0x97a>
 8002c76:	3408      	adds	r4, #8
 8002c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	d118      	bne.n	8002cb0 <_svfprintf_r+0x604>
 8002c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	9310      	str	r3, [sp, #64]	; 0x40
 8002c88:	dd12      	ble.n	8002cb0 <_svfprintf_r+0x604>
 8002c8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	4b8d      	ldr	r3, [pc, #564]	; (8002ec4 <_svfprintf_r+0x818>)
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	f300 81d2 	bgt.w	800303a <_svfprintf_r+0x98e>
 8002c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c9a:	6063      	str	r3, [r4, #4]
 8002c9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c9e:	4413      	add	r3, r2
 8002ca0:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ca2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	9322      	str	r3, [sp, #136]	; 0x88
 8002caa:	f300 81df 	bgt.w	800306c <_svfprintf_r+0x9c0>
 8002cae:	3408      	adds	r4, #8
 8002cb0:	eba6 060b 	sub.w	r6, r6, fp
 8002cb4:	2e00      	cmp	r6, #0
 8002cb6:	dd0f      	ble.n	8002cd8 <_svfprintf_r+0x62c>
 8002cb8:	4b82      	ldr	r3, [pc, #520]	; (8002ec4 <_svfprintf_r+0x818>)
 8002cba:	2e10      	cmp	r6, #16
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	f300 81df 	bgt.w	8003080 <_svfprintf_r+0x9d4>
 8002cc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002cc4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	6066      	str	r6, [r4, #4]
 8002cca:	2b07      	cmp	r3, #7
 8002ccc:	4406      	add	r6, r0
 8002cce:	9623      	str	r6, [sp, #140]	; 0x8c
 8002cd0:	9322      	str	r3, [sp, #136]	; 0x88
 8002cd2:	f300 81ec 	bgt.w	80030ae <_svfprintf_r+0xa02>
 8002cd6:	3408      	adds	r4, #8
 8002cd8:	05eb      	lsls	r3, r5, #23
 8002cda:	f100 81f2 	bmi.w	80030c2 <_svfprintf_r+0xa16>
 8002cde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ce0:	e884 0900 	stmia.w	r4, {r8, fp}
 8002ce4:	445b      	add	r3, fp
 8002ce6:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ce8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002cea:	3301      	adds	r3, #1
 8002cec:	2b07      	cmp	r3, #7
 8002cee:	9322      	str	r3, [sp, #136]	; 0x88
 8002cf0:	f340 8419 	ble.w	8003526 <_svfprintf_r+0xe7a>
 8002cf4:	aa21      	add	r2, sp, #132	; 0x84
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	4650      	mov	r0, sl
 8002cfa:	f002 f833 	bl	8004d64 <__ssprint_r>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	f040 8431 	bne.w	8003566 <_svfprintf_r+0xeba>
 8002d04:	ac2e      	add	r4, sp, #184	; 0xb8
 8002d06:	076b      	lsls	r3, r5, #29
 8002d08:	f100 8410 	bmi.w	800352c <_svfprintf_r+0xe80>
 8002d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002d12:	428a      	cmp	r2, r1
 8002d14:	bfac      	ite	ge
 8002d16:	189b      	addge	r3, r3, r2
 8002d18:	185b      	addlt	r3, r3, r1
 8002d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d1e:	b13b      	cbz	r3, 8002d30 <_svfprintf_r+0x684>
 8002d20:	aa21      	add	r2, sp, #132	; 0x84
 8002d22:	4649      	mov	r1, r9
 8002d24:	4650      	mov	r0, sl
 8002d26:	f002 f81d 	bl	8004d64 <__ssprint_r>
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	f040 841b 	bne.w	8003566 <_svfprintf_r+0xeba>
 8002d30:	2300      	movs	r3, #0
 8002d32:	9f08      	ldr	r7, [sp, #32]
 8002d34:	9322      	str	r3, [sp, #136]	; 0x88
 8002d36:	ac2e      	add	r4, sp, #184	; 0xb8
 8002d38:	e4f2      	b.n	8002720 <_svfprintf_r+0x74>
 8002d3a:	9b06      	ldr	r3, [sp, #24]
 8002d3c:	2b65      	cmp	r3, #101	; 0x65
 8002d3e:	f77f af05 	ble.w	8002b4c <_svfprintf_r+0x4a0>
 8002d42:	9b06      	ldr	r3, [sp, #24]
 8002d44:	2b66      	cmp	r3, #102	; 0x66
 8002d46:	d124      	bne.n	8002d92 <_svfprintf_r+0x6e6>
 8002d48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	dd19      	ble.n	8002d82 <_svfprintf_r+0x6d6>
 8002d4e:	f1bb 0f00 	cmp.w	fp, #0
 8002d52:	d101      	bne.n	8002d58 <_svfprintf_r+0x6ac>
 8002d54:	07ea      	lsls	r2, r5, #31
 8002d56:	d502      	bpl.n	8002d5e <_svfprintf_r+0x6b2>
 8002d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d5a:	4413      	add	r3, r2
 8002d5c:	445b      	add	r3, fp
 8002d5e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8002d60:	469b      	mov	fp, r3
 8002d62:	e731      	b.n	8002bc8 <_svfprintf_r+0x51c>
 8002d64:	460a      	mov	r2, r1
 8002d66:	e707      	b.n	8002b78 <_svfprintf_r+0x4cc>
 8002d68:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002d6c:	f803 1b01 	strb.w	r1, [r3], #1
 8002d70:	e718      	b.n	8002ba4 <_svfprintf_r+0x4f8>
 8002d72:	2230      	movs	r2, #48	; 0x30
 8002d74:	4413      	add	r3, r2
 8002d76:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8002d7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8002d7e:	a91e      	add	r1, sp, #120	; 0x78
 8002d80:	e714      	b.n	8002bac <_svfprintf_r+0x500>
 8002d82:	f1bb 0f00 	cmp.w	fp, #0
 8002d86:	d101      	bne.n	8002d8c <_svfprintf_r+0x6e0>
 8002d88:	07eb      	lsls	r3, r5, #31
 8002d8a:	d515      	bpl.n	8002db8 <_svfprintf_r+0x70c>
 8002d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d8e:	3301      	adds	r3, #1
 8002d90:	e7e4      	b.n	8002d5c <_svfprintf_r+0x6b0>
 8002d92:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002d94:	9b07      	ldr	r3, [sp, #28]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	db06      	blt.n	8002da8 <_svfprintf_r+0x6fc>
 8002d9a:	07ef      	lsls	r7, r5, #31
 8002d9c:	d50e      	bpl.n	8002dbc <_svfprintf_r+0x710>
 8002d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002da0:	4413      	add	r3, r2
 8002da2:	2267      	movs	r2, #103	; 0x67
 8002da4:	9206      	str	r2, [sp, #24]
 8002da6:	e7da      	b.n	8002d5e <_svfprintf_r+0x6b2>
 8002da8:	9b07      	ldr	r3, [sp, #28]
 8002daa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002dac:	2a00      	cmp	r2, #0
 8002dae:	440b      	add	r3, r1
 8002db0:	dcf7      	bgt.n	8002da2 <_svfprintf_r+0x6f6>
 8002db2:	f1c2 0201 	rsb	r2, r2, #1
 8002db6:	e7f3      	b.n	8002da0 <_svfprintf_r+0x6f4>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e7d0      	b.n	8002d5e <_svfprintf_r+0x6b2>
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	e7f0      	b.n	8002da2 <_svfprintf_r+0x6f6>
 8002dc0:	b10b      	cbz	r3, 8002dc6 <_svfprintf_r+0x71a>
 8002dc2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002dc6:	f015 0f20 	tst.w	r5, #32
 8002dca:	f107 0304 	add.w	r3, r7, #4
 8002dce:	d008      	beq.n	8002de2 <_svfprintf_r+0x736>
 8002dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	17ce      	asrs	r6, r1, #31
 8002dd6:	4608      	mov	r0, r1
 8002dd8:	4631      	mov	r1, r6
 8002dda:	e9c2 0100 	strd	r0, r1, [r2]
 8002dde:	461f      	mov	r7, r3
 8002de0:	e49e      	b.n	8002720 <_svfprintf_r+0x74>
 8002de2:	06ee      	lsls	r6, r5, #27
 8002de4:	d503      	bpl.n	8002dee <_svfprintf_r+0x742>
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dea:	6011      	str	r1, [r2, #0]
 8002dec:	e7f7      	b.n	8002dde <_svfprintf_r+0x732>
 8002dee:	0668      	lsls	r0, r5, #25
 8002df0:	d5f9      	bpl.n	8002de6 <_svfprintf_r+0x73a>
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8002df8:	8011      	strh	r1, [r2, #0]
 8002dfa:	e7f0      	b.n	8002dde <_svfprintf_r+0x732>
 8002dfc:	f045 0510 	orr.w	r5, r5, #16
 8002e00:	f015 0320 	ands.w	r3, r5, #32
 8002e04:	d022      	beq.n	8002e4c <_svfprintf_r+0x7a0>
 8002e06:	3707      	adds	r7, #7
 8002e08:	f027 0707 	bic.w	r7, r7, #7
 8002e0c:	f107 0308 	add.w	r3, r7, #8
 8002e10:	9308      	str	r3, [sp, #32]
 8002e12:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002e16:	2300      	movs	r3, #0
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002e1e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002e22:	f000 83db 	beq.w	80035dc <_svfprintf_r+0xf30>
 8002e26:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8002e2a:	920f      	str	r2, [sp, #60]	; 0x3c
 8002e2c:	ea56 0207 	orrs.w	r2, r6, r7
 8002e30:	f040 83d9 	bne.w	80035e6 <_svfprintf_r+0xf3a>
 8002e34:	f1bb 0f00 	cmp.w	fp, #0
 8002e38:	f000 80aa 	beq.w	8002f90 <_svfprintf_r+0x8e4>
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d076      	beq.n	8002f2e <_svfprintf_r+0x882>
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f000 8091 	beq.w	8002f68 <_svfprintf_r+0x8bc>
 8002e46:	2600      	movs	r6, #0
 8002e48:	2700      	movs	r7, #0
 8002e4a:	e3d2      	b.n	80035f2 <_svfprintf_r+0xf46>
 8002e4c:	1d3a      	adds	r2, r7, #4
 8002e4e:	f015 0110 	ands.w	r1, r5, #16
 8002e52:	9208      	str	r2, [sp, #32]
 8002e54:	d002      	beq.n	8002e5c <_svfprintf_r+0x7b0>
 8002e56:	683e      	ldr	r6, [r7, #0]
 8002e58:	2700      	movs	r7, #0
 8002e5a:	e7dd      	b.n	8002e18 <_svfprintf_r+0x76c>
 8002e5c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002e60:	d0f9      	beq.n	8002e56 <_svfprintf_r+0x7aa>
 8002e62:	883e      	ldrh	r6, [r7, #0]
 8002e64:	2700      	movs	r7, #0
 8002e66:	e7d6      	b.n	8002e16 <_svfprintf_r+0x76a>
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	9308      	str	r3, [sp, #32]
 8002e6c:	2330      	movs	r3, #48	; 0x30
 8002e6e:	2278      	movs	r2, #120	; 0x78
 8002e70:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <_svfprintf_r+0x81c>)
 8002e76:	683e      	ldr	r6, [r7, #0]
 8002e78:	9315      	str	r3, [sp, #84]	; 0x54
 8002e7a:	2700      	movs	r7, #0
 8002e7c:	f045 0502 	orr.w	r5, r5, #2
 8002e80:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8002e84:	2302      	movs	r3, #2
 8002e86:	9206      	str	r2, [sp, #24]
 8002e88:	e7c6      	b.n	8002e18 <_svfprintf_r+0x76c>
 8002e8a:	2600      	movs	r6, #0
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002e92:	9308      	str	r3, [sp, #32]
 8002e94:	f8d7 8000 	ldr.w	r8, [r7]
 8002e98:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8002e9c:	d00a      	beq.n	8002eb4 <_svfprintf_r+0x808>
 8002e9e:	465a      	mov	r2, fp
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	4640      	mov	r0, r8
 8002ea4:	f001 fc56 	bl	8004754 <memchr>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	f000 808d 	beq.w	8002fc8 <_svfprintf_r+0x91c>
 8002eae:	eba0 0b08 	sub.w	fp, r0, r8
 8002eb2:	e5c4      	b.n	8002a3e <_svfprintf_r+0x392>
 8002eb4:	4640      	mov	r0, r8
 8002eb6:	f7fd f94b 	bl	8000150 <strlen>
 8002eba:	4683      	mov	fp, r0
 8002ebc:	e5bf      	b.n	8002a3e <_svfprintf_r+0x392>
 8002ebe:	bf00      	nop
 8002ec0:	08005861 	.word	0x08005861
 8002ec4:	08005871 	.word	0x08005871
 8002ec8:	0800584e 	.word	0x0800584e
 8002ecc:	f045 0510 	orr.w	r5, r5, #16
 8002ed0:	06a9      	lsls	r1, r5, #26
 8002ed2:	d509      	bpl.n	8002ee8 <_svfprintf_r+0x83c>
 8002ed4:	3707      	adds	r7, #7
 8002ed6:	f027 0707 	bic.w	r7, r7, #7
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	9308      	str	r3, [sp, #32]
 8002ee0:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e797      	b.n	8002e18 <_svfprintf_r+0x76c>
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	f015 0f10 	tst.w	r5, #16
 8002eee:	9308      	str	r3, [sp, #32]
 8002ef0:	d001      	beq.n	8002ef6 <_svfprintf_r+0x84a>
 8002ef2:	683e      	ldr	r6, [r7, #0]
 8002ef4:	e002      	b.n	8002efc <_svfprintf_r+0x850>
 8002ef6:	066a      	lsls	r2, r5, #25
 8002ef8:	d5fb      	bpl.n	8002ef2 <_svfprintf_r+0x846>
 8002efa:	883e      	ldrh	r6, [r7, #0]
 8002efc:	2700      	movs	r7, #0
 8002efe:	e7f1      	b.n	8002ee4 <_svfprintf_r+0x838>
 8002f00:	b10b      	cbz	r3, 8002f06 <_svfprintf_r+0x85a>
 8002f02:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002f06:	4ba3      	ldr	r3, [pc, #652]	; (8003194 <_svfprintf_r+0xae8>)
 8002f08:	e4c5      	b.n	8002896 <_svfprintf_r+0x1ea>
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	f015 0f10 	tst.w	r5, #16
 8002f10:	9308      	str	r3, [sp, #32]
 8002f12:	d001      	beq.n	8002f18 <_svfprintf_r+0x86c>
 8002f14:	683e      	ldr	r6, [r7, #0]
 8002f16:	e002      	b.n	8002f1e <_svfprintf_r+0x872>
 8002f18:	066e      	lsls	r6, r5, #25
 8002f1a:	d5fb      	bpl.n	8002f14 <_svfprintf_r+0x868>
 8002f1c:	883e      	ldrh	r6, [r7, #0]
 8002f1e:	2700      	movs	r7, #0
 8002f20:	e4c5      	b.n	80028ae <_svfprintf_r+0x202>
 8002f22:	4643      	mov	r3, r8
 8002f24:	e366      	b.n	80035f4 <_svfprintf_r+0xf48>
 8002f26:	2f00      	cmp	r7, #0
 8002f28:	bf08      	it	eq
 8002f2a:	2e0a      	cmpeq	r6, #10
 8002f2c:	d205      	bcs.n	8002f3a <_svfprintf_r+0x88e>
 8002f2e:	3630      	adds	r6, #48	; 0x30
 8002f30:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8002f34:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002f38:	e377      	b.n	800362a <_svfprintf_r+0xf7e>
 8002f3a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8002f3e:	4630      	mov	r0, r6
 8002f40:	4639      	mov	r1, r7
 8002f42:	220a      	movs	r2, #10
 8002f44:	2300      	movs	r3, #0
 8002f46:	f7fe f8d5 	bl	80010f4 <__aeabi_uldivmod>
 8002f4a:	3230      	adds	r2, #48	; 0x30
 8002f4c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8002f50:	2300      	movs	r3, #0
 8002f52:	4630      	mov	r0, r6
 8002f54:	4639      	mov	r1, r7
 8002f56:	220a      	movs	r2, #10
 8002f58:	f7fe f8cc 	bl	80010f4 <__aeabi_uldivmod>
 8002f5c:	4606      	mov	r6, r0
 8002f5e:	460f      	mov	r7, r1
 8002f60:	ea56 0307 	orrs.w	r3, r6, r7
 8002f64:	d1eb      	bne.n	8002f3e <_svfprintf_r+0x892>
 8002f66:	e360      	b.n	800362a <_svfprintf_r+0xf7e>
 8002f68:	2600      	movs	r6, #0
 8002f6a:	2700      	movs	r7, #0
 8002f6c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8002f70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f72:	f006 030f 	and.w	r3, r6, #15
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	093a      	lsrs	r2, r7, #4
 8002f7a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002f7e:	0933      	lsrs	r3, r6, #4
 8002f80:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002f84:	461e      	mov	r6, r3
 8002f86:	4617      	mov	r7, r2
 8002f88:	ea56 0307 	orrs.w	r3, r6, r7
 8002f8c:	d1f0      	bne.n	8002f70 <_svfprintf_r+0x8c4>
 8002f8e:	e34c      	b.n	800362a <_svfprintf_r+0xf7e>
 8002f90:	b93b      	cbnz	r3, 8002fa2 <_svfprintf_r+0x8f6>
 8002f92:	07ea      	lsls	r2, r5, #31
 8002f94:	d505      	bpl.n	8002fa2 <_svfprintf_r+0x8f6>
 8002f96:	2330      	movs	r3, #48	; 0x30
 8002f98:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8002f9c:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8002fa0:	e343      	b.n	800362a <_svfprintf_r+0xf7e>
 8002fa2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8002fa6:	e340      	b.n	800362a <_svfprintf_r+0xf7e>
 8002fa8:	b10b      	cbz	r3, 8002fae <_svfprintf_r+0x902>
 8002faa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002fae:	9b06      	ldr	r3, [sp, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 82f7 	beq.w	80035a4 <_svfprintf_r+0xef8>
 8002fb6:	2600      	movs	r6, #0
 8002fb8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002fbc:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8002fc0:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8002fc4:	9708      	str	r7, [sp, #32]
 8002fc6:	e4e3      	b.n	8002990 <_svfprintf_r+0x2e4>
 8002fc8:	4606      	mov	r6, r0
 8002fca:	e538      	b.n	8002a3e <_svfprintf_r+0x392>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	6063      	str	r3, [r4, #4]
 8002fd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002fd2:	3310      	adds	r3, #16
 8002fd4:	9323      	str	r3, [sp, #140]	; 0x8c
 8002fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002fd8:	3301      	adds	r3, #1
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	9322      	str	r3, [sp, #136]	; 0x88
 8002fde:	dc04      	bgt.n	8002fea <_svfprintf_r+0x93e>
 8002fe0:	3408      	adds	r4, #8
 8002fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002fe4:	3b10      	subs	r3, #16
 8002fe6:	9310      	str	r3, [sp, #64]	; 0x40
 8002fe8:	e611      	b.n	8002c0e <_svfprintf_r+0x562>
 8002fea:	aa21      	add	r2, sp, #132	; 0x84
 8002fec:	4649      	mov	r1, r9
 8002fee:	4650      	mov	r0, sl
 8002ff0:	f001 feb8 	bl	8004d64 <__ssprint_r>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	f040 82b6 	bne.w	8003566 <_svfprintf_r+0xeba>
 8002ffa:	ac2e      	add	r4, sp, #184	; 0xb8
 8002ffc:	e7f1      	b.n	8002fe2 <_svfprintf_r+0x936>
 8002ffe:	aa21      	add	r2, sp, #132	; 0x84
 8003000:	4649      	mov	r1, r9
 8003002:	4650      	mov	r0, sl
 8003004:	f001 feae 	bl	8004d64 <__ssprint_r>
 8003008:	2800      	cmp	r0, #0
 800300a:	f040 82ac 	bne.w	8003566 <_svfprintf_r+0xeba>
 800300e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003010:	e610      	b.n	8002c34 <_svfprintf_r+0x588>
 8003012:	aa21      	add	r2, sp, #132	; 0x84
 8003014:	4649      	mov	r1, r9
 8003016:	4650      	mov	r0, sl
 8003018:	f001 fea4 	bl	8004d64 <__ssprint_r>
 800301c:	2800      	cmp	r0, #0
 800301e:	f040 82a2 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003022:	ac2e      	add	r4, sp, #184	; 0xb8
 8003024:	e618      	b.n	8002c58 <_svfprintf_r+0x5ac>
 8003026:	aa21      	add	r2, sp, #132	; 0x84
 8003028:	4649      	mov	r1, r9
 800302a:	4650      	mov	r0, sl
 800302c:	f001 fe9a 	bl	8004d64 <__ssprint_r>
 8003030:	2800      	cmp	r0, #0
 8003032:	f040 8298 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003036:	ac2e      	add	r4, sp, #184	; 0xb8
 8003038:	e61e      	b.n	8002c78 <_svfprintf_r+0x5cc>
 800303a:	2310      	movs	r3, #16
 800303c:	6063      	str	r3, [r4, #4]
 800303e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003040:	3310      	adds	r3, #16
 8003042:	9323      	str	r3, [sp, #140]	; 0x8c
 8003044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003046:	3301      	adds	r3, #1
 8003048:	2b07      	cmp	r3, #7
 800304a:	9322      	str	r3, [sp, #136]	; 0x88
 800304c:	dc04      	bgt.n	8003058 <_svfprintf_r+0x9ac>
 800304e:	3408      	adds	r4, #8
 8003050:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003052:	3b10      	subs	r3, #16
 8003054:	9310      	str	r3, [sp, #64]	; 0x40
 8003056:	e618      	b.n	8002c8a <_svfprintf_r+0x5de>
 8003058:	aa21      	add	r2, sp, #132	; 0x84
 800305a:	4649      	mov	r1, r9
 800305c:	4650      	mov	r0, sl
 800305e:	f001 fe81 	bl	8004d64 <__ssprint_r>
 8003062:	2800      	cmp	r0, #0
 8003064:	f040 827f 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003068:	ac2e      	add	r4, sp, #184	; 0xb8
 800306a:	e7f1      	b.n	8003050 <_svfprintf_r+0x9a4>
 800306c:	aa21      	add	r2, sp, #132	; 0x84
 800306e:	4649      	mov	r1, r9
 8003070:	4650      	mov	r0, sl
 8003072:	f001 fe77 	bl	8004d64 <__ssprint_r>
 8003076:	2800      	cmp	r0, #0
 8003078:	f040 8275 	bne.w	8003566 <_svfprintf_r+0xeba>
 800307c:	ac2e      	add	r4, sp, #184	; 0xb8
 800307e:	e617      	b.n	8002cb0 <_svfprintf_r+0x604>
 8003080:	2310      	movs	r3, #16
 8003082:	6063      	str	r3, [r4, #4]
 8003084:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003086:	3310      	adds	r3, #16
 8003088:	9323      	str	r3, [sp, #140]	; 0x8c
 800308a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800308c:	3301      	adds	r3, #1
 800308e:	2b07      	cmp	r3, #7
 8003090:	9322      	str	r3, [sp, #136]	; 0x88
 8003092:	dc02      	bgt.n	800309a <_svfprintf_r+0x9ee>
 8003094:	3408      	adds	r4, #8
 8003096:	3e10      	subs	r6, #16
 8003098:	e60e      	b.n	8002cb8 <_svfprintf_r+0x60c>
 800309a:	aa21      	add	r2, sp, #132	; 0x84
 800309c:	4649      	mov	r1, r9
 800309e:	4650      	mov	r0, sl
 80030a0:	f001 fe60 	bl	8004d64 <__ssprint_r>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	f040 825e 	bne.w	8003566 <_svfprintf_r+0xeba>
 80030aa:	ac2e      	add	r4, sp, #184	; 0xb8
 80030ac:	e7f3      	b.n	8003096 <_svfprintf_r+0x9ea>
 80030ae:	aa21      	add	r2, sp, #132	; 0x84
 80030b0:	4649      	mov	r1, r9
 80030b2:	4650      	mov	r0, sl
 80030b4:	f001 fe56 	bl	8004d64 <__ssprint_r>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	f040 8254 	bne.w	8003566 <_svfprintf_r+0xeba>
 80030be:	ac2e      	add	r4, sp, #184	; 0xb8
 80030c0:	e60a      	b.n	8002cd8 <_svfprintf_r+0x62c>
 80030c2:	9b06      	ldr	r3, [sp, #24]
 80030c4:	2b65      	cmp	r3, #101	; 0x65
 80030c6:	f340 81a9 	ble.w	800341c <_svfprintf_r+0xd70>
 80030ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80030d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80030d2:	f7fd fc65 	bl	80009a0 <__aeabi_dcmpeq>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d062      	beq.n	80031a0 <_svfprintf_r+0xaf4>
 80030da:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <_svfprintf_r+0xaec>)
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	2301      	movs	r3, #1
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80030e4:	3301      	adds	r3, #1
 80030e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80030e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030ea:	3301      	adds	r3, #1
 80030ec:	2b07      	cmp	r3, #7
 80030ee:	9322      	str	r3, [sp, #136]	; 0x88
 80030f0:	dc25      	bgt.n	800313e <_svfprintf_r+0xa92>
 80030f2:	3408      	adds	r4, #8
 80030f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80030f6:	9a07      	ldr	r2, [sp, #28]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	db02      	blt.n	8003102 <_svfprintf_r+0xa56>
 80030fc:	07ee      	lsls	r6, r5, #31
 80030fe:	f57f ae02 	bpl.w	8002d06 <_svfprintf_r+0x65a>
 8003102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003106:	6023      	str	r3, [r4, #0]
 8003108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800310a:	6063      	str	r3, [r4, #4]
 800310c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800310e:	4413      	add	r3, r2
 8003110:	9323      	str	r3, [sp, #140]	; 0x8c
 8003112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003114:	3301      	adds	r3, #1
 8003116:	2b07      	cmp	r3, #7
 8003118:	9322      	str	r3, [sp, #136]	; 0x88
 800311a:	dc1a      	bgt.n	8003152 <_svfprintf_r+0xaa6>
 800311c:	3408      	adds	r4, #8
 800311e:	9b07      	ldr	r3, [sp, #28]
 8003120:	1e5e      	subs	r6, r3, #1
 8003122:	2e00      	cmp	r6, #0
 8003124:	f77f adef 	ble.w	8002d06 <_svfprintf_r+0x65a>
 8003128:	f04f 0810 	mov.w	r8, #16
 800312c:	4f1b      	ldr	r7, [pc, #108]	; (800319c <_svfprintf_r+0xaf0>)
 800312e:	2e10      	cmp	r6, #16
 8003130:	6027      	str	r7, [r4, #0]
 8003132:	dc18      	bgt.n	8003166 <_svfprintf_r+0xaba>
 8003134:	6066      	str	r6, [r4, #4]
 8003136:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003138:	441e      	add	r6, r3
 800313a:	9623      	str	r6, [sp, #140]	; 0x8c
 800313c:	e5d4      	b.n	8002ce8 <_svfprintf_r+0x63c>
 800313e:	aa21      	add	r2, sp, #132	; 0x84
 8003140:	4649      	mov	r1, r9
 8003142:	4650      	mov	r0, sl
 8003144:	f001 fe0e 	bl	8004d64 <__ssprint_r>
 8003148:	2800      	cmp	r0, #0
 800314a:	f040 820c 	bne.w	8003566 <_svfprintf_r+0xeba>
 800314e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003150:	e7d0      	b.n	80030f4 <_svfprintf_r+0xa48>
 8003152:	aa21      	add	r2, sp, #132	; 0x84
 8003154:	4649      	mov	r1, r9
 8003156:	4650      	mov	r0, sl
 8003158:	f001 fe04 	bl	8004d64 <__ssprint_r>
 800315c:	2800      	cmp	r0, #0
 800315e:	f040 8202 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003162:	ac2e      	add	r4, sp, #184	; 0xb8
 8003164:	e7db      	b.n	800311e <_svfprintf_r+0xa72>
 8003166:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003168:	f8c4 8004 	str.w	r8, [r4, #4]
 800316c:	3310      	adds	r3, #16
 800316e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003172:	3301      	adds	r3, #1
 8003174:	2b07      	cmp	r3, #7
 8003176:	9322      	str	r3, [sp, #136]	; 0x88
 8003178:	dc02      	bgt.n	8003180 <_svfprintf_r+0xad4>
 800317a:	3408      	adds	r4, #8
 800317c:	3e10      	subs	r6, #16
 800317e:	e7d6      	b.n	800312e <_svfprintf_r+0xa82>
 8003180:	aa21      	add	r2, sp, #132	; 0x84
 8003182:	4649      	mov	r1, r9
 8003184:	4650      	mov	r0, sl
 8003186:	f001 fded 	bl	8004d64 <__ssprint_r>
 800318a:	2800      	cmp	r0, #0
 800318c:	f040 81eb 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003190:	ac2e      	add	r4, sp, #184	; 0xb8
 8003192:	e7f3      	b.n	800317c <_svfprintf_r+0xad0>
 8003194:	0800584e 	.word	0x0800584e
 8003198:	0800585f 	.word	0x0800585f
 800319c:	08005871 	.word	0x08005871
 80031a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	dc7a      	bgt.n	800329c <_svfprintf_r+0xbf0>
 80031a6:	4b9b      	ldr	r3, [pc, #620]	; (8003414 <_svfprintf_r+0xd68>)
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	2301      	movs	r3, #1
 80031ac:	6063      	str	r3, [r4, #4]
 80031ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80031b0:	3301      	adds	r3, #1
 80031b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80031b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031b6:	3301      	adds	r3, #1
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	9322      	str	r3, [sp, #136]	; 0x88
 80031bc:	dc44      	bgt.n	8003248 <_svfprintf_r+0xb9c>
 80031be:	3408      	adds	r4, #8
 80031c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80031c2:	b923      	cbnz	r3, 80031ce <_svfprintf_r+0xb22>
 80031c4:	9b07      	ldr	r3, [sp, #28]
 80031c6:	b913      	cbnz	r3, 80031ce <_svfprintf_r+0xb22>
 80031c8:	07e8      	lsls	r0, r5, #31
 80031ca:	f57f ad9c 	bpl.w	8002d06 <_svfprintf_r+0x65a>
 80031ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031d6:	6063      	str	r3, [r4, #4]
 80031d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80031da:	4413      	add	r3, r2
 80031dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80031de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031e0:	3301      	adds	r3, #1
 80031e2:	2b07      	cmp	r3, #7
 80031e4:	9322      	str	r3, [sp, #136]	; 0x88
 80031e6:	dc39      	bgt.n	800325c <_svfprintf_r+0xbb0>
 80031e8:	f104 0308 	add.w	r3, r4, #8
 80031ec:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80031ee:	2e00      	cmp	r6, #0
 80031f0:	da19      	bge.n	8003226 <_svfprintf_r+0xb7a>
 80031f2:	2410      	movs	r4, #16
 80031f4:	4f88      	ldr	r7, [pc, #544]	; (8003418 <_svfprintf_r+0xd6c>)
 80031f6:	4276      	negs	r6, r6
 80031f8:	2e10      	cmp	r6, #16
 80031fa:	601f      	str	r7, [r3, #0]
 80031fc:	dc38      	bgt.n	8003270 <_svfprintf_r+0xbc4>
 80031fe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003200:	605e      	str	r6, [r3, #4]
 8003202:	4416      	add	r6, r2
 8003204:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003206:	9623      	str	r6, [sp, #140]	; 0x8c
 8003208:	3201      	adds	r2, #1
 800320a:	2a07      	cmp	r2, #7
 800320c:	f103 0308 	add.w	r3, r3, #8
 8003210:	9222      	str	r2, [sp, #136]	; 0x88
 8003212:	dd08      	ble.n	8003226 <_svfprintf_r+0xb7a>
 8003214:	aa21      	add	r2, sp, #132	; 0x84
 8003216:	4649      	mov	r1, r9
 8003218:	4650      	mov	r0, sl
 800321a:	f001 fda3 	bl	8004d64 <__ssprint_r>
 800321e:	2800      	cmp	r0, #0
 8003220:	f040 81a1 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003224:	ab2e      	add	r3, sp, #184	; 0xb8
 8003226:	9a07      	ldr	r2, [sp, #28]
 8003228:	9907      	ldr	r1, [sp, #28]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800322e:	f8c3 8000 	str.w	r8, [r3]
 8003232:	440a      	add	r2, r1
 8003234:	9223      	str	r2, [sp, #140]	; 0x8c
 8003236:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003238:	3201      	adds	r2, #1
 800323a:	2a07      	cmp	r2, #7
 800323c:	9222      	str	r2, [sp, #136]	; 0x88
 800323e:	f73f ad59 	bgt.w	8002cf4 <_svfprintf_r+0x648>
 8003242:	f103 0408 	add.w	r4, r3, #8
 8003246:	e55e      	b.n	8002d06 <_svfprintf_r+0x65a>
 8003248:	aa21      	add	r2, sp, #132	; 0x84
 800324a:	4649      	mov	r1, r9
 800324c:	4650      	mov	r0, sl
 800324e:	f001 fd89 	bl	8004d64 <__ssprint_r>
 8003252:	2800      	cmp	r0, #0
 8003254:	f040 8187 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003258:	ac2e      	add	r4, sp, #184	; 0xb8
 800325a:	e7b1      	b.n	80031c0 <_svfprintf_r+0xb14>
 800325c:	aa21      	add	r2, sp, #132	; 0x84
 800325e:	4649      	mov	r1, r9
 8003260:	4650      	mov	r0, sl
 8003262:	f001 fd7f 	bl	8004d64 <__ssprint_r>
 8003266:	2800      	cmp	r0, #0
 8003268:	f040 817d 	bne.w	8003566 <_svfprintf_r+0xeba>
 800326c:	ab2e      	add	r3, sp, #184	; 0xb8
 800326e:	e7bd      	b.n	80031ec <_svfprintf_r+0xb40>
 8003270:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003272:	605c      	str	r4, [r3, #4]
 8003274:	3210      	adds	r2, #16
 8003276:	9223      	str	r2, [sp, #140]	; 0x8c
 8003278:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800327a:	3201      	adds	r2, #1
 800327c:	2a07      	cmp	r2, #7
 800327e:	9222      	str	r2, [sp, #136]	; 0x88
 8003280:	dc02      	bgt.n	8003288 <_svfprintf_r+0xbdc>
 8003282:	3308      	adds	r3, #8
 8003284:	3e10      	subs	r6, #16
 8003286:	e7b7      	b.n	80031f8 <_svfprintf_r+0xb4c>
 8003288:	aa21      	add	r2, sp, #132	; 0x84
 800328a:	4649      	mov	r1, r9
 800328c:	4650      	mov	r0, sl
 800328e:	f001 fd69 	bl	8004d64 <__ssprint_r>
 8003292:	2800      	cmp	r0, #0
 8003294:	f040 8167 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003298:	ab2e      	add	r3, sp, #184	; 0xb8
 800329a:	e7f3      	b.n	8003284 <_svfprintf_r+0xbd8>
 800329c:	9b07      	ldr	r3, [sp, #28]
 800329e:	42bb      	cmp	r3, r7
 80032a0:	bfa8      	it	ge
 80032a2:	463b      	movge	r3, r7
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	461e      	mov	r6, r3
 80032a8:	dd0b      	ble.n	80032c2 <_svfprintf_r+0xc16>
 80032aa:	6063      	str	r3, [r4, #4]
 80032ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80032ae:	f8c4 8000 	str.w	r8, [r4]
 80032b2:	4433      	add	r3, r6
 80032b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80032b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80032b8:	3301      	adds	r3, #1
 80032ba:	2b07      	cmp	r3, #7
 80032bc:	9322      	str	r3, [sp, #136]	; 0x88
 80032be:	dc5f      	bgt.n	8003380 <_svfprintf_r+0xcd4>
 80032c0:	3408      	adds	r4, #8
 80032c2:	2e00      	cmp	r6, #0
 80032c4:	bfb4      	ite	lt
 80032c6:	463e      	movlt	r6, r7
 80032c8:	1bbe      	subge	r6, r7, r6
 80032ca:	2e00      	cmp	r6, #0
 80032cc:	dd0f      	ble.n	80032ee <_svfprintf_r+0xc42>
 80032ce:	f8df b148 	ldr.w	fp, [pc, #328]	; 8003418 <_svfprintf_r+0xd6c>
 80032d2:	2e10      	cmp	r6, #16
 80032d4:	f8c4 b000 	str.w	fp, [r4]
 80032d8:	dc5c      	bgt.n	8003394 <_svfprintf_r+0xce8>
 80032da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80032dc:	6066      	str	r6, [r4, #4]
 80032de:	441e      	add	r6, r3
 80032e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80032e2:	9623      	str	r6, [sp, #140]	; 0x8c
 80032e4:	3301      	adds	r3, #1
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	9322      	str	r3, [sp, #136]	; 0x88
 80032ea:	dc6a      	bgt.n	80033c2 <_svfprintf_r+0xd16>
 80032ec:	3408      	adds	r4, #8
 80032ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80032f0:	9a07      	ldr	r2, [sp, #28]
 80032f2:	4293      	cmp	r3, r2
 80032f4:	db01      	blt.n	80032fa <_svfprintf_r+0xc4e>
 80032f6:	07e9      	lsls	r1, r5, #31
 80032f8:	d50d      	bpl.n	8003316 <_svfprintf_r+0xc6a>
 80032fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032fe:	6023      	str	r3, [r4, #0]
 8003300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003302:	6063      	str	r3, [r4, #4]
 8003304:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003306:	4413      	add	r3, r2
 8003308:	9323      	str	r3, [sp, #140]	; 0x8c
 800330a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800330c:	3301      	adds	r3, #1
 800330e:	2b07      	cmp	r3, #7
 8003310:	9322      	str	r3, [sp, #136]	; 0x88
 8003312:	dc60      	bgt.n	80033d6 <_svfprintf_r+0xd2a>
 8003314:	3408      	adds	r4, #8
 8003316:	9b07      	ldr	r3, [sp, #28]
 8003318:	9a07      	ldr	r2, [sp, #28]
 800331a:	1bde      	subs	r6, r3, r7
 800331c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	429e      	cmp	r6, r3
 8003322:	bfa8      	it	ge
 8003324:	461e      	movge	r6, r3
 8003326:	2e00      	cmp	r6, #0
 8003328:	dd0b      	ble.n	8003342 <_svfprintf_r+0xc96>
 800332a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800332c:	4447      	add	r7, r8
 800332e:	4433      	add	r3, r6
 8003330:	9323      	str	r3, [sp, #140]	; 0x8c
 8003332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003334:	6027      	str	r7, [r4, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	2b07      	cmp	r3, #7
 800333a:	6066      	str	r6, [r4, #4]
 800333c:	9322      	str	r3, [sp, #136]	; 0x88
 800333e:	dc54      	bgt.n	80033ea <_svfprintf_r+0xd3e>
 8003340:	3408      	adds	r4, #8
 8003342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003344:	9a07      	ldr	r2, [sp, #28]
 8003346:	2e00      	cmp	r6, #0
 8003348:	eba2 0303 	sub.w	r3, r2, r3
 800334c:	bfb4      	ite	lt
 800334e:	461e      	movlt	r6, r3
 8003350:	1b9e      	subge	r6, r3, r6
 8003352:	2e00      	cmp	r6, #0
 8003354:	f77f acd7 	ble.w	8002d06 <_svfprintf_r+0x65a>
 8003358:	f04f 0810 	mov.w	r8, #16
 800335c:	4f2e      	ldr	r7, [pc, #184]	; (8003418 <_svfprintf_r+0xd6c>)
 800335e:	2e10      	cmp	r6, #16
 8003360:	6027      	str	r7, [r4, #0]
 8003362:	f77f aee7 	ble.w	8003134 <_svfprintf_r+0xa88>
 8003366:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003368:	f8c4 8004 	str.w	r8, [r4, #4]
 800336c:	3310      	adds	r3, #16
 800336e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003372:	3301      	adds	r3, #1
 8003374:	2b07      	cmp	r3, #7
 8003376:	9322      	str	r3, [sp, #136]	; 0x88
 8003378:	dc41      	bgt.n	80033fe <_svfprintf_r+0xd52>
 800337a:	3408      	adds	r4, #8
 800337c:	3e10      	subs	r6, #16
 800337e:	e7ee      	b.n	800335e <_svfprintf_r+0xcb2>
 8003380:	aa21      	add	r2, sp, #132	; 0x84
 8003382:	4649      	mov	r1, r9
 8003384:	4650      	mov	r0, sl
 8003386:	f001 fced 	bl	8004d64 <__ssprint_r>
 800338a:	2800      	cmp	r0, #0
 800338c:	f040 80eb 	bne.w	8003566 <_svfprintf_r+0xeba>
 8003390:	ac2e      	add	r4, sp, #184	; 0xb8
 8003392:	e796      	b.n	80032c2 <_svfprintf_r+0xc16>
 8003394:	2310      	movs	r3, #16
 8003396:	6063      	str	r3, [r4, #4]
 8003398:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800339a:	3310      	adds	r3, #16
 800339c:	9323      	str	r3, [sp, #140]	; 0x8c
 800339e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033a0:	3301      	adds	r3, #1
 80033a2:	2b07      	cmp	r3, #7
 80033a4:	9322      	str	r3, [sp, #136]	; 0x88
 80033a6:	dc02      	bgt.n	80033ae <_svfprintf_r+0xd02>
 80033a8:	3408      	adds	r4, #8
 80033aa:	3e10      	subs	r6, #16
 80033ac:	e791      	b.n	80032d2 <_svfprintf_r+0xc26>
 80033ae:	aa21      	add	r2, sp, #132	; 0x84
 80033b0:	4649      	mov	r1, r9
 80033b2:	4650      	mov	r0, sl
 80033b4:	f001 fcd6 	bl	8004d64 <__ssprint_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	f040 80d4 	bne.w	8003566 <_svfprintf_r+0xeba>
 80033be:	ac2e      	add	r4, sp, #184	; 0xb8
 80033c0:	e7f3      	b.n	80033aa <_svfprintf_r+0xcfe>
 80033c2:	aa21      	add	r2, sp, #132	; 0x84
 80033c4:	4649      	mov	r1, r9
 80033c6:	4650      	mov	r0, sl
 80033c8:	f001 fccc 	bl	8004d64 <__ssprint_r>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	f040 80ca 	bne.w	8003566 <_svfprintf_r+0xeba>
 80033d2:	ac2e      	add	r4, sp, #184	; 0xb8
 80033d4:	e78b      	b.n	80032ee <_svfprintf_r+0xc42>
 80033d6:	aa21      	add	r2, sp, #132	; 0x84
 80033d8:	4649      	mov	r1, r9
 80033da:	4650      	mov	r0, sl
 80033dc:	f001 fcc2 	bl	8004d64 <__ssprint_r>
 80033e0:	2800      	cmp	r0, #0
 80033e2:	f040 80c0 	bne.w	8003566 <_svfprintf_r+0xeba>
 80033e6:	ac2e      	add	r4, sp, #184	; 0xb8
 80033e8:	e795      	b.n	8003316 <_svfprintf_r+0xc6a>
 80033ea:	aa21      	add	r2, sp, #132	; 0x84
 80033ec:	4649      	mov	r1, r9
 80033ee:	4650      	mov	r0, sl
 80033f0:	f001 fcb8 	bl	8004d64 <__ssprint_r>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	f040 80b6 	bne.w	8003566 <_svfprintf_r+0xeba>
 80033fa:	ac2e      	add	r4, sp, #184	; 0xb8
 80033fc:	e7a1      	b.n	8003342 <_svfprintf_r+0xc96>
 80033fe:	aa21      	add	r2, sp, #132	; 0x84
 8003400:	4649      	mov	r1, r9
 8003402:	4650      	mov	r0, sl
 8003404:	f001 fcae 	bl	8004d64 <__ssprint_r>
 8003408:	2800      	cmp	r0, #0
 800340a:	f040 80ac 	bne.w	8003566 <_svfprintf_r+0xeba>
 800340e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003410:	e7b4      	b.n	800337c <_svfprintf_r+0xcd0>
 8003412:	bf00      	nop
 8003414:	0800585f 	.word	0x0800585f
 8003418:	08005871 	.word	0x08005871
 800341c:	9b07      	ldr	r3, [sp, #28]
 800341e:	2b01      	cmp	r3, #1
 8003420:	dc01      	bgt.n	8003426 <_svfprintf_r+0xd7a>
 8003422:	07ea      	lsls	r2, r5, #31
 8003424:	d576      	bpl.n	8003514 <_svfprintf_r+0xe68>
 8003426:	2301      	movs	r3, #1
 8003428:	6063      	str	r3, [r4, #4]
 800342a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800342c:	f8c4 8000 	str.w	r8, [r4]
 8003430:	3301      	adds	r3, #1
 8003432:	9323      	str	r3, [sp, #140]	; 0x8c
 8003434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003436:	3301      	adds	r3, #1
 8003438:	2b07      	cmp	r3, #7
 800343a:	9322      	str	r3, [sp, #136]	; 0x88
 800343c:	dc36      	bgt.n	80034ac <_svfprintf_r+0xe00>
 800343e:	3408      	adds	r4, #8
 8003440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003442:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003448:	6063      	str	r3, [r4, #4]
 800344a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800344c:	4413      	add	r3, r2
 800344e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003450:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003452:	3301      	adds	r3, #1
 8003454:	2b07      	cmp	r3, #7
 8003456:	9322      	str	r3, [sp, #136]	; 0x88
 8003458:	dc31      	bgt.n	80034be <_svfprintf_r+0xe12>
 800345a:	3408      	adds	r4, #8
 800345c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800345e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003460:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003462:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003464:	f7fd fa9c 	bl	80009a0 <__aeabi_dcmpeq>
 8003468:	9b07      	ldr	r3, [sp, #28]
 800346a:	1e5e      	subs	r6, r3, #1
 800346c:	2800      	cmp	r0, #0
 800346e:	d12f      	bne.n	80034d0 <_svfprintf_r+0xe24>
 8003470:	f108 0301 	add.w	r3, r8, #1
 8003474:	e884 0048 	stmia.w	r4, {r3, r6}
 8003478:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800347a:	9a07      	ldr	r2, [sp, #28]
 800347c:	3b01      	subs	r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	9323      	str	r3, [sp, #140]	; 0x8c
 8003482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003484:	3301      	adds	r3, #1
 8003486:	2b07      	cmp	r3, #7
 8003488:	9322      	str	r3, [sp, #136]	; 0x88
 800348a:	dd4a      	ble.n	8003522 <_svfprintf_r+0xe76>
 800348c:	aa21      	add	r2, sp, #132	; 0x84
 800348e:	4649      	mov	r1, r9
 8003490:	4650      	mov	r0, sl
 8003492:	f001 fc67 	bl	8004d64 <__ssprint_r>
 8003496:	2800      	cmp	r0, #0
 8003498:	d165      	bne.n	8003566 <_svfprintf_r+0xeba>
 800349a:	ac2e      	add	r4, sp, #184	; 0xb8
 800349c:	ab1d      	add	r3, sp, #116	; 0x74
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80034a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80034a4:	6063      	str	r3, [r4, #4]
 80034a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034a8:	4413      	add	r3, r2
 80034aa:	e41c      	b.n	8002ce6 <_svfprintf_r+0x63a>
 80034ac:	aa21      	add	r2, sp, #132	; 0x84
 80034ae:	4649      	mov	r1, r9
 80034b0:	4650      	mov	r0, sl
 80034b2:	f001 fc57 	bl	8004d64 <__ssprint_r>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d155      	bne.n	8003566 <_svfprintf_r+0xeba>
 80034ba:	ac2e      	add	r4, sp, #184	; 0xb8
 80034bc:	e7c0      	b.n	8003440 <_svfprintf_r+0xd94>
 80034be:	aa21      	add	r2, sp, #132	; 0x84
 80034c0:	4649      	mov	r1, r9
 80034c2:	4650      	mov	r0, sl
 80034c4:	f001 fc4e 	bl	8004d64 <__ssprint_r>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d14c      	bne.n	8003566 <_svfprintf_r+0xeba>
 80034cc:	ac2e      	add	r4, sp, #184	; 0xb8
 80034ce:	e7c5      	b.n	800345c <_svfprintf_r+0xdb0>
 80034d0:	2e00      	cmp	r6, #0
 80034d2:	dde3      	ble.n	800349c <_svfprintf_r+0xdf0>
 80034d4:	f04f 0810 	mov.w	r8, #16
 80034d8:	4f58      	ldr	r7, [pc, #352]	; (800363c <_svfprintf_r+0xf90>)
 80034da:	2e10      	cmp	r6, #16
 80034dc:	6027      	str	r7, [r4, #0]
 80034de:	dc04      	bgt.n	80034ea <_svfprintf_r+0xe3e>
 80034e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034e2:	6066      	str	r6, [r4, #4]
 80034e4:	441e      	add	r6, r3
 80034e6:	9623      	str	r6, [sp, #140]	; 0x8c
 80034e8:	e7cb      	b.n	8003482 <_svfprintf_r+0xdd6>
 80034ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034ec:	f8c4 8004 	str.w	r8, [r4, #4]
 80034f0:	3310      	adds	r3, #16
 80034f2:	9323      	str	r3, [sp, #140]	; 0x8c
 80034f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034f6:	3301      	adds	r3, #1
 80034f8:	2b07      	cmp	r3, #7
 80034fa:	9322      	str	r3, [sp, #136]	; 0x88
 80034fc:	dc02      	bgt.n	8003504 <_svfprintf_r+0xe58>
 80034fe:	3408      	adds	r4, #8
 8003500:	3e10      	subs	r6, #16
 8003502:	e7ea      	b.n	80034da <_svfprintf_r+0xe2e>
 8003504:	aa21      	add	r2, sp, #132	; 0x84
 8003506:	4649      	mov	r1, r9
 8003508:	4650      	mov	r0, sl
 800350a:	f001 fc2b 	bl	8004d64 <__ssprint_r>
 800350e:	bb50      	cbnz	r0, 8003566 <_svfprintf_r+0xeba>
 8003510:	ac2e      	add	r4, sp, #184	; 0xb8
 8003512:	e7f5      	b.n	8003500 <_svfprintf_r+0xe54>
 8003514:	2301      	movs	r3, #1
 8003516:	6063      	str	r3, [r4, #4]
 8003518:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800351a:	f8c4 8000 	str.w	r8, [r4]
 800351e:	3301      	adds	r3, #1
 8003520:	e7ae      	b.n	8003480 <_svfprintf_r+0xdd4>
 8003522:	3408      	adds	r4, #8
 8003524:	e7ba      	b.n	800349c <_svfprintf_r+0xdf0>
 8003526:	3408      	adds	r4, #8
 8003528:	f7ff bbed 	b.w	8002d06 <_svfprintf_r+0x65a>
 800352c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800352e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003530:	1a9d      	subs	r5, r3, r2
 8003532:	2d00      	cmp	r5, #0
 8003534:	f77f abea 	ble.w	8002d0c <_svfprintf_r+0x660>
 8003538:	2610      	movs	r6, #16
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <_svfprintf_r+0xf94>)
 800353c:	2d10      	cmp	r5, #16
 800353e:	6023      	str	r3, [r4, #0]
 8003540:	dc1b      	bgt.n	800357a <_svfprintf_r+0xece>
 8003542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003544:	6065      	str	r5, [r4, #4]
 8003546:	441d      	add	r5, r3
 8003548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800354a:	9523      	str	r5, [sp, #140]	; 0x8c
 800354c:	3301      	adds	r3, #1
 800354e:	2b07      	cmp	r3, #7
 8003550:	9322      	str	r3, [sp, #136]	; 0x88
 8003552:	f77f abdb 	ble.w	8002d0c <_svfprintf_r+0x660>
 8003556:	aa21      	add	r2, sp, #132	; 0x84
 8003558:	4649      	mov	r1, r9
 800355a:	4650      	mov	r0, sl
 800355c:	f001 fc02 	bl	8004d64 <__ssprint_r>
 8003560:	2800      	cmp	r0, #0
 8003562:	f43f abd3 	beq.w	8002d0c <_svfprintf_r+0x660>
 8003566:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800356a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800356e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003570:	bf18      	it	ne
 8003572:	f04f 33ff 	movne.w	r3, #4294967295
 8003576:	f7ff b8bd 	b.w	80026f4 <_svfprintf_r+0x48>
 800357a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800357c:	6066      	str	r6, [r4, #4]
 800357e:	3310      	adds	r3, #16
 8003580:	9323      	str	r3, [sp, #140]	; 0x8c
 8003582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003584:	3301      	adds	r3, #1
 8003586:	2b07      	cmp	r3, #7
 8003588:	9322      	str	r3, [sp, #136]	; 0x88
 800358a:	dc02      	bgt.n	8003592 <_svfprintf_r+0xee6>
 800358c:	3408      	adds	r4, #8
 800358e:	3d10      	subs	r5, #16
 8003590:	e7d3      	b.n	800353a <_svfprintf_r+0xe8e>
 8003592:	aa21      	add	r2, sp, #132	; 0x84
 8003594:	4649      	mov	r1, r9
 8003596:	4650      	mov	r0, sl
 8003598:	f001 fbe4 	bl	8004d64 <__ssprint_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	d1e2      	bne.n	8003566 <_svfprintf_r+0xeba>
 80035a0:	ac2e      	add	r4, sp, #184	; 0xb8
 80035a2:	e7f4      	b.n	800358e <_svfprintf_r+0xee2>
 80035a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0dd      	beq.n	8003566 <_svfprintf_r+0xeba>
 80035aa:	aa21      	add	r2, sp, #132	; 0x84
 80035ac:	4649      	mov	r1, r9
 80035ae:	4650      	mov	r0, sl
 80035b0:	f001 fbd8 	bl	8004d64 <__ssprint_r>
 80035b4:	e7d7      	b.n	8003566 <_svfprintf_r+0xeba>
 80035b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80035b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80035bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035be:	f7fd fa21 	bl	8000a04 <__aeabi_dcmpun>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f43f aa3d 	beq.w	8002a42 <_svfprintf_r+0x396>
 80035c8:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <_svfprintf_r+0xf98>)
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <_svfprintf_r+0xf9c>)
 80035cc:	f7ff ba2d 	b.w	8002a2a <_svfprintf_r+0x37e>
 80035d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80035d2:	eba3 0308 	sub.w	r3, r3, r8
 80035d6:	9307      	str	r3, [sp, #28]
 80035d8:	f7ff baaf 	b.w	8002b3a <_svfprintf_r+0x48e>
 80035dc:	ea56 0207 	orrs.w	r2, r6, r7
 80035e0:	950f      	str	r5, [sp, #60]	; 0x3c
 80035e2:	f43f ac2b 	beq.w	8002e3c <_svfprintf_r+0x790>
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f43f ac9d 	beq.w	8002f26 <_svfprintf_r+0x87a>
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f43f acbd 	beq.w	8002f6c <_svfprintf_r+0x8c0>
 80035f2:	ab2e      	add	r3, sp, #184	; 0xb8
 80035f4:	08f1      	lsrs	r1, r6, #3
 80035f6:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80035fa:	08f8      	lsrs	r0, r7, #3
 80035fc:	f006 0207 	and.w	r2, r6, #7
 8003600:	4607      	mov	r7, r0
 8003602:	460e      	mov	r6, r1
 8003604:	3230      	adds	r2, #48	; 0x30
 8003606:	ea56 0107 	orrs.w	r1, r6, r7
 800360a:	f103 38ff 	add.w	r8, r3, #4294967295
 800360e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003612:	f47f ac86 	bne.w	8002f22 <_svfprintf_r+0x876>
 8003616:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003618:	07c9      	lsls	r1, r1, #31
 800361a:	d506      	bpl.n	800362a <_svfprintf_r+0xf7e>
 800361c:	2a30      	cmp	r2, #48	; 0x30
 800361e:	d004      	beq.n	800362a <_svfprintf_r+0xf7e>
 8003620:	2230      	movs	r2, #48	; 0x30
 8003622:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003626:	f1a3 0802 	sub.w	r8, r3, #2
 800362a:	ab2e      	add	r3, sp, #184	; 0xb8
 800362c:	465e      	mov	r6, fp
 800362e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003630:	eba3 0b08 	sub.w	fp, r3, r8
 8003634:	2700      	movs	r7, #0
 8003636:	f7ff bace 	b.w	8002bd6 <_svfprintf_r+0x52a>
 800363a:	bf00      	nop
 800363c:	08005871 	.word	0x08005871
 8003640:	08005861 	.word	0x08005861
 8003644:	08005835 	.word	0x08005835
 8003648:	08005839 	.word	0x08005839

0800364c <quorem>:
 800364c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003650:	6903      	ldr	r3, [r0, #16]
 8003652:	690c      	ldr	r4, [r1, #16]
 8003654:	4680      	mov	r8, r0
 8003656:	429c      	cmp	r4, r3
 8003658:	f300 8082 	bgt.w	8003760 <quorem+0x114>
 800365c:	3c01      	subs	r4, #1
 800365e:	f101 0714 	add.w	r7, r1, #20
 8003662:	f100 0614 	add.w	r6, r0, #20
 8003666:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800366a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800366e:	3501      	adds	r5, #1
 8003670:	fbb0 f5f5 	udiv	r5, r0, r5
 8003674:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003678:	eb06 030e 	add.w	r3, r6, lr
 800367c:	eb07 090e 	add.w	r9, r7, lr
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	b38d      	cbz	r5, 80036e8 <quorem+0x9c>
 8003684:	f04f 0a00 	mov.w	sl, #0
 8003688:	4638      	mov	r0, r7
 800368a:	46b4      	mov	ip, r6
 800368c:	46d3      	mov	fp, sl
 800368e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003692:	b293      	uxth	r3, r2
 8003694:	fb05 a303 	mla	r3, r5, r3, sl
 8003698:	0c12      	lsrs	r2, r2, #16
 800369a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800369e:	fb05 a202 	mla	r2, r5, r2, sl
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	ebab 0303 	sub.w	r3, fp, r3
 80036a8:	f8bc b000 	ldrh.w	fp, [ip]
 80036ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80036b0:	445b      	add	r3, fp
 80036b2:	fa1f fb82 	uxth.w	fp, r2
 80036b6:	f8dc 2000 	ldr.w	r2, [ip]
 80036ba:	4581      	cmp	r9, r0
 80036bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80036c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036ca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80036ce:	f84c 3b04 	str.w	r3, [ip], #4
 80036d2:	d2dc      	bcs.n	800368e <quorem+0x42>
 80036d4:	f856 300e 	ldr.w	r3, [r6, lr]
 80036d8:	b933      	cbnz	r3, 80036e8 <quorem+0x9c>
 80036da:	9b01      	ldr	r3, [sp, #4]
 80036dc:	3b04      	subs	r3, #4
 80036de:	429e      	cmp	r6, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	d331      	bcc.n	8003748 <quorem+0xfc>
 80036e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80036e8:	4640      	mov	r0, r8
 80036ea:	f001 fa62 	bl	8004bb2 <__mcmp>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	db26      	blt.n	8003740 <quorem+0xf4>
 80036f2:	4630      	mov	r0, r6
 80036f4:	f04f 0e00 	mov.w	lr, #0
 80036f8:	3501      	adds	r5, #1
 80036fa:	f857 1b04 	ldr.w	r1, [r7], #4
 80036fe:	f8d0 c000 	ldr.w	ip, [r0]
 8003702:	b28b      	uxth	r3, r1
 8003704:	ebae 0303 	sub.w	r3, lr, r3
 8003708:	fa1f f28c 	uxth.w	r2, ip
 800370c:	4413      	add	r3, r2
 800370e:	0c0a      	lsrs	r2, r1, #16
 8003710:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003718:	b29b      	uxth	r3, r3
 800371a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800371e:	45b9      	cmp	r9, r7
 8003720:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003724:	f840 3b04 	str.w	r3, [r0], #4
 8003728:	d2e7      	bcs.n	80036fa <quorem+0xae>
 800372a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800372e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003732:	b92a      	cbnz	r2, 8003740 <quorem+0xf4>
 8003734:	3b04      	subs	r3, #4
 8003736:	429e      	cmp	r6, r3
 8003738:	461a      	mov	r2, r3
 800373a:	d30b      	bcc.n	8003754 <quorem+0x108>
 800373c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003740:	4628      	mov	r0, r5
 8003742:	b003      	add	sp, #12
 8003744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	3b04      	subs	r3, #4
 800374c:	2a00      	cmp	r2, #0
 800374e:	d1c9      	bne.n	80036e4 <quorem+0x98>
 8003750:	3c01      	subs	r4, #1
 8003752:	e7c4      	b.n	80036de <quorem+0x92>
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	3b04      	subs	r3, #4
 8003758:	2a00      	cmp	r2, #0
 800375a:	d1ef      	bne.n	800373c <quorem+0xf0>
 800375c:	3c01      	subs	r4, #1
 800375e:	e7ea      	b.n	8003736 <quorem+0xea>
 8003760:	2000      	movs	r0, #0
 8003762:	e7ee      	b.n	8003742 <quorem+0xf6>
 8003764:	0000      	movs	r0, r0
	...

08003768 <_dtoa_r>:
 8003768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800376c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800376e:	b095      	sub	sp, #84	; 0x54
 8003770:	4604      	mov	r4, r0
 8003772:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003774:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003778:	b93e      	cbnz	r6, 800378a <_dtoa_r+0x22>
 800377a:	2010      	movs	r0, #16
 800377c:	f000 fdd6 	bl	800432c <malloc>
 8003780:	6260      	str	r0, [r4, #36]	; 0x24
 8003782:	6046      	str	r6, [r0, #4]
 8003784:	6086      	str	r6, [r0, #8]
 8003786:	6006      	str	r6, [r0, #0]
 8003788:	60c6      	str	r6, [r0, #12]
 800378a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	b151      	cbz	r1, 80037a6 <_dtoa_r+0x3e>
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	2301      	movs	r3, #1
 8003794:	4093      	lsls	r3, r2
 8003796:	604a      	str	r2, [r1, #4]
 8003798:	608b      	str	r3, [r1, #8]
 800379a:	4620      	mov	r0, r4
 800379c:	f001 f834 	bl	8004808 <_Bfree>
 80037a0:	2200      	movs	r2, #0
 80037a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	9b03      	ldr	r3, [sp, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bfb7      	itett	lt
 80037ac:	2301      	movlt	r3, #1
 80037ae:	2300      	movge	r3, #0
 80037b0:	602b      	strlt	r3, [r5, #0]
 80037b2:	9b03      	ldrlt	r3, [sp, #12]
 80037b4:	bfae      	itee	ge
 80037b6:	602b      	strge	r3, [r5, #0]
 80037b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80037bc:	9303      	strlt	r3, [sp, #12]
 80037be:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80037c2:	4bab      	ldr	r3, [pc, #684]	; (8003a70 <_dtoa_r+0x308>)
 80037c4:	ea33 0309 	bics.w	r3, r3, r9
 80037c8:	d11b      	bne.n	8003802 <_dtoa_r+0x9a>
 80037ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80037ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	9b02      	ldr	r3, [sp, #8]
 80037d4:	b923      	cbnz	r3, 80037e0 <_dtoa_r+0x78>
 80037d6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80037da:	2800      	cmp	r0, #0
 80037dc:	f000 8583 	beq.w	80042e6 <_dtoa_r+0xb7e>
 80037e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037e2:	b953      	cbnz	r3, 80037fa <_dtoa_r+0x92>
 80037e4:	4ba3      	ldr	r3, [pc, #652]	; (8003a74 <_dtoa_r+0x30c>)
 80037e6:	e021      	b.n	800382c <_dtoa_r+0xc4>
 80037e8:	4ba3      	ldr	r3, [pc, #652]	; (8003a78 <_dtoa_r+0x310>)
 80037ea:	9306      	str	r3, [sp, #24]
 80037ec:	3308      	adds	r3, #8
 80037ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	9806      	ldr	r0, [sp, #24]
 80037f4:	b015      	add	sp, #84	; 0x54
 80037f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fa:	4b9e      	ldr	r3, [pc, #632]	; (8003a74 <_dtoa_r+0x30c>)
 80037fc:	9306      	str	r3, [sp, #24]
 80037fe:	3303      	adds	r3, #3
 8003800:	e7f5      	b.n	80037ee <_dtoa_r+0x86>
 8003802:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	2300      	movs	r3, #0
 800380a:	4630      	mov	r0, r6
 800380c:	4639      	mov	r1, r7
 800380e:	f7fd f8c7 	bl	80009a0 <__aeabi_dcmpeq>
 8003812:	4680      	mov	r8, r0
 8003814:	b160      	cbz	r0, 8003830 <_dtoa_r+0xc8>
 8003816:	2301      	movs	r3, #1
 8003818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 855e 	beq.w	80042e0 <_dtoa_r+0xb78>
 8003824:	4b95      	ldr	r3, [pc, #596]	; (8003a7c <_dtoa_r+0x314>)
 8003826:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	3b01      	subs	r3, #1
 800382c:	9306      	str	r3, [sp, #24]
 800382e:	e7e0      	b.n	80037f2 <_dtoa_r+0x8a>
 8003830:	ab12      	add	r3, sp, #72	; 0x48
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	ab13      	add	r3, sp, #76	; 0x4c
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	4632      	mov	r2, r6
 800383a:	463b      	mov	r3, r7
 800383c:	4620      	mov	r0, r4
 800383e:	f001 fa31 	bl	8004ca4 <__d2b>
 8003842:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003846:	4682      	mov	sl, r0
 8003848:	2d00      	cmp	r5, #0
 800384a:	d07d      	beq.n	8003948 <_dtoa_r+0x1e0>
 800384c:	4630      	mov	r0, r6
 800384e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003852:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003856:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800385a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800385e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003862:	2200      	movs	r2, #0
 8003864:	4b86      	ldr	r3, [pc, #536]	; (8003a80 <_dtoa_r+0x318>)
 8003866:	f7fc fc7f 	bl	8000168 <__aeabi_dsub>
 800386a:	a37b      	add	r3, pc, #492	; (adr r3, 8003a58 <_dtoa_r+0x2f0>)
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f7fc fe2e 	bl	80004d0 <__aeabi_dmul>
 8003874:	a37a      	add	r3, pc, #488	; (adr r3, 8003a60 <_dtoa_r+0x2f8>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fc fc77 	bl	800016c <__adddf3>
 800387e:	4606      	mov	r6, r0
 8003880:	4628      	mov	r0, r5
 8003882:	460f      	mov	r7, r1
 8003884:	f7fc fdbe 	bl	8000404 <__aeabi_i2d>
 8003888:	a377      	add	r3, pc, #476	; (adr r3, 8003a68 <_dtoa_r+0x300>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f7fc fe1f 	bl	80004d0 <__aeabi_dmul>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4630      	mov	r0, r6
 8003898:	4639      	mov	r1, r7
 800389a:	f7fc fc67 	bl	800016c <__adddf3>
 800389e:	4606      	mov	r6, r0
 80038a0:	460f      	mov	r7, r1
 80038a2:	f7fd f8c5 	bl	8000a30 <__aeabi_d2iz>
 80038a6:	2200      	movs	r2, #0
 80038a8:	4683      	mov	fp, r0
 80038aa:	2300      	movs	r3, #0
 80038ac:	4630      	mov	r0, r6
 80038ae:	4639      	mov	r1, r7
 80038b0:	f7fd f880 	bl	80009b4 <__aeabi_dcmplt>
 80038b4:	b158      	cbz	r0, 80038ce <_dtoa_r+0x166>
 80038b6:	4658      	mov	r0, fp
 80038b8:	f7fc fda4 	bl	8000404 <__aeabi_i2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4630      	mov	r0, r6
 80038c2:	4639      	mov	r1, r7
 80038c4:	f7fd f86c 	bl	80009a0 <__aeabi_dcmpeq>
 80038c8:	b908      	cbnz	r0, 80038ce <_dtoa_r+0x166>
 80038ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038ce:	f1bb 0f16 	cmp.w	fp, #22
 80038d2:	d858      	bhi.n	8003986 <_dtoa_r+0x21e>
 80038d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038d8:	496a      	ldr	r1, [pc, #424]	; (8003a84 <_dtoa_r+0x31c>)
 80038da:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80038de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038e2:	f7fd f885 	bl	80009f0 <__aeabi_dcmpgt>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d04f      	beq.n	800398a <_dtoa_r+0x222>
 80038ea:	2300      	movs	r3, #0
 80038ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038f0:	930d      	str	r3, [sp, #52]	; 0x34
 80038f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038f4:	1b5d      	subs	r5, r3, r5
 80038f6:	1e6b      	subs	r3, r5, #1
 80038f8:	9307      	str	r3, [sp, #28]
 80038fa:	bf43      	ittte	mi
 80038fc:	2300      	movmi	r3, #0
 80038fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8003902:	9307      	strmi	r3, [sp, #28]
 8003904:	f04f 0800 	movpl.w	r8, #0
 8003908:	f1bb 0f00 	cmp.w	fp, #0
 800390c:	db3f      	blt.n	800398e <_dtoa_r+0x226>
 800390e:	9b07      	ldr	r3, [sp, #28]
 8003910:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003914:	445b      	add	r3, fp
 8003916:	9307      	str	r3, [sp, #28]
 8003918:	2300      	movs	r3, #0
 800391a:	9308      	str	r3, [sp, #32]
 800391c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800391e:	2b09      	cmp	r3, #9
 8003920:	f200 80b4 	bhi.w	8003a8c <_dtoa_r+0x324>
 8003924:	2b05      	cmp	r3, #5
 8003926:	bfc4      	itt	gt
 8003928:	3b04      	subgt	r3, #4
 800392a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800392c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800392e:	bfc8      	it	gt
 8003930:	2600      	movgt	r6, #0
 8003932:	f1a3 0302 	sub.w	r3, r3, #2
 8003936:	bfd8      	it	le
 8003938:	2601      	movle	r6, #1
 800393a:	2b03      	cmp	r3, #3
 800393c:	f200 80b2 	bhi.w	8003aa4 <_dtoa_r+0x33c>
 8003940:	e8df f003 	tbb	[pc, r3]
 8003944:	782d8684 	.word	0x782d8684
 8003948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800394a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800394c:	441d      	add	r5, r3
 800394e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003952:	2b20      	cmp	r3, #32
 8003954:	dd11      	ble.n	800397a <_dtoa_r+0x212>
 8003956:	9a02      	ldr	r2, [sp, #8]
 8003958:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800395c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003960:	fa22 f000 	lsr.w	r0, r2, r0
 8003964:	fa09 f303 	lsl.w	r3, r9, r3
 8003968:	4318      	orrs	r0, r3
 800396a:	f7fc fd3b 	bl	80003e4 <__aeabi_ui2d>
 800396e:	2301      	movs	r3, #1
 8003970:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003974:	3d01      	subs	r5, #1
 8003976:	9310      	str	r3, [sp, #64]	; 0x40
 8003978:	e773      	b.n	8003862 <_dtoa_r+0xfa>
 800397a:	f1c3 0020 	rsb	r0, r3, #32
 800397e:	9b02      	ldr	r3, [sp, #8]
 8003980:	fa03 f000 	lsl.w	r0, r3, r0
 8003984:	e7f1      	b.n	800396a <_dtoa_r+0x202>
 8003986:	2301      	movs	r3, #1
 8003988:	e7b2      	b.n	80038f0 <_dtoa_r+0x188>
 800398a:	900d      	str	r0, [sp, #52]	; 0x34
 800398c:	e7b1      	b.n	80038f2 <_dtoa_r+0x18a>
 800398e:	f1cb 0300 	rsb	r3, fp, #0
 8003992:	9308      	str	r3, [sp, #32]
 8003994:	2300      	movs	r3, #0
 8003996:	eba8 080b 	sub.w	r8, r8, fp
 800399a:	930c      	str	r3, [sp, #48]	; 0x30
 800399c:	e7be      	b.n	800391c <_dtoa_r+0x1b4>
 800399e:	2301      	movs	r3, #1
 80039a0:	9309      	str	r3, [sp, #36]	; 0x24
 80039a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f340 8080 	ble.w	8003aaa <_dtoa_r+0x342>
 80039aa:	4699      	mov	r9, r3
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2104      	movs	r1, #4
 80039b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80039b4:	606a      	str	r2, [r5, #4]
 80039b6:	f101 0214 	add.w	r2, r1, #20
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d97a      	bls.n	8003ab4 <_dtoa_r+0x34c>
 80039be:	6869      	ldr	r1, [r5, #4]
 80039c0:	4620      	mov	r0, r4
 80039c2:	f000 feed 	bl	80047a0 <_Balloc>
 80039c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039c8:	6028      	str	r0, [r5, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b9 0f0e 	cmp.w	r9, #14
 80039d0:	9306      	str	r3, [sp, #24]
 80039d2:	f200 80f0 	bhi.w	8003bb6 <_dtoa_r+0x44e>
 80039d6:	2e00      	cmp	r6, #0
 80039d8:	f000 80ed 	beq.w	8003bb6 <_dtoa_r+0x44e>
 80039dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039e0:	f1bb 0f00 	cmp.w	fp, #0
 80039e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80039e8:	dd79      	ble.n	8003ade <_dtoa_r+0x376>
 80039ea:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <_dtoa_r+0x31c>)
 80039ec:	f00b 030f 	and.w	r3, fp, #15
 80039f0:	ea4f 162b 	mov.w	r6, fp, asr #4
 80039f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80039f8:	06f0      	lsls	r0, r6, #27
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a02:	d55c      	bpl.n	8003abe <_dtoa_r+0x356>
 8003a04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a08:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <_dtoa_r+0x320>)
 8003a0a:	2503      	movs	r5, #3
 8003a0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a10:	f7fc fe88 	bl	8000724 <__aeabi_ddiv>
 8003a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a18:	f006 060f 	and.w	r6, r6, #15
 8003a1c:	4f1a      	ldr	r7, [pc, #104]	; (8003a88 <_dtoa_r+0x320>)
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	d14f      	bne.n	8003ac2 <_dtoa_r+0x35a>
 8003a22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a2a:	f7fc fe7b 	bl	8000724 <__aeabi_ddiv>
 8003a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a32:	e06e      	b.n	8003b12 <_dtoa_r+0x3aa>
 8003a34:	2301      	movs	r3, #1
 8003a36:	9309      	str	r3, [sp, #36]	; 0x24
 8003a38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a3a:	445b      	add	r3, fp
 8003a3c:	f103 0901 	add.w	r9, r3, #1
 8003a40:	9304      	str	r3, [sp, #16]
 8003a42:	464b      	mov	r3, r9
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	bfb8      	it	lt
 8003a48:	2301      	movlt	r3, #1
 8003a4a:	e7b0      	b.n	80039ae <_dtoa_r+0x246>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e7a7      	b.n	80039a0 <_dtoa_r+0x238>
 8003a50:	2300      	movs	r3, #0
 8003a52:	e7f0      	b.n	8003a36 <_dtoa_r+0x2ce>
 8003a54:	f3af 8000 	nop.w
 8003a58:	636f4361 	.word	0x636f4361
 8003a5c:	3fd287a7 	.word	0x3fd287a7
 8003a60:	8b60c8b3 	.word	0x8b60c8b3
 8003a64:	3fc68a28 	.word	0x3fc68a28
 8003a68:	509f79fb 	.word	0x509f79fb
 8003a6c:	3fd34413 	.word	0x3fd34413
 8003a70:	7ff00000 	.word	0x7ff00000
 8003a74:	0800588a 	.word	0x0800588a
 8003a78:	08005881 	.word	0x08005881
 8003a7c:	08005860 	.word	0x08005860
 8003a80:	3ff80000 	.word	0x3ff80000
 8003a84:	080058b8 	.word	0x080058b8
 8003a88:	08005890 	.word	0x08005890
 8003a8c:	2601      	movs	r6, #1
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9609      	str	r6, [sp, #36]	; 0x24
 8003a92:	931e      	str	r3, [sp, #120]	; 0x78
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
 8003a98:	2200      	movs	r2, #0
 8003a9a:	9304      	str	r3, [sp, #16]
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	2312      	movs	r3, #18
 8003aa0:	921f      	str	r2, [sp, #124]	; 0x7c
 8003aa2:	e784      	b.n	80039ae <_dtoa_r+0x246>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	e7f4      	b.n	8003a94 <_dtoa_r+0x32c>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	9304      	str	r3, [sp, #16]
 8003aae:	4699      	mov	r9, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	e7f5      	b.n	8003aa0 <_dtoa_r+0x338>
 8003ab4:	686a      	ldr	r2, [r5, #4]
 8003ab6:	0049      	lsls	r1, r1, #1
 8003ab8:	3201      	adds	r2, #1
 8003aba:	606a      	str	r2, [r5, #4]
 8003abc:	e77b      	b.n	80039b6 <_dtoa_r+0x24e>
 8003abe:	2502      	movs	r5, #2
 8003ac0:	e7ac      	b.n	8003a1c <_dtoa_r+0x2b4>
 8003ac2:	07f1      	lsls	r1, r6, #31
 8003ac4:	d508      	bpl.n	8003ad8 <_dtoa_r+0x370>
 8003ac6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ace:	f7fc fcff 	bl	80004d0 <__aeabi_dmul>
 8003ad2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ad6:	3501      	adds	r5, #1
 8003ad8:	1076      	asrs	r6, r6, #1
 8003ada:	3708      	adds	r7, #8
 8003adc:	e79f      	b.n	8003a1e <_dtoa_r+0x2b6>
 8003ade:	f000 80a5 	beq.w	8003c2c <_dtoa_r+0x4c4>
 8003ae2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ae6:	f1cb 0600 	rsb	r6, fp, #0
 8003aea:	4ba2      	ldr	r3, [pc, #648]	; (8003d74 <_dtoa_r+0x60c>)
 8003aec:	f006 020f 	and.w	r2, r6, #15
 8003af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f7fc fcea 	bl	80004d0 <__aeabi_dmul>
 8003afc:	2502      	movs	r5, #2
 8003afe:	2300      	movs	r3, #0
 8003b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b04:	4f9c      	ldr	r7, [pc, #624]	; (8003d78 <_dtoa_r+0x610>)
 8003b06:	1136      	asrs	r6, r6, #4
 8003b08:	2e00      	cmp	r6, #0
 8003b0a:	f040 8084 	bne.w	8003c16 <_dtoa_r+0x4ae>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d18d      	bne.n	8003a2e <_dtoa_r+0x2c6>
 8003b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 808b 	beq.w	8003c30 <_dtoa_r+0x4c8>
 8003b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003b22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b26:	2200      	movs	r2, #0
 8003b28:	4b94      	ldr	r3, [pc, #592]	; (8003d7c <_dtoa_r+0x614>)
 8003b2a:	f7fc ff43 	bl	80009b4 <__aeabi_dcmplt>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d07e      	beq.n	8003c30 <_dtoa_r+0x4c8>
 8003b32:	f1b9 0f00 	cmp.w	r9, #0
 8003b36:	d07b      	beq.n	8003c30 <_dtoa_r+0x4c8>
 8003b38:	9b04      	ldr	r3, [sp, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	dd37      	ble.n	8003bae <_dtoa_r+0x446>
 8003b3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b42:	2200      	movs	r2, #0
 8003b44:	4b8e      	ldr	r3, [pc, #568]	; (8003d80 <_dtoa_r+0x618>)
 8003b46:	f7fc fcc3 	bl	80004d0 <__aeabi_dmul>
 8003b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b4e:	9e04      	ldr	r6, [sp, #16]
 8003b50:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003b54:	3501      	adds	r5, #1
 8003b56:	4628      	mov	r0, r5
 8003b58:	f7fc fc54 	bl	8000404 <__aeabi_i2d>
 8003b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b60:	f7fc fcb6 	bl	80004d0 <__aeabi_dmul>
 8003b64:	4b87      	ldr	r3, [pc, #540]	; (8003d84 <_dtoa_r+0x61c>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	f7fc fb00 	bl	800016c <__adddf3>
 8003b6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b72:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003b76:	950b      	str	r5, [sp, #44]	; 0x2c
 8003b78:	2e00      	cmp	r6, #0
 8003b7a:	d15c      	bne.n	8003c36 <_dtoa_r+0x4ce>
 8003b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	4b81      	ldr	r3, [pc, #516]	; (8003d88 <_dtoa_r+0x620>)
 8003b84:	f7fc faf0 	bl	8000168 <__aeabi_dsub>
 8003b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b90:	f7fc ff2e 	bl	80009f0 <__aeabi_dcmpgt>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	f040 82f7 	bne.w	8004188 <_dtoa_r+0xa20>
 8003b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ba0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003ba4:	f7fc ff06 	bl	80009b4 <__aeabi_dcmplt>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	f040 82eb 	bne.w	8004184 <_dtoa_r+0xa1c>
 8003bae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003bb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f2c0 8150 	blt.w	8003e5e <_dtoa_r+0x6f6>
 8003bbe:	f1bb 0f0e 	cmp.w	fp, #14
 8003bc2:	f300 814c 	bgt.w	8003e5e <_dtoa_r+0x6f6>
 8003bc6:	4b6b      	ldr	r3, [pc, #428]	; (8003d74 <_dtoa_r+0x60c>)
 8003bc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003bd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f280 80da 	bge.w	8003d90 <_dtoa_r+0x628>
 8003bdc:	f1b9 0f00 	cmp.w	r9, #0
 8003be0:	f300 80d6 	bgt.w	8003d90 <_dtoa_r+0x628>
 8003be4:	f040 82cd 	bne.w	8004182 <_dtoa_r+0xa1a>
 8003be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bec:	2200      	movs	r2, #0
 8003bee:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <_dtoa_r+0x620>)
 8003bf0:	f7fc fc6e 	bl	80004d0 <__aeabi_dmul>
 8003bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bf8:	f7fc fef0 	bl	80009dc <__aeabi_dcmpge>
 8003bfc:	464e      	mov	r6, r9
 8003bfe:	464f      	mov	r7, r9
 8003c00:	2800      	cmp	r0, #0
 8003c02:	f040 82a4 	bne.w	800414e <_dtoa_r+0x9e6>
 8003c06:	9b06      	ldr	r3, [sp, #24]
 8003c08:	9a06      	ldr	r2, [sp, #24]
 8003c0a:	1c5d      	adds	r5, r3, #1
 8003c0c:	2331      	movs	r3, #49	; 0x31
 8003c0e:	f10b 0b01 	add.w	fp, fp, #1
 8003c12:	7013      	strb	r3, [r2, #0]
 8003c14:	e29f      	b.n	8004156 <_dtoa_r+0x9ee>
 8003c16:	07f2      	lsls	r2, r6, #31
 8003c18:	d505      	bpl.n	8003c26 <_dtoa_r+0x4be>
 8003c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c1e:	f7fc fc57 	bl	80004d0 <__aeabi_dmul>
 8003c22:	2301      	movs	r3, #1
 8003c24:	3501      	adds	r5, #1
 8003c26:	1076      	asrs	r6, r6, #1
 8003c28:	3708      	adds	r7, #8
 8003c2a:	e76d      	b.n	8003b08 <_dtoa_r+0x3a0>
 8003c2c:	2502      	movs	r5, #2
 8003c2e:	e770      	b.n	8003b12 <_dtoa_r+0x3aa>
 8003c30:	465f      	mov	r7, fp
 8003c32:	464e      	mov	r6, r9
 8003c34:	e78f      	b.n	8003b56 <_dtoa_r+0x3ee>
 8003c36:	9a06      	ldr	r2, [sp, #24]
 8003c38:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <_dtoa_r+0x60c>)
 8003c3a:	4432      	add	r2, r6
 8003c3c:	9211      	str	r2, [sp, #68]	; 0x44
 8003c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c40:	1e71      	subs	r1, r6, #1
 8003c42:	2a00      	cmp	r2, #0
 8003c44:	d048      	beq.n	8003cd8 <_dtoa_r+0x570>
 8003c46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	2000      	movs	r0, #0
 8003c50:	494e      	ldr	r1, [pc, #312]	; (8003d8c <_dtoa_r+0x624>)
 8003c52:	f7fc fd67 	bl	8000724 <__aeabi_ddiv>
 8003c56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c5a:	f7fc fa85 	bl	8000168 <__aeabi_dsub>
 8003c5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c62:	9d06      	ldr	r5, [sp, #24]
 8003c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c68:	f7fc fee2 	bl	8000a30 <__aeabi_d2iz>
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	f7fc fbc9 	bl	8000404 <__aeabi_i2d>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7a:	f7fc fa75 	bl	8000168 <__aeabi_dsub>
 8003c7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c82:	3630      	adds	r6, #48	; 0x30
 8003c84:	f805 6b01 	strb.w	r6, [r5], #1
 8003c88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c8c:	f7fc fe92 	bl	80009b4 <__aeabi_dcmplt>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d164      	bne.n	8003d5e <_dtoa_r+0x5f6>
 8003c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c98:	2000      	movs	r0, #0
 8003c9a:	4938      	ldr	r1, [pc, #224]	; (8003d7c <_dtoa_r+0x614>)
 8003c9c:	f7fc fa64 	bl	8000168 <__aeabi_dsub>
 8003ca0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ca4:	f7fc fe86 	bl	80009b4 <__aeabi_dcmplt>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	f040 80b9 	bne.w	8003e20 <_dtoa_r+0x6b8>
 8003cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cb0:	429d      	cmp	r5, r3
 8003cb2:	f43f af7c 	beq.w	8003bae <_dtoa_r+0x446>
 8003cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <_dtoa_r+0x618>)
 8003cbe:	f7fc fc07 	bl	80004d0 <__aeabi_dmul>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <_dtoa_r+0x618>)
 8003cce:	f7fc fbff 	bl	80004d0 <__aeabi_dmul>
 8003cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cd6:	e7c5      	b.n	8003c64 <_dtoa_r+0x4fc>
 8003cd8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ce0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ce4:	f7fc fbf4 	bl	80004d0 <__aeabi_dmul>
 8003ce8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003cec:	9d06      	ldr	r5, [sp, #24]
 8003cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cf2:	f7fc fe9d 	bl	8000a30 <__aeabi_d2iz>
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	f7fc fb84 	bl	8000404 <__aeabi_i2d>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d04:	f7fc fa30 	bl	8000168 <__aeabi_dsub>
 8003d08:	3630      	adds	r6, #48	; 0x30
 8003d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d0c:	f805 6b01 	strb.w	r6, [r5], #1
 8003d10:	42ab      	cmp	r3, r5
 8003d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	d124      	bne.n	8003d66 <_dtoa_r+0x5fe>
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <_dtoa_r+0x624>)
 8003d1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d22:	f7fc fa23 	bl	800016c <__adddf3>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d2e:	f7fc fe5f 	bl	80009f0 <__aeabi_dcmpgt>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d174      	bne.n	8003e20 <_dtoa_r+0x6b8>
 8003d36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	4913      	ldr	r1, [pc, #76]	; (8003d8c <_dtoa_r+0x624>)
 8003d3e:	f7fc fa13 	bl	8000168 <__aeabi_dsub>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d4a:	f7fc fe33 	bl	80009b4 <__aeabi_dcmplt>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	f43f af2d 	beq.w	8003bae <_dtoa_r+0x446>
 8003d54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d58:	1e6a      	subs	r2, r5, #1
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d001      	beq.n	8003d62 <_dtoa_r+0x5fa>
 8003d5e:	46bb      	mov	fp, r7
 8003d60:	e04d      	b.n	8003dfe <_dtoa_r+0x696>
 8003d62:	4615      	mov	r5, r2
 8003d64:	e7f6      	b.n	8003d54 <_dtoa_r+0x5ec>
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <_dtoa_r+0x618>)
 8003d68:	f7fc fbb2 	bl	80004d0 <__aeabi_dmul>
 8003d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d70:	e7bd      	b.n	8003cee <_dtoa_r+0x586>
 8003d72:	bf00      	nop
 8003d74:	080058b8 	.word	0x080058b8
 8003d78:	08005890 	.word	0x08005890
 8003d7c:	3ff00000 	.word	0x3ff00000
 8003d80:	40240000 	.word	0x40240000
 8003d84:	401c0000 	.word	0x401c0000
 8003d88:	40140000 	.word	0x40140000
 8003d8c:	3fe00000 	.word	0x3fe00000
 8003d90:	9d06      	ldr	r5, [sp, #24]
 8003d92:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	f7fc fcc1 	bl	8000724 <__aeabi_ddiv>
 8003da2:	f7fc fe45 	bl	8000a30 <__aeabi_d2iz>
 8003da6:	4680      	mov	r8, r0
 8003da8:	f7fc fb2c 	bl	8000404 <__aeabi_i2d>
 8003dac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003db0:	f7fc fb8e 	bl	80004d0 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4630      	mov	r0, r6
 8003dba:	4639      	mov	r1, r7
 8003dbc:	f7fc f9d4 	bl	8000168 <__aeabi_dsub>
 8003dc0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003dc4:	f805 6b01 	strb.w	r6, [r5], #1
 8003dc8:	9e06      	ldr	r6, [sp, #24]
 8003dca:	4602      	mov	r2, r0
 8003dcc:	1bae      	subs	r6, r5, r6
 8003dce:	45b1      	cmp	r9, r6
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	d137      	bne.n	8003e44 <_dtoa_r+0x6dc>
 8003dd4:	f7fc f9ca 	bl	800016c <__adddf3>
 8003dd8:	4606      	mov	r6, r0
 8003dda:	460f      	mov	r7, r1
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003de4:	f7fc fde6 	bl	80009b4 <__aeabi_dcmplt>
 8003de8:	b9c8      	cbnz	r0, 8003e1e <_dtoa_r+0x6b6>
 8003dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dee:	4632      	mov	r2, r6
 8003df0:	463b      	mov	r3, r7
 8003df2:	f7fc fdd5 	bl	80009a0 <__aeabi_dcmpeq>
 8003df6:	b110      	cbz	r0, 8003dfe <_dtoa_r+0x696>
 8003df8:	f018 0f01 	tst.w	r8, #1
 8003dfc:	d10f      	bne.n	8003e1e <_dtoa_r+0x6b6>
 8003dfe:	4651      	mov	r1, sl
 8003e00:	4620      	mov	r0, r4
 8003e02:	f000 fd01 	bl	8004808 <_Bfree>
 8003e06:	2300      	movs	r3, #0
 8003e08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e0a:	702b      	strb	r3, [r5, #0]
 8003e0c:	f10b 0301 	add.w	r3, fp, #1
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f43f acec 	beq.w	80037f2 <_dtoa_r+0x8a>
 8003e1a:	601d      	str	r5, [r3, #0]
 8003e1c:	e4e9      	b.n	80037f2 <_dtoa_r+0x8a>
 8003e1e:	465f      	mov	r7, fp
 8003e20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003e24:	1e6b      	subs	r3, r5, #1
 8003e26:	2a39      	cmp	r2, #57	; 0x39
 8003e28:	d106      	bne.n	8003e38 <_dtoa_r+0x6d0>
 8003e2a:	9a06      	ldr	r2, [sp, #24]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d107      	bne.n	8003e40 <_dtoa_r+0x6d8>
 8003e30:	2330      	movs	r3, #48	; 0x30
 8003e32:	7013      	strb	r3, [r2, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	3701      	adds	r7, #1
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	3201      	adds	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e78e      	b.n	8003d5e <_dtoa_r+0x5f6>
 8003e40:	461d      	mov	r5, r3
 8003e42:	e7ed      	b.n	8003e20 <_dtoa_r+0x6b8>
 8003e44:	2200      	movs	r2, #0
 8003e46:	4bb5      	ldr	r3, [pc, #724]	; (800411c <_dtoa_r+0x9b4>)
 8003e48:	f7fc fb42 	bl	80004d0 <__aeabi_dmul>
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2300      	movs	r3, #0
 8003e50:	4606      	mov	r6, r0
 8003e52:	460f      	mov	r7, r1
 8003e54:	f7fc fda4 	bl	80009a0 <__aeabi_dcmpeq>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d09c      	beq.n	8003d96 <_dtoa_r+0x62e>
 8003e5c:	e7cf      	b.n	8003dfe <_dtoa_r+0x696>
 8003e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	f000 8129 	beq.w	80040b8 <_dtoa_r+0x950>
 8003e66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003e68:	2a01      	cmp	r2, #1
 8003e6a:	f300 810e 	bgt.w	800408a <_dtoa_r+0x922>
 8003e6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	f000 8106 	beq.w	8004082 <_dtoa_r+0x91a>
 8003e76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003e7a:	4645      	mov	r5, r8
 8003e7c:	9e08      	ldr	r6, [sp, #32]
 8003e7e:	9a07      	ldr	r2, [sp, #28]
 8003e80:	2101      	movs	r1, #1
 8003e82:	441a      	add	r2, r3
 8003e84:	4620      	mov	r0, r4
 8003e86:	4498      	add	r8, r3
 8003e88:	9207      	str	r2, [sp, #28]
 8003e8a:	f000 fd5d 	bl	8004948 <__i2b>
 8003e8e:	4607      	mov	r7, r0
 8003e90:	2d00      	cmp	r5, #0
 8003e92:	dd0b      	ble.n	8003eac <_dtoa_r+0x744>
 8003e94:	9b07      	ldr	r3, [sp, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	dd08      	ble.n	8003eac <_dtoa_r+0x744>
 8003e9a:	42ab      	cmp	r3, r5
 8003e9c:	bfa8      	it	ge
 8003e9e:	462b      	movge	r3, r5
 8003ea0:	9a07      	ldr	r2, [sp, #28]
 8003ea2:	eba8 0803 	sub.w	r8, r8, r3
 8003ea6:	1aed      	subs	r5, r5, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	9307      	str	r3, [sp, #28]
 8003eac:	9b08      	ldr	r3, [sp, #32]
 8003eae:	b1fb      	cbz	r3, 8003ef0 <_dtoa_r+0x788>
 8003eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8104 	beq.w	80040c0 <_dtoa_r+0x958>
 8003eb8:	2e00      	cmp	r6, #0
 8003eba:	dd11      	ble.n	8003ee0 <_dtoa_r+0x778>
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f000 fdd7 	bl	8004a74 <__pow5mult>
 8003ec6:	4652      	mov	r2, sl
 8003ec8:	4601      	mov	r1, r0
 8003eca:	4607      	mov	r7, r0
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f000 fd44 	bl	800495a <__multiply>
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	900a      	str	r0, [sp, #40]	; 0x28
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f000 fc96 	bl	8004808 <_Bfree>
 8003edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ede:	469a      	mov	sl, r3
 8003ee0:	9b08      	ldr	r3, [sp, #32]
 8003ee2:	1b9a      	subs	r2, r3, r6
 8003ee4:	d004      	beq.n	8003ef0 <_dtoa_r+0x788>
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f000 fdc3 	bl	8004a74 <__pow5mult>
 8003eee:	4682      	mov	sl, r0
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f000 fd28 	bl	8004948 <__i2b>
 8003ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003efa:	4606      	mov	r6, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f340 80e1 	ble.w	80040c4 <_dtoa_r+0x95c>
 8003f02:	461a      	mov	r2, r3
 8003f04:	4601      	mov	r1, r0
 8003f06:	4620      	mov	r0, r4
 8003f08:	f000 fdb4 	bl	8004a74 <__pow5mult>
 8003f0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f0e:	4606      	mov	r6, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	f340 80da 	ble.w	80040ca <_dtoa_r+0x962>
 8003f16:	2300      	movs	r3, #0
 8003f18:	9308      	str	r3, [sp, #32]
 8003f1a:	6933      	ldr	r3, [r6, #16]
 8003f1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003f20:	6918      	ldr	r0, [r3, #16]
 8003f22:	f000 fcc3 	bl	80048ac <__hi0bits>
 8003f26:	f1c0 0020 	rsb	r0, r0, #32
 8003f2a:	9b07      	ldr	r3, [sp, #28]
 8003f2c:	4418      	add	r0, r3
 8003f2e:	f010 001f 	ands.w	r0, r0, #31
 8003f32:	f000 80f0 	beq.w	8004116 <_dtoa_r+0x9ae>
 8003f36:	f1c0 0320 	rsb	r3, r0, #32
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	f340 80e2 	ble.w	8004104 <_dtoa_r+0x99c>
 8003f40:	9b07      	ldr	r3, [sp, #28]
 8003f42:	f1c0 001c 	rsb	r0, r0, #28
 8003f46:	4480      	add	r8, r0
 8003f48:	4405      	add	r5, r0
 8003f4a:	4403      	add	r3, r0
 8003f4c:	9307      	str	r3, [sp, #28]
 8003f4e:	f1b8 0f00 	cmp.w	r8, #0
 8003f52:	dd05      	ble.n	8003f60 <_dtoa_r+0x7f8>
 8003f54:	4651      	mov	r1, sl
 8003f56:	4642      	mov	r2, r8
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 fdd9 	bl	8004b10 <__lshift>
 8003f5e:	4682      	mov	sl, r0
 8003f60:	9b07      	ldr	r3, [sp, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	dd05      	ble.n	8003f72 <_dtoa_r+0x80a>
 8003f66:	4631      	mov	r1, r6
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 fdd0 	bl	8004b10 <__lshift>
 8003f70:	4606      	mov	r6, r0
 8003f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80d3 	beq.w	8004120 <_dtoa_r+0x9b8>
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	f000 fe18 	bl	8004bb2 <__mcmp>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	f280 80cc 	bge.w	8004120 <_dtoa_r+0x9b8>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	220a      	movs	r2, #10
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f000 fc51 	bl	8004836 <__multadd>
 8003f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f9a:	4682      	mov	sl, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 81a9 	beq.w	80042f4 <_dtoa_r+0xb8c>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	4639      	mov	r1, r7
 8003fa6:	220a      	movs	r2, #10
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 fc44 	bl	8004836 <__multadd>
 8003fae:	9b04      	ldr	r3, [sp, #16]
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	dc03      	bgt.n	8003fbe <_dtoa_r+0x856>
 8003fb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	f300 80b9 	bgt.w	8004130 <_dtoa_r+0x9c8>
 8003fbe:	2d00      	cmp	r5, #0
 8003fc0:	dd05      	ble.n	8003fce <_dtoa_r+0x866>
 8003fc2:	4639      	mov	r1, r7
 8003fc4:	462a      	mov	r2, r5
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f000 fda2 	bl	8004b10 <__lshift>
 8003fcc:	4607      	mov	r7, r0
 8003fce:	9b08      	ldr	r3, [sp, #32]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8110 	beq.w	80041f6 <_dtoa_r+0xa8e>
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f000 fbe1 	bl	80047a0 <_Balloc>
 8003fde:	4605      	mov	r5, r0
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	f107 010c 	add.w	r1, r7, #12
 8003fe6:	3202      	adds	r2, #2
 8003fe8:	0092      	lsls	r2, r2, #2
 8003fea:	300c      	adds	r0, #12
 8003fec:	f000 fbc0 	bl	8004770 <memcpy>
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 fd8b 	bl	8004b10 <__lshift>
 8003ffa:	9707      	str	r7, [sp, #28]
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	9b02      	ldr	r3, [sp, #8]
 8004000:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	9308      	str	r3, [sp, #32]
 800400a:	4631      	mov	r1, r6
 800400c:	4650      	mov	r0, sl
 800400e:	f7ff fb1d 	bl	800364c <quorem>
 8004012:	9907      	ldr	r1, [sp, #28]
 8004014:	4605      	mov	r5, r0
 8004016:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800401a:	4650      	mov	r0, sl
 800401c:	f000 fdc9 	bl	8004bb2 <__mcmp>
 8004020:	463a      	mov	r2, r7
 8004022:	9002      	str	r0, [sp, #8]
 8004024:	4631      	mov	r1, r6
 8004026:	4620      	mov	r0, r4
 8004028:	f000 fddd 	bl	8004be6 <__mdiff>
 800402c:	68c3      	ldr	r3, [r0, #12]
 800402e:	4602      	mov	r2, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 80e2 	bne.w	80041fa <_dtoa_r+0xa92>
 8004036:	4601      	mov	r1, r0
 8004038:	9009      	str	r0, [sp, #36]	; 0x24
 800403a:	4650      	mov	r0, sl
 800403c:	f000 fdb9 	bl	8004bb2 <__mcmp>
 8004040:	4603      	mov	r3, r0
 8004042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004044:	4611      	mov	r1, r2
 8004046:	4620      	mov	r0, r4
 8004048:	9309      	str	r3, [sp, #36]	; 0x24
 800404a:	f000 fbdd 	bl	8004808 <_Bfree>
 800404e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004050:	2b00      	cmp	r3, #0
 8004052:	f040 80d4 	bne.w	80041fe <_dtoa_r+0xa96>
 8004056:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004058:	2a00      	cmp	r2, #0
 800405a:	f040 80d0 	bne.w	80041fe <_dtoa_r+0xa96>
 800405e:	9a08      	ldr	r2, [sp, #32]
 8004060:	2a00      	cmp	r2, #0
 8004062:	f040 80cc 	bne.w	80041fe <_dtoa_r+0xa96>
 8004066:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800406a:	f000 80e8 	beq.w	800423e <_dtoa_r+0xad6>
 800406e:	9b02      	ldr	r3, [sp, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	dd01      	ble.n	8004078 <_dtoa_r+0x910>
 8004074:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004078:	f108 0501 	add.w	r5, r8, #1
 800407c:	f888 9000 	strb.w	r9, [r8]
 8004080:	e06b      	b.n	800415a <_dtoa_r+0x9f2>
 8004082:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004084:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004088:	e6f7      	b.n	8003e7a <_dtoa_r+0x712>
 800408a:	9b08      	ldr	r3, [sp, #32]
 800408c:	f109 36ff 	add.w	r6, r9, #4294967295
 8004090:	42b3      	cmp	r3, r6
 8004092:	bfb7      	itett	lt
 8004094:	9b08      	ldrlt	r3, [sp, #32]
 8004096:	1b9e      	subge	r6, r3, r6
 8004098:	1af2      	sublt	r2, r6, r3
 800409a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800409c:	bfbf      	itttt	lt
 800409e:	9608      	strlt	r6, [sp, #32]
 80040a0:	189b      	addlt	r3, r3, r2
 80040a2:	930c      	strlt	r3, [sp, #48]	; 0x30
 80040a4:	2600      	movlt	r6, #0
 80040a6:	f1b9 0f00 	cmp.w	r9, #0
 80040aa:	bfb9      	ittee	lt
 80040ac:	eba8 0509 	sublt.w	r5, r8, r9
 80040b0:	2300      	movlt	r3, #0
 80040b2:	4645      	movge	r5, r8
 80040b4:	464b      	movge	r3, r9
 80040b6:	e6e2      	b.n	8003e7e <_dtoa_r+0x716>
 80040b8:	9e08      	ldr	r6, [sp, #32]
 80040ba:	4645      	mov	r5, r8
 80040bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80040be:	e6e7      	b.n	8003e90 <_dtoa_r+0x728>
 80040c0:	9a08      	ldr	r2, [sp, #32]
 80040c2:	e710      	b.n	8003ee6 <_dtoa_r+0x77e>
 80040c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	dc18      	bgt.n	80040fc <_dtoa_r+0x994>
 80040ca:	9b02      	ldr	r3, [sp, #8]
 80040cc:	b9b3      	cbnz	r3, 80040fc <_dtoa_r+0x994>
 80040ce:	9b03      	ldr	r3, [sp, #12]
 80040d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d4:	b9a3      	cbnz	r3, 8004100 <_dtoa_r+0x998>
 80040d6:	9b03      	ldr	r3, [sp, #12]
 80040d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040dc:	0d1b      	lsrs	r3, r3, #20
 80040de:	051b      	lsls	r3, r3, #20
 80040e0:	b12b      	cbz	r3, 80040ee <_dtoa_r+0x986>
 80040e2:	9b07      	ldr	r3, [sp, #28]
 80040e4:	f108 0801 	add.w	r8, r8, #1
 80040e8:	3301      	adds	r3, #1
 80040ea:	9307      	str	r3, [sp, #28]
 80040ec:	2301      	movs	r3, #1
 80040ee:	9308      	str	r3, [sp, #32]
 80040f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f47f af11 	bne.w	8003f1a <_dtoa_r+0x7b2>
 80040f8:	2001      	movs	r0, #1
 80040fa:	e716      	b.n	8003f2a <_dtoa_r+0x7c2>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e7f6      	b.n	80040ee <_dtoa_r+0x986>
 8004100:	9b02      	ldr	r3, [sp, #8]
 8004102:	e7f4      	b.n	80040ee <_dtoa_r+0x986>
 8004104:	f43f af23 	beq.w	8003f4e <_dtoa_r+0x7e6>
 8004108:	9a07      	ldr	r2, [sp, #28]
 800410a:	331c      	adds	r3, #28
 800410c:	441a      	add	r2, r3
 800410e:	4498      	add	r8, r3
 8004110:	441d      	add	r5, r3
 8004112:	4613      	mov	r3, r2
 8004114:	e71a      	b.n	8003f4c <_dtoa_r+0x7e4>
 8004116:	4603      	mov	r3, r0
 8004118:	e7f6      	b.n	8004108 <_dtoa_r+0x9a0>
 800411a:	bf00      	nop
 800411c:	40240000 	.word	0x40240000
 8004120:	f1b9 0f00 	cmp.w	r9, #0
 8004124:	dc33      	bgt.n	800418e <_dtoa_r+0xa26>
 8004126:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004128:	2b02      	cmp	r3, #2
 800412a:	dd30      	ble.n	800418e <_dtoa_r+0xa26>
 800412c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004130:	9b04      	ldr	r3, [sp, #16]
 8004132:	b963      	cbnz	r3, 800414e <_dtoa_r+0x9e6>
 8004134:	4631      	mov	r1, r6
 8004136:	2205      	movs	r2, #5
 8004138:	4620      	mov	r0, r4
 800413a:	f000 fb7c 	bl	8004836 <__multadd>
 800413e:	4601      	mov	r1, r0
 8004140:	4606      	mov	r6, r0
 8004142:	4650      	mov	r0, sl
 8004144:	f000 fd35 	bl	8004bb2 <__mcmp>
 8004148:	2800      	cmp	r0, #0
 800414a:	f73f ad5c 	bgt.w	8003c06 <_dtoa_r+0x49e>
 800414e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004150:	9d06      	ldr	r5, [sp, #24]
 8004152:	ea6f 0b03 	mvn.w	fp, r3
 8004156:	2300      	movs	r3, #0
 8004158:	9307      	str	r3, [sp, #28]
 800415a:	4631      	mov	r1, r6
 800415c:	4620      	mov	r0, r4
 800415e:	f000 fb53 	bl	8004808 <_Bfree>
 8004162:	2f00      	cmp	r7, #0
 8004164:	f43f ae4b 	beq.w	8003dfe <_dtoa_r+0x696>
 8004168:	9b07      	ldr	r3, [sp, #28]
 800416a:	b12b      	cbz	r3, 8004178 <_dtoa_r+0xa10>
 800416c:	42bb      	cmp	r3, r7
 800416e:	d003      	beq.n	8004178 <_dtoa_r+0xa10>
 8004170:	4619      	mov	r1, r3
 8004172:	4620      	mov	r0, r4
 8004174:	f000 fb48 	bl	8004808 <_Bfree>
 8004178:	4639      	mov	r1, r7
 800417a:	4620      	mov	r0, r4
 800417c:	f000 fb44 	bl	8004808 <_Bfree>
 8004180:	e63d      	b.n	8003dfe <_dtoa_r+0x696>
 8004182:	2600      	movs	r6, #0
 8004184:	4637      	mov	r7, r6
 8004186:	e7e2      	b.n	800414e <_dtoa_r+0x9e6>
 8004188:	46bb      	mov	fp, r7
 800418a:	4637      	mov	r7, r6
 800418c:	e53b      	b.n	8003c06 <_dtoa_r+0x49e>
 800418e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004190:	f8cd 9010 	str.w	r9, [sp, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f47f af12 	bne.w	8003fbe <_dtoa_r+0x856>
 800419a:	9d06      	ldr	r5, [sp, #24]
 800419c:	4631      	mov	r1, r6
 800419e:	4650      	mov	r0, sl
 80041a0:	f7ff fa54 	bl	800364c <quorem>
 80041a4:	9b06      	ldr	r3, [sp, #24]
 80041a6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80041aa:	f805 9b01 	strb.w	r9, [r5], #1
 80041ae:	9a04      	ldr	r2, [sp, #16]
 80041b0:	1aeb      	subs	r3, r5, r3
 80041b2:	429a      	cmp	r2, r3
 80041b4:	f300 8081 	bgt.w	80042ba <_dtoa_r+0xb52>
 80041b8:	9b06      	ldr	r3, [sp, #24]
 80041ba:	2a01      	cmp	r2, #1
 80041bc:	bfac      	ite	ge
 80041be:	189b      	addge	r3, r3, r2
 80041c0:	3301      	addlt	r3, #1
 80041c2:	4698      	mov	r8, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	9307      	str	r3, [sp, #28]
 80041c8:	4651      	mov	r1, sl
 80041ca:	2201      	movs	r2, #1
 80041cc:	4620      	mov	r0, r4
 80041ce:	f000 fc9f 	bl	8004b10 <__lshift>
 80041d2:	4631      	mov	r1, r6
 80041d4:	4682      	mov	sl, r0
 80041d6:	f000 fcec 	bl	8004bb2 <__mcmp>
 80041da:	2800      	cmp	r0, #0
 80041dc:	dc34      	bgt.n	8004248 <_dtoa_r+0xae0>
 80041de:	d102      	bne.n	80041e6 <_dtoa_r+0xa7e>
 80041e0:	f019 0f01 	tst.w	r9, #1
 80041e4:	d130      	bne.n	8004248 <_dtoa_r+0xae0>
 80041e6:	4645      	mov	r5, r8
 80041e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80041ec:	1e6a      	subs	r2, r5, #1
 80041ee:	2b30      	cmp	r3, #48	; 0x30
 80041f0:	d1b3      	bne.n	800415a <_dtoa_r+0x9f2>
 80041f2:	4615      	mov	r5, r2
 80041f4:	e7f8      	b.n	80041e8 <_dtoa_r+0xa80>
 80041f6:	4638      	mov	r0, r7
 80041f8:	e6ff      	b.n	8003ffa <_dtoa_r+0x892>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e722      	b.n	8004044 <_dtoa_r+0x8dc>
 80041fe:	9a02      	ldr	r2, [sp, #8]
 8004200:	2a00      	cmp	r2, #0
 8004202:	db04      	blt.n	800420e <_dtoa_r+0xaa6>
 8004204:	d128      	bne.n	8004258 <_dtoa_r+0xaf0>
 8004206:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004208:	bb32      	cbnz	r2, 8004258 <_dtoa_r+0xaf0>
 800420a:	9a08      	ldr	r2, [sp, #32]
 800420c:	bb22      	cbnz	r2, 8004258 <_dtoa_r+0xaf0>
 800420e:	2b00      	cmp	r3, #0
 8004210:	f77f af32 	ble.w	8004078 <_dtoa_r+0x910>
 8004214:	4651      	mov	r1, sl
 8004216:	2201      	movs	r2, #1
 8004218:	4620      	mov	r0, r4
 800421a:	f000 fc79 	bl	8004b10 <__lshift>
 800421e:	4631      	mov	r1, r6
 8004220:	4682      	mov	sl, r0
 8004222:	f000 fcc6 	bl	8004bb2 <__mcmp>
 8004226:	2800      	cmp	r0, #0
 8004228:	dc05      	bgt.n	8004236 <_dtoa_r+0xace>
 800422a:	f47f af25 	bne.w	8004078 <_dtoa_r+0x910>
 800422e:	f019 0f01 	tst.w	r9, #1
 8004232:	f43f af21 	beq.w	8004078 <_dtoa_r+0x910>
 8004236:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800423a:	f47f af1b 	bne.w	8004074 <_dtoa_r+0x90c>
 800423e:	2339      	movs	r3, #57	; 0x39
 8004240:	f108 0801 	add.w	r8, r8, #1
 8004244:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004248:	4645      	mov	r5, r8
 800424a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800424e:	1e6a      	subs	r2, r5, #1
 8004250:	2b39      	cmp	r3, #57	; 0x39
 8004252:	d03a      	beq.n	80042ca <_dtoa_r+0xb62>
 8004254:	3301      	adds	r3, #1
 8004256:	e03f      	b.n	80042d8 <_dtoa_r+0xb70>
 8004258:	2b00      	cmp	r3, #0
 800425a:	f108 0501 	add.w	r5, r8, #1
 800425e:	dd05      	ble.n	800426c <_dtoa_r+0xb04>
 8004260:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004264:	d0eb      	beq.n	800423e <_dtoa_r+0xad6>
 8004266:	f109 0901 	add.w	r9, r9, #1
 800426a:	e707      	b.n	800407c <_dtoa_r+0x914>
 800426c:	9b06      	ldr	r3, [sp, #24]
 800426e:	9a04      	ldr	r2, [sp, #16]
 8004270:	1aeb      	subs	r3, r5, r3
 8004272:	4293      	cmp	r3, r2
 8004274:	46a8      	mov	r8, r5
 8004276:	f805 9c01 	strb.w	r9, [r5, #-1]
 800427a:	d0a5      	beq.n	80041c8 <_dtoa_r+0xa60>
 800427c:	4651      	mov	r1, sl
 800427e:	2300      	movs	r3, #0
 8004280:	220a      	movs	r2, #10
 8004282:	4620      	mov	r0, r4
 8004284:	f000 fad7 	bl	8004836 <__multadd>
 8004288:	9b07      	ldr	r3, [sp, #28]
 800428a:	4682      	mov	sl, r0
 800428c:	42bb      	cmp	r3, r7
 800428e:	f04f 020a 	mov.w	r2, #10
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	9907      	ldr	r1, [sp, #28]
 8004298:	4620      	mov	r0, r4
 800429a:	d104      	bne.n	80042a6 <_dtoa_r+0xb3e>
 800429c:	f000 facb 	bl	8004836 <__multadd>
 80042a0:	9007      	str	r0, [sp, #28]
 80042a2:	4607      	mov	r7, r0
 80042a4:	e6b1      	b.n	800400a <_dtoa_r+0x8a2>
 80042a6:	f000 fac6 	bl	8004836 <__multadd>
 80042aa:	2300      	movs	r3, #0
 80042ac:	9007      	str	r0, [sp, #28]
 80042ae:	220a      	movs	r2, #10
 80042b0:	4639      	mov	r1, r7
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 fabf 	bl	8004836 <__multadd>
 80042b8:	e7f3      	b.n	80042a2 <_dtoa_r+0xb3a>
 80042ba:	4651      	mov	r1, sl
 80042bc:	2300      	movs	r3, #0
 80042be:	220a      	movs	r2, #10
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 fab8 	bl	8004836 <__multadd>
 80042c6:	4682      	mov	sl, r0
 80042c8:	e768      	b.n	800419c <_dtoa_r+0xa34>
 80042ca:	9b06      	ldr	r3, [sp, #24]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d105      	bne.n	80042dc <_dtoa_r+0xb74>
 80042d0:	2331      	movs	r3, #49	; 0x31
 80042d2:	9a06      	ldr	r2, [sp, #24]
 80042d4:	f10b 0b01 	add.w	fp, fp, #1
 80042d8:	7013      	strb	r3, [r2, #0]
 80042da:	e73e      	b.n	800415a <_dtoa_r+0x9f2>
 80042dc:	4615      	mov	r5, r2
 80042de:	e7b4      	b.n	800424a <_dtoa_r+0xae2>
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <_dtoa_r+0xba0>)
 80042e2:	f7ff baa3 	b.w	800382c <_dtoa_r+0xc4>
 80042e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f aa7d 	bne.w	80037e8 <_dtoa_r+0x80>
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <_dtoa_r+0xba4>)
 80042f0:	f7ff ba9c 	b.w	800382c <_dtoa_r+0xc4>
 80042f4:	9b04      	ldr	r3, [sp, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f73f af4f 	bgt.w	800419a <_dtoa_r+0xa32>
 80042fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042fe:	2b02      	cmp	r3, #2
 8004300:	f77f af4b 	ble.w	800419a <_dtoa_r+0xa32>
 8004304:	e714      	b.n	8004130 <_dtoa_r+0x9c8>
 8004306:	bf00      	nop
 8004308:	0800585f 	.word	0x0800585f
 800430c:	08005881 	.word	0x08005881

08004310 <_localeconv_r>:
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <_localeconv_r+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6a18      	ldr	r0, [r3, #32]
 8004316:	4b04      	ldr	r3, [pc, #16]	; (8004328 <_localeconv_r+0x18>)
 8004318:	2800      	cmp	r0, #0
 800431a:	bf08      	it	eq
 800431c:	4618      	moveq	r0, r3
 800431e:	30f0      	adds	r0, #240	; 0xf0
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000014 	.word	0x20000014
 8004328:	20000518 	.word	0x20000518

0800432c <malloc>:
 800432c:	4b02      	ldr	r3, [pc, #8]	; (8004338 <malloc+0xc>)
 800432e:	4601      	mov	r1, r0
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f000 b803 	b.w	800433c <_malloc_r>
 8004336:	bf00      	nop
 8004338:	20000014 	.word	0x20000014

0800433c <_malloc_r>:
 800433c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004340:	f101 040b 	add.w	r4, r1, #11
 8004344:	2c16      	cmp	r4, #22
 8004346:	4681      	mov	r9, r0
 8004348:	d907      	bls.n	800435a <_malloc_r+0x1e>
 800434a:	f034 0407 	bics.w	r4, r4, #7
 800434e:	d505      	bpl.n	800435c <_malloc_r+0x20>
 8004350:	230c      	movs	r3, #12
 8004352:	f8c9 3000 	str.w	r3, [r9]
 8004356:	2600      	movs	r6, #0
 8004358:	e131      	b.n	80045be <_malloc_r+0x282>
 800435a:	2410      	movs	r4, #16
 800435c:	428c      	cmp	r4, r1
 800435e:	d3f7      	bcc.n	8004350 <_malloc_r+0x14>
 8004360:	4648      	mov	r0, r9
 8004362:	f000 fa11 	bl	8004788 <__malloc_lock>
 8004366:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800436a:	4d9b      	ldr	r5, [pc, #620]	; (80045d8 <_malloc_r+0x29c>)
 800436c:	d236      	bcs.n	80043dc <_malloc_r+0xa0>
 800436e:	f104 0208 	add.w	r2, r4, #8
 8004372:	442a      	add	r2, r5
 8004374:	6856      	ldr	r6, [r2, #4]
 8004376:	f1a2 0108 	sub.w	r1, r2, #8
 800437a:	428e      	cmp	r6, r1
 800437c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004380:	d102      	bne.n	8004388 <_malloc_r+0x4c>
 8004382:	68d6      	ldr	r6, [r2, #12]
 8004384:	42b2      	cmp	r2, r6
 8004386:	d010      	beq.n	80043aa <_malloc_r+0x6e>
 8004388:	6873      	ldr	r3, [r6, #4]
 800438a:	68f2      	ldr	r2, [r6, #12]
 800438c:	68b1      	ldr	r1, [r6, #8]
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	60ca      	str	r2, [r1, #12]
 8004394:	4433      	add	r3, r6
 8004396:	6091      	str	r1, [r2, #8]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	4648      	mov	r0, r9
 80043a2:	f000 f9f7 	bl	8004794 <__malloc_unlock>
 80043a6:	3608      	adds	r6, #8
 80043a8:	e109      	b.n	80045be <_malloc_r+0x282>
 80043aa:	3302      	adds	r3, #2
 80043ac:	4a8b      	ldr	r2, [pc, #556]	; (80045dc <_malloc_r+0x2a0>)
 80043ae:	692e      	ldr	r6, [r5, #16]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4296      	cmp	r6, r2
 80043b4:	d06d      	beq.n	8004492 <_malloc_r+0x156>
 80043b6:	6870      	ldr	r0, [r6, #4]
 80043b8:	f020 0003 	bic.w	r0, r0, #3
 80043bc:	1b07      	subs	r7, r0, r4
 80043be:	2f0f      	cmp	r7, #15
 80043c0:	dd47      	ble.n	8004452 <_malloc_r+0x116>
 80043c2:	1933      	adds	r3, r6, r4
 80043c4:	f044 0401 	orr.w	r4, r4, #1
 80043c8:	6074      	str	r4, [r6, #4]
 80043ca:	616b      	str	r3, [r5, #20]
 80043cc:	612b      	str	r3, [r5, #16]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	f047 0201 	orr.w	r2, r7, #1
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	5037      	str	r7, [r6, r0]
 80043da:	e7e1      	b.n	80043a0 <_malloc_r+0x64>
 80043dc:	0a63      	lsrs	r3, r4, #9
 80043de:	d02a      	beq.n	8004436 <_malloc_r+0xfa>
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d812      	bhi.n	800440a <_malloc_r+0xce>
 80043e4:	09a3      	lsrs	r3, r4, #6
 80043e6:	3338      	adds	r3, #56	; 0x38
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80043ee:	6856      	ldr	r6, [r2, #4]
 80043f0:	f1a2 0008 	sub.w	r0, r2, #8
 80043f4:	4286      	cmp	r6, r0
 80043f6:	d006      	beq.n	8004406 <_malloc_r+0xca>
 80043f8:	6872      	ldr	r2, [r6, #4]
 80043fa:	f022 0203 	bic.w	r2, r2, #3
 80043fe:	1b11      	subs	r1, r2, r4
 8004400:	290f      	cmp	r1, #15
 8004402:	dd1c      	ble.n	800443e <_malloc_r+0x102>
 8004404:	3b01      	subs	r3, #1
 8004406:	3301      	adds	r3, #1
 8004408:	e7d0      	b.n	80043ac <_malloc_r+0x70>
 800440a:	2b14      	cmp	r3, #20
 800440c:	d801      	bhi.n	8004412 <_malloc_r+0xd6>
 800440e:	335b      	adds	r3, #91	; 0x5b
 8004410:	e7ea      	b.n	80043e8 <_malloc_r+0xac>
 8004412:	2b54      	cmp	r3, #84	; 0x54
 8004414:	d802      	bhi.n	800441c <_malloc_r+0xe0>
 8004416:	0b23      	lsrs	r3, r4, #12
 8004418:	336e      	adds	r3, #110	; 0x6e
 800441a:	e7e5      	b.n	80043e8 <_malloc_r+0xac>
 800441c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004420:	d802      	bhi.n	8004428 <_malloc_r+0xec>
 8004422:	0be3      	lsrs	r3, r4, #15
 8004424:	3377      	adds	r3, #119	; 0x77
 8004426:	e7df      	b.n	80043e8 <_malloc_r+0xac>
 8004428:	f240 5254 	movw	r2, #1364	; 0x554
 800442c:	4293      	cmp	r3, r2
 800442e:	d804      	bhi.n	800443a <_malloc_r+0xfe>
 8004430:	0ca3      	lsrs	r3, r4, #18
 8004432:	337c      	adds	r3, #124	; 0x7c
 8004434:	e7d8      	b.n	80043e8 <_malloc_r+0xac>
 8004436:	233f      	movs	r3, #63	; 0x3f
 8004438:	e7d6      	b.n	80043e8 <_malloc_r+0xac>
 800443a:	237e      	movs	r3, #126	; 0x7e
 800443c:	e7d4      	b.n	80043e8 <_malloc_r+0xac>
 800443e:	2900      	cmp	r1, #0
 8004440:	68f1      	ldr	r1, [r6, #12]
 8004442:	db04      	blt.n	800444e <_malloc_r+0x112>
 8004444:	68b3      	ldr	r3, [r6, #8]
 8004446:	60d9      	str	r1, [r3, #12]
 8004448:	608b      	str	r3, [r1, #8]
 800444a:	18b3      	adds	r3, r6, r2
 800444c:	e7a4      	b.n	8004398 <_malloc_r+0x5c>
 800444e:	460e      	mov	r6, r1
 8004450:	e7d0      	b.n	80043f4 <_malloc_r+0xb8>
 8004452:	2f00      	cmp	r7, #0
 8004454:	616a      	str	r2, [r5, #20]
 8004456:	612a      	str	r2, [r5, #16]
 8004458:	db05      	blt.n	8004466 <_malloc_r+0x12a>
 800445a:	4430      	add	r0, r6
 800445c:	6843      	ldr	r3, [r0, #4]
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	6043      	str	r3, [r0, #4]
 8004464:	e79c      	b.n	80043a0 <_malloc_r+0x64>
 8004466:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800446a:	d244      	bcs.n	80044f6 <_malloc_r+0x1ba>
 800446c:	2201      	movs	r2, #1
 800446e:	08c0      	lsrs	r0, r0, #3
 8004470:	1087      	asrs	r7, r0, #2
 8004472:	fa02 f707 	lsl.w	r7, r2, r7
 8004476:	686a      	ldr	r2, [r5, #4]
 8004478:	3001      	adds	r0, #1
 800447a:	433a      	orrs	r2, r7
 800447c:	606a      	str	r2, [r5, #4]
 800447e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004482:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004486:	3a08      	subs	r2, #8
 8004488:	60f2      	str	r2, [r6, #12]
 800448a:	60b7      	str	r7, [r6, #8]
 800448c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004490:	60fe      	str	r6, [r7, #12]
 8004492:	2001      	movs	r0, #1
 8004494:	109a      	asrs	r2, r3, #2
 8004496:	fa00 f202 	lsl.w	r2, r0, r2
 800449a:	6868      	ldr	r0, [r5, #4]
 800449c:	4282      	cmp	r2, r0
 800449e:	f200 809f 	bhi.w	80045e0 <_malloc_r+0x2a4>
 80044a2:	4202      	tst	r2, r0
 80044a4:	d106      	bne.n	80044b4 <_malloc_r+0x178>
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	0052      	lsls	r2, r2, #1
 80044ac:	4202      	tst	r2, r0
 80044ae:	f103 0304 	add.w	r3, r3, #4
 80044b2:	d0fa      	beq.n	80044aa <_malloc_r+0x16e>
 80044b4:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80044b8:	46e0      	mov	r8, ip
 80044ba:	469e      	mov	lr, r3
 80044bc:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80044c0:	4546      	cmp	r6, r8
 80044c2:	d153      	bne.n	800456c <_malloc_r+0x230>
 80044c4:	f10e 0e01 	add.w	lr, lr, #1
 80044c8:	f01e 0f03 	tst.w	lr, #3
 80044cc:	f108 0808 	add.w	r8, r8, #8
 80044d0:	d1f4      	bne.n	80044bc <_malloc_r+0x180>
 80044d2:	0798      	lsls	r0, r3, #30
 80044d4:	d179      	bne.n	80045ca <_malloc_r+0x28e>
 80044d6:	686b      	ldr	r3, [r5, #4]
 80044d8:	ea23 0302 	bic.w	r3, r3, r2
 80044dc:	606b      	str	r3, [r5, #4]
 80044de:	6868      	ldr	r0, [r5, #4]
 80044e0:	0052      	lsls	r2, r2, #1
 80044e2:	4282      	cmp	r2, r0
 80044e4:	d87c      	bhi.n	80045e0 <_malloc_r+0x2a4>
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	d07a      	beq.n	80045e0 <_malloc_r+0x2a4>
 80044ea:	4673      	mov	r3, lr
 80044ec:	4202      	tst	r2, r0
 80044ee:	d1e1      	bne.n	80044b4 <_malloc_r+0x178>
 80044f0:	3304      	adds	r3, #4
 80044f2:	0052      	lsls	r2, r2, #1
 80044f4:	e7fa      	b.n	80044ec <_malloc_r+0x1b0>
 80044f6:	0a42      	lsrs	r2, r0, #9
 80044f8:	2a04      	cmp	r2, #4
 80044fa:	d815      	bhi.n	8004528 <_malloc_r+0x1ec>
 80044fc:	0982      	lsrs	r2, r0, #6
 80044fe:	3238      	adds	r2, #56	; 0x38
 8004500:	1c57      	adds	r7, r2, #1
 8004502:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004506:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800450a:	45be      	cmp	lr, r7
 800450c:	d126      	bne.n	800455c <_malloc_r+0x220>
 800450e:	2001      	movs	r0, #1
 8004510:	1092      	asrs	r2, r2, #2
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	6868      	ldr	r0, [r5, #4]
 8004518:	4310      	orrs	r0, r2
 800451a:	6068      	str	r0, [r5, #4]
 800451c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8004520:	60b7      	str	r7, [r6, #8]
 8004522:	f8ce 6008 	str.w	r6, [lr, #8]
 8004526:	e7b3      	b.n	8004490 <_malloc_r+0x154>
 8004528:	2a14      	cmp	r2, #20
 800452a:	d801      	bhi.n	8004530 <_malloc_r+0x1f4>
 800452c:	325b      	adds	r2, #91	; 0x5b
 800452e:	e7e7      	b.n	8004500 <_malloc_r+0x1c4>
 8004530:	2a54      	cmp	r2, #84	; 0x54
 8004532:	d802      	bhi.n	800453a <_malloc_r+0x1fe>
 8004534:	0b02      	lsrs	r2, r0, #12
 8004536:	326e      	adds	r2, #110	; 0x6e
 8004538:	e7e2      	b.n	8004500 <_malloc_r+0x1c4>
 800453a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800453e:	d802      	bhi.n	8004546 <_malloc_r+0x20a>
 8004540:	0bc2      	lsrs	r2, r0, #15
 8004542:	3277      	adds	r2, #119	; 0x77
 8004544:	e7dc      	b.n	8004500 <_malloc_r+0x1c4>
 8004546:	f240 5754 	movw	r7, #1364	; 0x554
 800454a:	42ba      	cmp	r2, r7
 800454c:	bf9a      	itte	ls
 800454e:	0c82      	lsrls	r2, r0, #18
 8004550:	327c      	addls	r2, #124	; 0x7c
 8004552:	227e      	movhi	r2, #126	; 0x7e
 8004554:	e7d4      	b.n	8004500 <_malloc_r+0x1c4>
 8004556:	68bf      	ldr	r7, [r7, #8]
 8004558:	45be      	cmp	lr, r7
 800455a:	d004      	beq.n	8004566 <_malloc_r+0x22a>
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	f022 0203 	bic.w	r2, r2, #3
 8004562:	4290      	cmp	r0, r2
 8004564:	d3f7      	bcc.n	8004556 <_malloc_r+0x21a>
 8004566:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800456a:	e7d7      	b.n	800451c <_malloc_r+0x1e0>
 800456c:	6870      	ldr	r0, [r6, #4]
 800456e:	68f7      	ldr	r7, [r6, #12]
 8004570:	f020 0003 	bic.w	r0, r0, #3
 8004574:	eba0 0a04 	sub.w	sl, r0, r4
 8004578:	f1ba 0f0f 	cmp.w	sl, #15
 800457c:	dd10      	ble.n	80045a0 <_malloc_r+0x264>
 800457e:	68b2      	ldr	r2, [r6, #8]
 8004580:	1933      	adds	r3, r6, r4
 8004582:	f044 0401 	orr.w	r4, r4, #1
 8004586:	6074      	str	r4, [r6, #4]
 8004588:	60d7      	str	r7, [r2, #12]
 800458a:	60ba      	str	r2, [r7, #8]
 800458c:	f04a 0201 	orr.w	r2, sl, #1
 8004590:	616b      	str	r3, [r5, #20]
 8004592:	612b      	str	r3, [r5, #16]
 8004594:	60d9      	str	r1, [r3, #12]
 8004596:	6099      	str	r1, [r3, #8]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	f846 a000 	str.w	sl, [r6, r0]
 800459e:	e6ff      	b.n	80043a0 <_malloc_r+0x64>
 80045a0:	f1ba 0f00 	cmp.w	sl, #0
 80045a4:	db0f      	blt.n	80045c6 <_malloc_r+0x28a>
 80045a6:	4430      	add	r0, r6
 80045a8:	6843      	ldr	r3, [r0, #4]
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6043      	str	r3, [r0, #4]
 80045b0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80045b4:	4648      	mov	r0, r9
 80045b6:	60df      	str	r7, [r3, #12]
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	f000 f8eb 	bl	8004794 <__malloc_unlock>
 80045be:	4630      	mov	r0, r6
 80045c0:	b003      	add	sp, #12
 80045c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c6:	463e      	mov	r6, r7
 80045c8:	e77a      	b.n	80044c0 <_malloc_r+0x184>
 80045ca:	f85c 0908 	ldr.w	r0, [ip], #-8
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4584      	cmp	ip, r0
 80045d2:	f43f af7e 	beq.w	80044d2 <_malloc_r+0x196>
 80045d6:	e782      	b.n	80044de <_malloc_r+0x1a2>
 80045d8:	20000108 	.word	0x20000108
 80045dc:	20000110 	.word	0x20000110
 80045e0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80045e4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80045e8:	f026 0603 	bic.w	r6, r6, #3
 80045ec:	42b4      	cmp	r4, r6
 80045ee:	d803      	bhi.n	80045f8 <_malloc_r+0x2bc>
 80045f0:	1b33      	subs	r3, r6, r4
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	f300 8095 	bgt.w	8004722 <_malloc_r+0x3e6>
 80045f8:	4a4f      	ldr	r2, [pc, #316]	; (8004738 <_malloc_r+0x3fc>)
 80045fa:	eb0b 0306 	add.w	r3, fp, r6
 80045fe:	6817      	ldr	r7, [r2, #0]
 8004600:	4a4e      	ldr	r2, [pc, #312]	; (800473c <_malloc_r+0x400>)
 8004602:	3710      	adds	r7, #16
 8004604:	6811      	ldr	r1, [r2, #0]
 8004606:	4427      	add	r7, r4
 8004608:	3101      	adds	r1, #1
 800460a:	d005      	beq.n	8004618 <_malloc_r+0x2dc>
 800460c:	494c      	ldr	r1, [pc, #304]	; (8004740 <_malloc_r+0x404>)
 800460e:	3901      	subs	r1, #1
 8004610:	440f      	add	r7, r1
 8004612:	3101      	adds	r1, #1
 8004614:	4249      	negs	r1, r1
 8004616:	400f      	ands	r7, r1
 8004618:	4639      	mov	r1, r7
 800461a:	4648      	mov	r0, r9
 800461c:	9201      	str	r2, [sp, #4]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	f000 fb90 	bl	8004d44 <_sbrk_r>
 8004624:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004628:	4680      	mov	r8, r0
 800462a:	d055      	beq.n	80046d8 <_malloc_r+0x39c>
 800462c:	9b00      	ldr	r3, [sp, #0]
 800462e:	9a01      	ldr	r2, [sp, #4]
 8004630:	4283      	cmp	r3, r0
 8004632:	d901      	bls.n	8004638 <_malloc_r+0x2fc>
 8004634:	45ab      	cmp	fp, r5
 8004636:	d14f      	bne.n	80046d8 <_malloc_r+0x39c>
 8004638:	4842      	ldr	r0, [pc, #264]	; (8004744 <_malloc_r+0x408>)
 800463a:	4543      	cmp	r3, r8
 800463c:	6801      	ldr	r1, [r0, #0]
 800463e:	4682      	mov	sl, r0
 8004640:	eb07 0e01 	add.w	lr, r7, r1
 8004644:	f8c0 e000 	str.w	lr, [r0]
 8004648:	493f      	ldr	r1, [pc, #252]	; (8004748 <_malloc_r+0x40c>)
 800464a:	d113      	bne.n	8004674 <_malloc_r+0x338>
 800464c:	420b      	tst	r3, r1
 800464e:	d111      	bne.n	8004674 <_malloc_r+0x338>
 8004650:	68ab      	ldr	r3, [r5, #8]
 8004652:	443e      	add	r6, r7
 8004654:	f046 0601 	orr.w	r6, r6, #1
 8004658:	605e      	str	r6, [r3, #4]
 800465a:	4a3c      	ldr	r2, [pc, #240]	; (800474c <_malloc_r+0x410>)
 800465c:	f8da 3000 	ldr.w	r3, [sl]
 8004660:	6811      	ldr	r1, [r2, #0]
 8004662:	428b      	cmp	r3, r1
 8004664:	bf88      	it	hi
 8004666:	6013      	strhi	r3, [r2, #0]
 8004668:	4a39      	ldr	r2, [pc, #228]	; (8004750 <_malloc_r+0x414>)
 800466a:	6811      	ldr	r1, [r2, #0]
 800466c:	428b      	cmp	r3, r1
 800466e:	bf88      	it	hi
 8004670:	6013      	strhi	r3, [r2, #0]
 8004672:	e031      	b.n	80046d8 <_malloc_r+0x39c>
 8004674:	6810      	ldr	r0, [r2, #0]
 8004676:	3001      	adds	r0, #1
 8004678:	bf1b      	ittet	ne
 800467a:	eba8 0303 	subne.w	r3, r8, r3
 800467e:	4473      	addne	r3, lr
 8004680:	f8c2 8000 	streq.w	r8, [r2]
 8004684:	f8ca 3000 	strne.w	r3, [sl]
 8004688:	f018 0007 	ands.w	r0, r8, #7
 800468c:	bf1c      	itt	ne
 800468e:	f1c0 0008 	rsbne	r0, r0, #8
 8004692:	4480      	addne	r8, r0
 8004694:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <_malloc_r+0x404>)
 8004696:	4447      	add	r7, r8
 8004698:	4418      	add	r0, r3
 800469a:	400f      	ands	r7, r1
 800469c:	1bc7      	subs	r7, r0, r7
 800469e:	4639      	mov	r1, r7
 80046a0:	4648      	mov	r0, r9
 80046a2:	f000 fb4f 	bl	8004d44 <_sbrk_r>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	bf04      	itt	eq
 80046aa:	4640      	moveq	r0, r8
 80046ac:	2700      	moveq	r7, #0
 80046ae:	f8da 3000 	ldr.w	r3, [sl]
 80046b2:	eba0 0008 	sub.w	r0, r0, r8
 80046b6:	443b      	add	r3, r7
 80046b8:	4407      	add	r7, r0
 80046ba:	f047 0701 	orr.w	r7, r7, #1
 80046be:	45ab      	cmp	fp, r5
 80046c0:	f8c5 8008 	str.w	r8, [r5, #8]
 80046c4:	f8ca 3000 	str.w	r3, [sl]
 80046c8:	f8c8 7004 	str.w	r7, [r8, #4]
 80046cc:	d0c5      	beq.n	800465a <_malloc_r+0x31e>
 80046ce:	2e0f      	cmp	r6, #15
 80046d0:	d810      	bhi.n	80046f4 <_malloc_r+0x3b8>
 80046d2:	2301      	movs	r3, #1
 80046d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80046d8:	68ab      	ldr	r3, [r5, #8]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	f022 0203 	bic.w	r2, r2, #3
 80046e0:	4294      	cmp	r4, r2
 80046e2:	eba2 0304 	sub.w	r3, r2, r4
 80046e6:	d801      	bhi.n	80046ec <_malloc_r+0x3b0>
 80046e8:	2b0f      	cmp	r3, #15
 80046ea:	dc1a      	bgt.n	8004722 <_malloc_r+0x3e6>
 80046ec:	4648      	mov	r0, r9
 80046ee:	f000 f851 	bl	8004794 <__malloc_unlock>
 80046f2:	e630      	b.n	8004356 <_malloc_r+0x1a>
 80046f4:	2205      	movs	r2, #5
 80046f6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80046fa:	3e0c      	subs	r6, #12
 80046fc:	f026 0607 	bic.w	r6, r6, #7
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	4333      	orrs	r3, r6
 8004706:	f8cb 3004 	str.w	r3, [fp, #4]
 800470a:	2e0f      	cmp	r6, #15
 800470c:	eb0b 0306 	add.w	r3, fp, r6
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	d9a1      	bls.n	800465a <_malloc_r+0x31e>
 8004716:	f10b 0108 	add.w	r1, fp, #8
 800471a:	4648      	mov	r0, r9
 800471c:	f000 fc20 	bl	8004f60 <_free_r>
 8004720:	e79b      	b.n	800465a <_malloc_r+0x31e>
 8004722:	68ae      	ldr	r6, [r5, #8]
 8004724:	f044 0201 	orr.w	r2, r4, #1
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	4434      	add	r4, r6
 800472e:	6072      	str	r2, [r6, #4]
 8004730:	60ac      	str	r4, [r5, #8]
 8004732:	6063      	str	r3, [r4, #4]
 8004734:	e634      	b.n	80043a0 <_malloc_r+0x64>
 8004736:	bf00      	nop
 8004738:	200006d4 	.word	0x200006d4
 800473c:	20000510 	.word	0x20000510
 8004740:	00000080 	.word	0x00000080
 8004744:	200006a4 	.word	0x200006a4
 8004748:	0000007f 	.word	0x0000007f
 800474c:	200006cc 	.word	0x200006cc
 8004750:	200006d0 	.word	0x200006d0

08004754 <memchr>:
 8004754:	b510      	push	{r4, lr}
 8004756:	b2c9      	uxtb	r1, r1
 8004758:	4402      	add	r2, r0
 800475a:	4290      	cmp	r0, r2
 800475c:	4603      	mov	r3, r0
 800475e:	d101      	bne.n	8004764 <memchr+0x10>
 8004760:	2000      	movs	r0, #0
 8004762:	bd10      	pop	{r4, pc}
 8004764:	781c      	ldrb	r4, [r3, #0]
 8004766:	3001      	adds	r0, #1
 8004768:	428c      	cmp	r4, r1
 800476a:	d1f6      	bne.n	800475a <memchr+0x6>
 800476c:	4618      	mov	r0, r3
 800476e:	bd10      	pop	{r4, pc}

08004770 <memcpy>:
 8004770:	b510      	push	{r4, lr}
 8004772:	1e43      	subs	r3, r0, #1
 8004774:	440a      	add	r2, r1
 8004776:	4291      	cmp	r1, r2
 8004778:	d100      	bne.n	800477c <memcpy+0xc>
 800477a:	bd10      	pop	{r4, pc}
 800477c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004784:	e7f7      	b.n	8004776 <memcpy+0x6>
	...

08004788 <__malloc_lock>:
 8004788:	4801      	ldr	r0, [pc, #4]	; (8004790 <__malloc_lock+0x8>)
 800478a:	f000 bca5 	b.w	80050d8 <__retarget_lock_acquire_recursive>
 800478e:	bf00      	nop
 8004790:	20000722 	.word	0x20000722

08004794 <__malloc_unlock>:
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <__malloc_unlock+0x8>)
 8004796:	f000 bca0 	b.w	80050da <__retarget_lock_release_recursive>
 800479a:	bf00      	nop
 800479c:	20000722 	.word	0x20000722

080047a0 <_Balloc>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80047a4:	4604      	mov	r4, r0
 80047a6:	460e      	mov	r6, r1
 80047a8:	b93d      	cbnz	r5, 80047ba <_Balloc+0x1a>
 80047aa:	2010      	movs	r0, #16
 80047ac:	f7ff fdbe 	bl	800432c <malloc>
 80047b0:	6260      	str	r0, [r4, #36]	; 0x24
 80047b2:	6045      	str	r5, [r0, #4]
 80047b4:	6085      	str	r5, [r0, #8]
 80047b6:	6005      	str	r5, [r0, #0]
 80047b8:	60c5      	str	r5, [r0, #12]
 80047ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80047bc:	68eb      	ldr	r3, [r5, #12]
 80047be:	b183      	cbz	r3, 80047e2 <_Balloc+0x42>
 80047c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80047c8:	b9b8      	cbnz	r0, 80047fa <_Balloc+0x5a>
 80047ca:	2101      	movs	r1, #1
 80047cc:	fa01 f506 	lsl.w	r5, r1, r6
 80047d0:	1d6a      	adds	r2, r5, #5
 80047d2:	0092      	lsls	r2, r2, #2
 80047d4:	4620      	mov	r0, r4
 80047d6:	f000 fb3f 	bl	8004e58 <_calloc_r>
 80047da:	b160      	cbz	r0, 80047f6 <_Balloc+0x56>
 80047dc:	6046      	str	r6, [r0, #4]
 80047de:	6085      	str	r5, [r0, #8]
 80047e0:	e00e      	b.n	8004800 <_Balloc+0x60>
 80047e2:	2221      	movs	r2, #33	; 0x21
 80047e4:	2104      	movs	r1, #4
 80047e6:	4620      	mov	r0, r4
 80047e8:	f000 fb36 	bl	8004e58 <_calloc_r>
 80047ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ee:	60e8      	str	r0, [r5, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e4      	bne.n	80047c0 <_Balloc+0x20>
 80047f6:	2000      	movs	r0, #0
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	6802      	ldr	r2, [r0, #0]
 80047fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004800:	2300      	movs	r3, #0
 8004802:	6103      	str	r3, [r0, #16]
 8004804:	60c3      	str	r3, [r0, #12]
 8004806:	bd70      	pop	{r4, r5, r6, pc}

08004808 <_Bfree>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800480c:	4606      	mov	r6, r0
 800480e:	460d      	mov	r5, r1
 8004810:	b93c      	cbnz	r4, 8004822 <_Bfree+0x1a>
 8004812:	2010      	movs	r0, #16
 8004814:	f7ff fd8a 	bl	800432c <malloc>
 8004818:	6270      	str	r0, [r6, #36]	; 0x24
 800481a:	6044      	str	r4, [r0, #4]
 800481c:	6084      	str	r4, [r0, #8]
 800481e:	6004      	str	r4, [r0, #0]
 8004820:	60c4      	str	r4, [r0, #12]
 8004822:	b13d      	cbz	r5, 8004834 <_Bfree+0x2c>
 8004824:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004826:	686a      	ldr	r2, [r5, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800482e:	6029      	str	r1, [r5, #0]
 8004830:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004834:	bd70      	pop	{r4, r5, r6, pc}

08004836 <__multadd>:
 8004836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800483a:	461f      	mov	r7, r3
 800483c:	4606      	mov	r6, r0
 800483e:	460c      	mov	r4, r1
 8004840:	2300      	movs	r3, #0
 8004842:	690d      	ldr	r5, [r1, #16]
 8004844:	f101 0e14 	add.w	lr, r1, #20
 8004848:	f8de 0000 	ldr.w	r0, [lr]
 800484c:	3301      	adds	r3, #1
 800484e:	b281      	uxth	r1, r0
 8004850:	fb02 7101 	mla	r1, r2, r1, r7
 8004854:	0c00      	lsrs	r0, r0, #16
 8004856:	0c0f      	lsrs	r7, r1, #16
 8004858:	fb02 7000 	mla	r0, r2, r0, r7
 800485c:	b289      	uxth	r1, r1
 800485e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004862:	429d      	cmp	r5, r3
 8004864:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004868:	f84e 1b04 	str.w	r1, [lr], #4
 800486c:	dcec      	bgt.n	8004848 <__multadd+0x12>
 800486e:	b1d7      	cbz	r7, 80048a6 <__multadd+0x70>
 8004870:	68a3      	ldr	r3, [r4, #8]
 8004872:	429d      	cmp	r5, r3
 8004874:	db12      	blt.n	800489c <__multadd+0x66>
 8004876:	6861      	ldr	r1, [r4, #4]
 8004878:	4630      	mov	r0, r6
 800487a:	3101      	adds	r1, #1
 800487c:	f7ff ff90 	bl	80047a0 <_Balloc>
 8004880:	4680      	mov	r8, r0
 8004882:	6922      	ldr	r2, [r4, #16]
 8004884:	f104 010c 	add.w	r1, r4, #12
 8004888:	3202      	adds	r2, #2
 800488a:	0092      	lsls	r2, r2, #2
 800488c:	300c      	adds	r0, #12
 800488e:	f7ff ff6f 	bl	8004770 <memcpy>
 8004892:	4621      	mov	r1, r4
 8004894:	4630      	mov	r0, r6
 8004896:	f7ff ffb7 	bl	8004808 <_Bfree>
 800489a:	4644      	mov	r4, r8
 800489c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048a0:	3501      	adds	r5, #1
 80048a2:	615f      	str	r7, [r3, #20]
 80048a4:	6125      	str	r5, [r4, #16]
 80048a6:	4620      	mov	r0, r4
 80048a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048ac <__hi0bits>:
 80048ac:	0c02      	lsrs	r2, r0, #16
 80048ae:	0412      	lsls	r2, r2, #16
 80048b0:	4603      	mov	r3, r0
 80048b2:	b9b2      	cbnz	r2, 80048e2 <__hi0bits+0x36>
 80048b4:	0403      	lsls	r3, r0, #16
 80048b6:	2010      	movs	r0, #16
 80048b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80048bc:	bf04      	itt	eq
 80048be:	021b      	lsleq	r3, r3, #8
 80048c0:	3008      	addeq	r0, #8
 80048c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80048c6:	bf04      	itt	eq
 80048c8:	011b      	lsleq	r3, r3, #4
 80048ca:	3004      	addeq	r0, #4
 80048cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80048d0:	bf04      	itt	eq
 80048d2:	009b      	lsleq	r3, r3, #2
 80048d4:	3002      	addeq	r0, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db06      	blt.n	80048e8 <__hi0bits+0x3c>
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	d503      	bpl.n	80048e6 <__hi0bits+0x3a>
 80048de:	3001      	adds	r0, #1
 80048e0:	4770      	bx	lr
 80048e2:	2000      	movs	r0, #0
 80048e4:	e7e8      	b.n	80048b8 <__hi0bits+0xc>
 80048e6:	2020      	movs	r0, #32
 80048e8:	4770      	bx	lr

080048ea <__lo0bits>:
 80048ea:	6803      	ldr	r3, [r0, #0]
 80048ec:	4601      	mov	r1, r0
 80048ee:	f013 0207 	ands.w	r2, r3, #7
 80048f2:	d00b      	beq.n	800490c <__lo0bits+0x22>
 80048f4:	07da      	lsls	r2, r3, #31
 80048f6:	d423      	bmi.n	8004940 <__lo0bits+0x56>
 80048f8:	0798      	lsls	r0, r3, #30
 80048fa:	bf49      	itett	mi
 80048fc:	085b      	lsrmi	r3, r3, #1
 80048fe:	089b      	lsrpl	r3, r3, #2
 8004900:	2001      	movmi	r0, #1
 8004902:	600b      	strmi	r3, [r1, #0]
 8004904:	bf5c      	itt	pl
 8004906:	600b      	strpl	r3, [r1, #0]
 8004908:	2002      	movpl	r0, #2
 800490a:	4770      	bx	lr
 800490c:	b298      	uxth	r0, r3
 800490e:	b9a8      	cbnz	r0, 800493c <__lo0bits+0x52>
 8004910:	2010      	movs	r0, #16
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004918:	bf04      	itt	eq
 800491a:	0a1b      	lsreq	r3, r3, #8
 800491c:	3008      	addeq	r0, #8
 800491e:	071a      	lsls	r2, r3, #28
 8004920:	bf04      	itt	eq
 8004922:	091b      	lsreq	r3, r3, #4
 8004924:	3004      	addeq	r0, #4
 8004926:	079a      	lsls	r2, r3, #30
 8004928:	bf04      	itt	eq
 800492a:	089b      	lsreq	r3, r3, #2
 800492c:	3002      	addeq	r0, #2
 800492e:	07da      	lsls	r2, r3, #31
 8004930:	d402      	bmi.n	8004938 <__lo0bits+0x4e>
 8004932:	085b      	lsrs	r3, r3, #1
 8004934:	d006      	beq.n	8004944 <__lo0bits+0x5a>
 8004936:	3001      	adds	r0, #1
 8004938:	600b      	str	r3, [r1, #0]
 800493a:	4770      	bx	lr
 800493c:	4610      	mov	r0, r2
 800493e:	e7e9      	b.n	8004914 <__lo0bits+0x2a>
 8004940:	2000      	movs	r0, #0
 8004942:	4770      	bx	lr
 8004944:	2020      	movs	r0, #32
 8004946:	4770      	bx	lr

08004948 <__i2b>:
 8004948:	b510      	push	{r4, lr}
 800494a:	460c      	mov	r4, r1
 800494c:	2101      	movs	r1, #1
 800494e:	f7ff ff27 	bl	80047a0 <_Balloc>
 8004952:	2201      	movs	r2, #1
 8004954:	6144      	str	r4, [r0, #20]
 8004956:	6102      	str	r2, [r0, #16]
 8004958:	bd10      	pop	{r4, pc}

0800495a <__multiply>:
 800495a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495e:	4614      	mov	r4, r2
 8004960:	690a      	ldr	r2, [r1, #16]
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	4689      	mov	r9, r1
 8004966:	429a      	cmp	r2, r3
 8004968:	bfbe      	ittt	lt
 800496a:	460b      	movlt	r3, r1
 800496c:	46a1      	movlt	r9, r4
 800496e:	461c      	movlt	r4, r3
 8004970:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004974:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004978:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800497c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004980:	eb07 060a 	add.w	r6, r7, sl
 8004984:	429e      	cmp	r6, r3
 8004986:	bfc8      	it	gt
 8004988:	3101      	addgt	r1, #1
 800498a:	f7ff ff09 	bl	80047a0 <_Balloc>
 800498e:	f100 0514 	add.w	r5, r0, #20
 8004992:	462b      	mov	r3, r5
 8004994:	2200      	movs	r2, #0
 8004996:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800499a:	4543      	cmp	r3, r8
 800499c:	d316      	bcc.n	80049cc <__multiply+0x72>
 800499e:	f104 0214 	add.w	r2, r4, #20
 80049a2:	f109 0114 	add.w	r1, r9, #20
 80049a6:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80049aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	9c01      	ldr	r4, [sp, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	4294      	cmp	r4, r2
 80049b6:	d80c      	bhi.n	80049d2 <__multiply+0x78>
 80049b8:	2e00      	cmp	r6, #0
 80049ba:	dd03      	ble.n	80049c4 <__multiply+0x6a>
 80049bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d054      	beq.n	8004a6e <__multiply+0x114>
 80049c4:	6106      	str	r6, [r0, #16]
 80049c6:	b003      	add	sp, #12
 80049c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049cc:	f843 2b04 	str.w	r2, [r3], #4
 80049d0:	e7e3      	b.n	800499a <__multiply+0x40>
 80049d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80049d6:	3204      	adds	r2, #4
 80049d8:	f1ba 0f00 	cmp.w	sl, #0
 80049dc:	d020      	beq.n	8004a20 <__multiply+0xc6>
 80049de:	46ae      	mov	lr, r5
 80049e0:	4689      	mov	r9, r1
 80049e2:	f04f 0c00 	mov.w	ip, #0
 80049e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80049ea:	f8be b000 	ldrh.w	fp, [lr]
 80049ee:	b2a3      	uxth	r3, r4
 80049f0:	fb0a b303 	mla	r3, sl, r3, fp
 80049f4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80049f8:	f8de 4000 	ldr.w	r4, [lr]
 80049fc:	4463      	add	r3, ip
 80049fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a02:	fb0a c40b 	mla	r4, sl, fp, ip
 8004a06:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a10:	454f      	cmp	r7, r9
 8004a12:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a16:	f84e 3b04 	str.w	r3, [lr], #4
 8004a1a:	d8e4      	bhi.n	80049e6 <__multiply+0x8c>
 8004a1c:	f8ce c000 	str.w	ip, [lr]
 8004a20:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004a24:	f1b9 0f00 	cmp.w	r9, #0
 8004a28:	d01f      	beq.n	8004a6a <__multiply+0x110>
 8004a2a:	46ae      	mov	lr, r5
 8004a2c:	468c      	mov	ip, r1
 8004a2e:	f04f 0a00 	mov.w	sl, #0
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	f8bc 4000 	ldrh.w	r4, [ip]
 8004a38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	fb09 b404 	mla	r4, r9, r4, fp
 8004a42:	44a2      	add	sl, r4
 8004a44:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004a48:	f84e 3b04 	str.w	r3, [lr], #4
 8004a4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a50:	f8be 4000 	ldrh.w	r4, [lr]
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	fb09 4303 	mla	r3, r9, r3, r4
 8004a5a:	4567      	cmp	r7, ip
 8004a5c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004a60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a64:	d8e6      	bhi.n	8004a34 <__multiply+0xda>
 8004a66:	f8ce 3000 	str.w	r3, [lr]
 8004a6a:	3504      	adds	r5, #4
 8004a6c:	e7a0      	b.n	80049b0 <__multiply+0x56>
 8004a6e:	3e01      	subs	r6, #1
 8004a70:	e7a2      	b.n	80049b8 <__multiply+0x5e>
	...

08004a74 <__pow5mult>:
 8004a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a78:	4615      	mov	r5, r2
 8004a7a:	f012 0203 	ands.w	r2, r2, #3
 8004a7e:	4606      	mov	r6, r0
 8004a80:	460f      	mov	r7, r1
 8004a82:	d007      	beq.n	8004a94 <__pow5mult+0x20>
 8004a84:	4c21      	ldr	r4, [pc, #132]	; (8004b0c <__pow5mult+0x98>)
 8004a86:	3a01      	subs	r2, #1
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a8e:	f7ff fed2 	bl	8004836 <__multadd>
 8004a92:	4607      	mov	r7, r0
 8004a94:	10ad      	asrs	r5, r5, #2
 8004a96:	d035      	beq.n	8004b04 <__pow5mult+0x90>
 8004a98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a9a:	b93c      	cbnz	r4, 8004aac <__pow5mult+0x38>
 8004a9c:	2010      	movs	r0, #16
 8004a9e:	f7ff fc45 	bl	800432c <malloc>
 8004aa2:	6270      	str	r0, [r6, #36]	; 0x24
 8004aa4:	6044      	str	r4, [r0, #4]
 8004aa6:	6084      	str	r4, [r0, #8]
 8004aa8:	6004      	str	r4, [r0, #0]
 8004aaa:	60c4      	str	r4, [r0, #12]
 8004aac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ab4:	b94c      	cbnz	r4, 8004aca <__pow5mult+0x56>
 8004ab6:	f240 2171 	movw	r1, #625	; 0x271
 8004aba:	4630      	mov	r0, r6
 8004abc:	f7ff ff44 	bl	8004948 <__i2b>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ac8:	6003      	str	r3, [r0, #0]
 8004aca:	f04f 0800 	mov.w	r8, #0
 8004ace:	07eb      	lsls	r3, r5, #31
 8004ad0:	d50a      	bpl.n	8004ae8 <__pow5mult+0x74>
 8004ad2:	4639      	mov	r1, r7
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f7ff ff3f 	bl	800495a <__multiply>
 8004adc:	4681      	mov	r9, r0
 8004ade:	4639      	mov	r1, r7
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7ff fe91 	bl	8004808 <_Bfree>
 8004ae6:	464f      	mov	r7, r9
 8004ae8:	106d      	asrs	r5, r5, #1
 8004aea:	d00b      	beq.n	8004b04 <__pow5mult+0x90>
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	b938      	cbnz	r0, 8004b00 <__pow5mult+0x8c>
 8004af0:	4622      	mov	r2, r4
 8004af2:	4621      	mov	r1, r4
 8004af4:	4630      	mov	r0, r6
 8004af6:	f7ff ff30 	bl	800495a <__multiply>
 8004afa:	6020      	str	r0, [r4, #0]
 8004afc:	f8c0 8000 	str.w	r8, [r0]
 8004b00:	4604      	mov	r4, r0
 8004b02:	e7e4      	b.n	8004ace <__pow5mult+0x5a>
 8004b04:	4638      	mov	r0, r7
 8004b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b0a:	bf00      	nop
 8004b0c:	08005980 	.word	0x08005980

08004b10 <__lshift>:
 8004b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b14:	460c      	mov	r4, r1
 8004b16:	4607      	mov	r7, r0
 8004b18:	4616      	mov	r6, r2
 8004b1a:	6923      	ldr	r3, [r4, #16]
 8004b1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b20:	eb0a 0903 	add.w	r9, sl, r3
 8004b24:	6849      	ldr	r1, [r1, #4]
 8004b26:	68a3      	ldr	r3, [r4, #8]
 8004b28:	f109 0501 	add.w	r5, r9, #1
 8004b2c:	42ab      	cmp	r3, r5
 8004b2e:	db31      	blt.n	8004b94 <__lshift+0x84>
 8004b30:	4638      	mov	r0, r7
 8004b32:	f7ff fe35 	bl	80047a0 <_Balloc>
 8004b36:	2200      	movs	r2, #0
 8004b38:	4680      	mov	r8, r0
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	f100 0314 	add.w	r3, r0, #20
 8004b40:	4552      	cmp	r2, sl
 8004b42:	db2a      	blt.n	8004b9a <__lshift+0x8a>
 8004b44:	6920      	ldr	r0, [r4, #16]
 8004b46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b4a:	f104 0114 	add.w	r1, r4, #20
 8004b4e:	f016 021f 	ands.w	r2, r6, #31
 8004b52:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004b56:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004b5a:	d022      	beq.n	8004ba2 <__lshift+0x92>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8004b62:	680e      	ldr	r6, [r1, #0]
 8004b64:	4096      	lsls	r6, r2
 8004b66:	4330      	orrs	r0, r6
 8004b68:	f843 0b04 	str.w	r0, [r3], #4
 8004b6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b70:	458e      	cmp	lr, r1
 8004b72:	fa20 f00c 	lsr.w	r0, r0, ip
 8004b76:	d8f4      	bhi.n	8004b62 <__lshift+0x52>
 8004b78:	6018      	str	r0, [r3, #0]
 8004b7a:	b108      	cbz	r0, 8004b80 <__lshift+0x70>
 8004b7c:	f109 0502 	add.w	r5, r9, #2
 8004b80:	3d01      	subs	r5, #1
 8004b82:	4638      	mov	r0, r7
 8004b84:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b88:	4621      	mov	r1, r4
 8004b8a:	f7ff fe3d 	bl	8004808 <_Bfree>
 8004b8e:	4640      	mov	r0, r8
 8004b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b94:	3101      	adds	r1, #1
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	e7c8      	b.n	8004b2c <__lshift+0x1c>
 8004b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004b9e:	3201      	adds	r2, #1
 8004ba0:	e7ce      	b.n	8004b40 <__lshift+0x30>
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	f851 2b04 	ldr.w	r2, [r1], #4
 8004ba8:	458e      	cmp	lr, r1
 8004baa:	f843 2f04 	str.w	r2, [r3, #4]!
 8004bae:	d8f9      	bhi.n	8004ba4 <__lshift+0x94>
 8004bb0:	e7e6      	b.n	8004b80 <__lshift+0x70>

08004bb2 <__mcmp>:
 8004bb2:	6903      	ldr	r3, [r0, #16]
 8004bb4:	690a      	ldr	r2, [r1, #16]
 8004bb6:	b530      	push	{r4, r5, lr}
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	d10c      	bne.n	8004bd6 <__mcmp+0x24>
 8004bbc:	0092      	lsls	r2, r2, #2
 8004bbe:	3014      	adds	r0, #20
 8004bc0:	3114      	adds	r1, #20
 8004bc2:	1884      	adds	r4, r0, r2
 8004bc4:	4411      	add	r1, r2
 8004bc6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004bca:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004bce:	4295      	cmp	r5, r2
 8004bd0:	d003      	beq.n	8004bda <__mcmp+0x28>
 8004bd2:	d305      	bcc.n	8004be0 <__mcmp+0x2e>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	bd30      	pop	{r4, r5, pc}
 8004bda:	42a0      	cmp	r0, r4
 8004bdc:	d3f3      	bcc.n	8004bc6 <__mcmp+0x14>
 8004bde:	e7fa      	b.n	8004bd6 <__mcmp+0x24>
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	e7f7      	b.n	8004bd6 <__mcmp+0x24>

08004be6 <__mdiff>:
 8004be6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bea:	460d      	mov	r5, r1
 8004bec:	4607      	mov	r7, r0
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	4614      	mov	r4, r2
 8004bf4:	f7ff ffdd 	bl	8004bb2 <__mcmp>
 8004bf8:	1e06      	subs	r6, r0, #0
 8004bfa:	d108      	bne.n	8004c0e <__mdiff+0x28>
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f7ff fdce 	bl	80047a0 <_Balloc>
 8004c04:	2301      	movs	r3, #1
 8004c06:	6146      	str	r6, [r0, #20]
 8004c08:	6103      	str	r3, [r0, #16]
 8004c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0e:	bfa4      	itt	ge
 8004c10:	4623      	movge	r3, r4
 8004c12:	462c      	movge	r4, r5
 8004c14:	4638      	mov	r0, r7
 8004c16:	6861      	ldr	r1, [r4, #4]
 8004c18:	bfa6      	itte	ge
 8004c1a:	461d      	movge	r5, r3
 8004c1c:	2600      	movge	r6, #0
 8004c1e:	2601      	movlt	r6, #1
 8004c20:	f7ff fdbe 	bl	80047a0 <_Balloc>
 8004c24:	f04f 0c00 	mov.w	ip, #0
 8004c28:	60c6      	str	r6, [r0, #12]
 8004c2a:	692b      	ldr	r3, [r5, #16]
 8004c2c:	6926      	ldr	r6, [r4, #16]
 8004c2e:	f104 0214 	add.w	r2, r4, #20
 8004c32:	f105 0914 	add.w	r9, r5, #20
 8004c36:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004c3a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004c3e:	f100 0114 	add.w	r1, r0, #20
 8004c42:	f852 ab04 	ldr.w	sl, [r2], #4
 8004c46:	f859 5b04 	ldr.w	r5, [r9], #4
 8004c4a:	fa1f f38a 	uxth.w	r3, sl
 8004c4e:	4463      	add	r3, ip
 8004c50:	b2ac      	uxth	r4, r5
 8004c52:	1b1b      	subs	r3, r3, r4
 8004c54:	0c2c      	lsrs	r4, r5, #16
 8004c56:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004c5a:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004c64:	45c8      	cmp	r8, r9
 8004c66:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004c6a:	4696      	mov	lr, r2
 8004c6c:	f841 4b04 	str.w	r4, [r1], #4
 8004c70:	d8e7      	bhi.n	8004c42 <__mdiff+0x5c>
 8004c72:	45be      	cmp	lr, r7
 8004c74:	d305      	bcc.n	8004c82 <__mdiff+0x9c>
 8004c76:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004c7a:	b18b      	cbz	r3, 8004ca0 <__mdiff+0xba>
 8004c7c:	6106      	str	r6, [r0, #16]
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004c86:	b2a2      	uxth	r2, r4
 8004c88:	4462      	add	r2, ip
 8004c8a:	1413      	asrs	r3, r2, #16
 8004c8c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004c90:	b292      	uxth	r2, r2
 8004c92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004c9a:	f841 2b04 	str.w	r2, [r1], #4
 8004c9e:	e7e8      	b.n	8004c72 <__mdiff+0x8c>
 8004ca0:	3e01      	subs	r6, #1
 8004ca2:	e7e8      	b.n	8004c76 <__mdiff+0x90>

08004ca4 <__d2b>:
 8004ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004ca8:	461c      	mov	r4, r3
 8004caa:	2101      	movs	r1, #1
 8004cac:	4690      	mov	r8, r2
 8004cae:	9e08      	ldr	r6, [sp, #32]
 8004cb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004cb2:	f7ff fd75 	bl	80047a0 <_Balloc>
 8004cb6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004cba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004cbe:	4607      	mov	r7, r0
 8004cc0:	bb34      	cbnz	r4, 8004d10 <__d2b+0x6c>
 8004cc2:	9201      	str	r2, [sp, #4]
 8004cc4:	f1b8 0f00 	cmp.w	r8, #0
 8004cc8:	d027      	beq.n	8004d1a <__d2b+0x76>
 8004cca:	a802      	add	r0, sp, #8
 8004ccc:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004cd0:	f7ff fe0b 	bl	80048ea <__lo0bits>
 8004cd4:	9900      	ldr	r1, [sp, #0]
 8004cd6:	b1f0      	cbz	r0, 8004d16 <__d2b+0x72>
 8004cd8:	9a01      	ldr	r2, [sp, #4]
 8004cda:	f1c0 0320 	rsb	r3, r0, #32
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	40c2      	lsrs	r2, r0
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	9201      	str	r2, [sp, #4]
 8004cea:	9b01      	ldr	r3, [sp, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf14      	ite	ne
 8004cf0:	2102      	movne	r1, #2
 8004cf2:	2101      	moveq	r1, #1
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	6139      	str	r1, [r7, #16]
 8004cf8:	b1c4      	cbz	r4, 8004d2c <__d2b+0x88>
 8004cfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004cfe:	4404      	add	r4, r0
 8004d00:	6034      	str	r4, [r6, #0]
 8004d02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d06:	6028      	str	r0, [r5, #0]
 8004d08:	4638      	mov	r0, r7
 8004d0a:	b002      	add	sp, #8
 8004d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d14:	e7d5      	b.n	8004cc2 <__d2b+0x1e>
 8004d16:	6179      	str	r1, [r7, #20]
 8004d18:	e7e7      	b.n	8004cea <__d2b+0x46>
 8004d1a:	a801      	add	r0, sp, #4
 8004d1c:	f7ff fde5 	bl	80048ea <__lo0bits>
 8004d20:	2101      	movs	r1, #1
 8004d22:	9b01      	ldr	r3, [sp, #4]
 8004d24:	6139      	str	r1, [r7, #16]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	3020      	adds	r0, #32
 8004d2a:	e7e5      	b.n	8004cf8 <__d2b+0x54>
 8004d2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004d34:	6030      	str	r0, [r6, #0]
 8004d36:	6918      	ldr	r0, [r3, #16]
 8004d38:	f7ff fdb8 	bl	80048ac <__hi0bits>
 8004d3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004d40:	e7e1      	b.n	8004d06 <__d2b+0x62>
	...

08004d44 <_sbrk_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	2300      	movs	r3, #0
 8004d48:	4c05      	ldr	r4, [pc, #20]	; (8004d60 <_sbrk_r+0x1c>)
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	f000 fd48 	bl	80057e4 <_sbrk>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_sbrk_r+0x1a>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_sbrk_r+0x1a>
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20000728 	.word	0x20000728

08004d64 <__ssprint_r>:
 8004d64:	6893      	ldr	r3, [r2, #8]
 8004d66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	4681      	mov	r9, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	4617      	mov	r7, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d060      	beq.n	8004e36 <__ssprint_r+0xd2>
 8004d74:	f04f 0b00 	mov.w	fp, #0
 8004d78:	465e      	mov	r6, fp
 8004d7a:	f8d2 a000 	ldr.w	sl, [r2]
 8004d7e:	b356      	cbz	r6, 8004dd6 <__ssprint_r+0x72>
 8004d80:	68a3      	ldr	r3, [r4, #8]
 8004d82:	429e      	cmp	r6, r3
 8004d84:	d344      	bcc.n	8004e10 <__ssprint_r+0xac>
 8004d86:	89a2      	ldrh	r2, [r4, #12]
 8004d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d8c:	d03e      	beq.n	8004e0c <__ssprint_r+0xa8>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	6825      	ldr	r5, [r4, #0]
 8004d92:	6921      	ldr	r1, [r4, #16]
 8004d94:	eba5 0801 	sub.w	r8, r5, r1
 8004d98:	6965      	ldr	r5, [r4, #20]
 8004d9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d9e:	fb95 f5f3 	sdiv	r5, r5, r3
 8004da2:	f108 0301 	add.w	r3, r8, #1
 8004da6:	4433      	add	r3, r6
 8004da8:	429d      	cmp	r5, r3
 8004daa:	bf38      	it	cc
 8004dac:	461d      	movcc	r5, r3
 8004dae:	0553      	lsls	r3, r2, #21
 8004db0:	d546      	bpl.n	8004e40 <__ssprint_r+0xdc>
 8004db2:	4629      	mov	r1, r5
 8004db4:	4648      	mov	r0, r9
 8004db6:	f7ff fac1 	bl	800433c <_malloc_r>
 8004dba:	b998      	cbnz	r0, 8004de4 <__ssprint_r+0x80>
 8004dbc:	230c      	movs	r3, #12
 8004dbe:	f8c9 3000 	str.w	r3, [r9]
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dcc:	81a3      	strh	r3, [r4, #12]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	e031      	b.n	8004e3a <__ssprint_r+0xd6>
 8004dd6:	f8da b000 	ldr.w	fp, [sl]
 8004dda:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004dde:	f10a 0a08 	add.w	sl, sl, #8
 8004de2:	e7cc      	b.n	8004d7e <__ssprint_r+0x1a>
 8004de4:	4642      	mov	r2, r8
 8004de6:	6921      	ldr	r1, [r4, #16]
 8004de8:	9001      	str	r0, [sp, #4]
 8004dea:	f7ff fcc1 	bl	8004770 <memcpy>
 8004dee:	89a2      	ldrh	r2, [r4, #12]
 8004df0:	9b01      	ldr	r3, [sp, #4]
 8004df2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004df6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dfa:	81a2      	strh	r2, [r4, #12]
 8004dfc:	6123      	str	r3, [r4, #16]
 8004dfe:	4443      	add	r3, r8
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	4633      	mov	r3, r6
 8004e04:	6165      	str	r5, [r4, #20]
 8004e06:	eba5 0508 	sub.w	r5, r5, r8
 8004e0a:	60a5      	str	r5, [r4, #8]
 8004e0c:	429e      	cmp	r6, r3
 8004e0e:	d200      	bcs.n	8004e12 <__ssprint_r+0xae>
 8004e10:	4633      	mov	r3, r6
 8004e12:	461a      	mov	r2, r3
 8004e14:	4659      	mov	r1, fp
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	f000 f971 	bl	8005100 <memmove>
 8004e1e:	68a2      	ldr	r2, [r4, #8]
 8004e20:	9b01      	ldr	r3, [sp, #4]
 8004e22:	1ad2      	subs	r2, r2, r3
 8004e24:	60a2      	str	r2, [r4, #8]
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	1b9e      	subs	r6, r3, r6
 8004e30:	60be      	str	r6, [r7, #8]
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	d1cf      	bne.n	8004dd6 <__ssprint_r+0x72>
 8004e36:	2000      	movs	r0, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	b003      	add	sp, #12
 8004e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e40:	462a      	mov	r2, r5
 8004e42:	4648      	mov	r0, r9
 8004e44:	f000 f97e 	bl	8005144 <_realloc_r>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d1d6      	bne.n	8004dfc <__ssprint_r+0x98>
 8004e4e:	6921      	ldr	r1, [r4, #16]
 8004e50:	4648      	mov	r0, r9
 8004e52:	f000 f885 	bl	8004f60 <_free_r>
 8004e56:	e7b1      	b.n	8004dbc <__ssprint_r+0x58>

08004e58 <_calloc_r>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4351      	muls	r1, r2
 8004e5c:	f7ff fa6e 	bl	800433c <_malloc_r>
 8004e60:	4604      	mov	r4, r0
 8004e62:	b198      	cbz	r0, 8004e8c <_calloc_r+0x34>
 8004e64:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004e68:	f022 0203 	bic.w	r2, r2, #3
 8004e6c:	3a04      	subs	r2, #4
 8004e6e:	2a24      	cmp	r2, #36	; 0x24
 8004e70:	d81b      	bhi.n	8004eaa <_calloc_r+0x52>
 8004e72:	2a13      	cmp	r2, #19
 8004e74:	d917      	bls.n	8004ea6 <_calloc_r+0x4e>
 8004e76:	2100      	movs	r1, #0
 8004e78:	2a1b      	cmp	r2, #27
 8004e7a:	6001      	str	r1, [r0, #0]
 8004e7c:	6041      	str	r1, [r0, #4]
 8004e7e:	d807      	bhi.n	8004e90 <_calloc_r+0x38>
 8004e80:	f100 0308 	add.w	r3, r0, #8
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	bd10      	pop	{r4, pc}
 8004e90:	2a24      	cmp	r2, #36	; 0x24
 8004e92:	6081      	str	r1, [r0, #8]
 8004e94:	60c1      	str	r1, [r0, #12]
 8004e96:	bf11      	iteee	ne
 8004e98:	f100 0310 	addne.w	r3, r0, #16
 8004e9c:	6101      	streq	r1, [r0, #16]
 8004e9e:	f100 0318 	addeq.w	r3, r0, #24
 8004ea2:	6141      	streq	r1, [r0, #20]
 8004ea4:	e7ee      	b.n	8004e84 <_calloc_r+0x2c>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	e7ec      	b.n	8004e84 <_calloc_r+0x2c>
 8004eaa:	2100      	movs	r1, #0
 8004eac:	f000 f942 	bl	8005134 <memset>
 8004eb0:	e7ec      	b.n	8004e8c <_calloc_r+0x34>
	...

08004eb4 <_malloc_trim_r>:
 8004eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	4689      	mov	r9, r1
 8004eba:	4f25      	ldr	r7, [pc, #148]	; (8004f50 <_malloc_trim_r+0x9c>)
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	f7ff fc63 	bl	8004788 <__malloc_lock>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8004f5c <_malloc_trim_r+0xa8>
 8004ec8:	685d      	ldr	r5, [r3, #4]
 8004eca:	f1a8 0411 	sub.w	r4, r8, #17
 8004ece:	f025 0503 	bic.w	r5, r5, #3
 8004ed2:	eba4 0409 	sub.w	r4, r4, r9
 8004ed6:	442c      	add	r4, r5
 8004ed8:	fbb4 f4f8 	udiv	r4, r4, r8
 8004edc:	3c01      	subs	r4, #1
 8004ede:	fb08 f404 	mul.w	r4, r8, r4
 8004ee2:	4544      	cmp	r4, r8
 8004ee4:	da05      	bge.n	8004ef2 <_malloc_trim_r+0x3e>
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f7ff fc54 	bl	8004794 <__malloc_unlock>
 8004eec:	2000      	movs	r0, #0
 8004eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	f7ff ff25 	bl	8004d44 <_sbrk_r>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	442b      	add	r3, r5
 8004efe:	4298      	cmp	r0, r3
 8004f00:	d1f1      	bne.n	8004ee6 <_malloc_trim_r+0x32>
 8004f02:	4261      	negs	r1, r4
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff ff1d 	bl	8004d44 <_sbrk_r>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d110      	bne.n	8004f30 <_malloc_trim_r+0x7c>
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4630      	mov	r0, r6
 8004f12:	f7ff ff17 	bl	8004d44 <_sbrk_r>
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	1a83      	subs	r3, r0, r2
 8004f1a:	2b0f      	cmp	r3, #15
 8004f1c:	dde3      	ble.n	8004ee6 <_malloc_trim_r+0x32>
 8004f1e:	490d      	ldr	r1, [pc, #52]	; (8004f54 <_malloc_trim_r+0xa0>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6809      	ldr	r1, [r1, #0]
 8004f26:	6053      	str	r3, [r2, #4]
 8004f28:	1a40      	subs	r0, r0, r1
 8004f2a:	490b      	ldr	r1, [pc, #44]	; (8004f58 <_malloc_trim_r+0xa4>)
 8004f2c:	6008      	str	r0, [r1, #0]
 8004f2e:	e7da      	b.n	8004ee6 <_malloc_trim_r+0x32>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <_malloc_trim_r+0xa4>)
 8004f34:	1b2d      	subs	r5, r5, r4
 8004f36:	f045 0501 	orr.w	r5, r5, #1
 8004f3a:	605d      	str	r5, [r3, #4]
 8004f3c:	6813      	ldr	r3, [r2, #0]
 8004f3e:	4630      	mov	r0, r6
 8004f40:	1b1c      	subs	r4, r3, r4
 8004f42:	6014      	str	r4, [r2, #0]
 8004f44:	f7ff fc26 	bl	8004794 <__malloc_unlock>
 8004f48:	2001      	movs	r0, #1
 8004f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000108 	.word	0x20000108
 8004f54:	20000510 	.word	0x20000510
 8004f58:	200006a4 	.word	0x200006a4
 8004f5c:	00000080 	.word	0x00000080

08004f60 <_free_r>:
 8004f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f64:	4604      	mov	r4, r0
 8004f66:	4688      	mov	r8, r1
 8004f68:	2900      	cmp	r1, #0
 8004f6a:	f000 80ab 	beq.w	80050c4 <_free_r+0x164>
 8004f6e:	f7ff fc0b 	bl	8004788 <__malloc_lock>
 8004f72:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004f76:	4d54      	ldr	r5, [pc, #336]	; (80050c8 <_free_r+0x168>)
 8004f78:	f022 0001 	bic.w	r0, r2, #1
 8004f7c:	f1a8 0308 	sub.w	r3, r8, #8
 8004f80:	181f      	adds	r7, r3, r0
 8004f82:	68a9      	ldr	r1, [r5, #8]
 8004f84:	687e      	ldr	r6, [r7, #4]
 8004f86:	428f      	cmp	r7, r1
 8004f88:	f026 0603 	bic.w	r6, r6, #3
 8004f8c:	f002 0201 	and.w	r2, r2, #1
 8004f90:	d11b      	bne.n	8004fca <_free_r+0x6a>
 8004f92:	4430      	add	r0, r6
 8004f94:	b93a      	cbnz	r2, 8004fa6 <_free_r+0x46>
 8004f96:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	6899      	ldr	r1, [r3, #8]
 8004f9e:	4410      	add	r0, r2
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	60ca      	str	r2, [r1, #12]
 8004fa4:	6091      	str	r1, [r2, #8]
 8004fa6:	f040 0201 	orr.w	r2, r0, #1
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	60ab      	str	r3, [r5, #8]
 8004fae:	4b47      	ldr	r3, [pc, #284]	; (80050cc <_free_r+0x16c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	d304      	bcc.n	8004fc0 <_free_r+0x60>
 8004fb6:	4b46      	ldr	r3, [pc, #280]	; (80050d0 <_free_r+0x170>)
 8004fb8:	4620      	mov	r0, r4
 8004fba:	6819      	ldr	r1, [r3, #0]
 8004fbc:	f7ff ff7a 	bl	8004eb4 <_malloc_trim_r>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc6:	f7ff bbe5 	b.w	8004794 <__malloc_unlock>
 8004fca:	607e      	str	r6, [r7, #4]
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d139      	bne.n	8005044 <_free_r+0xe4>
 8004fd0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004fd4:	f105 0e08 	add.w	lr, r5, #8
 8004fd8:	1a5b      	subs	r3, r3, r1
 8004fda:	4408      	add	r0, r1
 8004fdc:	6899      	ldr	r1, [r3, #8]
 8004fde:	4571      	cmp	r1, lr
 8004fe0:	d032      	beq.n	8005048 <_free_r+0xe8>
 8004fe2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8004fe6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004fea:	f8ce 1008 	str.w	r1, [lr, #8]
 8004fee:	19b9      	adds	r1, r7, r6
 8004ff0:	6849      	ldr	r1, [r1, #4]
 8004ff2:	07c9      	lsls	r1, r1, #31
 8004ff4:	d40a      	bmi.n	800500c <_free_r+0xac>
 8004ff6:	4430      	add	r0, r6
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	bb3a      	cbnz	r2, 800504c <_free_r+0xec>
 8004ffc:	4e35      	ldr	r6, [pc, #212]	; (80050d4 <_free_r+0x174>)
 8004ffe:	42b1      	cmp	r1, r6
 8005000:	d124      	bne.n	800504c <_free_r+0xec>
 8005002:	2201      	movs	r2, #1
 8005004:	616b      	str	r3, [r5, #20]
 8005006:	612b      	str	r3, [r5, #16]
 8005008:	60d9      	str	r1, [r3, #12]
 800500a:	6099      	str	r1, [r3, #8]
 800500c:	f040 0101 	orr.w	r1, r0, #1
 8005010:	6059      	str	r1, [r3, #4]
 8005012:	5018      	str	r0, [r3, r0]
 8005014:	2a00      	cmp	r2, #0
 8005016:	d1d3      	bne.n	8004fc0 <_free_r+0x60>
 8005018:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800501c:	d21a      	bcs.n	8005054 <_free_r+0xf4>
 800501e:	2201      	movs	r2, #1
 8005020:	08c0      	lsrs	r0, r0, #3
 8005022:	1081      	asrs	r1, r0, #2
 8005024:	408a      	lsls	r2, r1
 8005026:	6869      	ldr	r1, [r5, #4]
 8005028:	3001      	adds	r0, #1
 800502a:	430a      	orrs	r2, r1
 800502c:	606a      	str	r2, [r5, #4]
 800502e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005032:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005036:	3a08      	subs	r2, #8
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	6099      	str	r1, [r3, #8]
 800503c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005040:	60cb      	str	r3, [r1, #12]
 8005042:	e7bd      	b.n	8004fc0 <_free_r+0x60>
 8005044:	2200      	movs	r2, #0
 8005046:	e7d2      	b.n	8004fee <_free_r+0x8e>
 8005048:	2201      	movs	r2, #1
 800504a:	e7d0      	b.n	8004fee <_free_r+0x8e>
 800504c:	68fe      	ldr	r6, [r7, #12]
 800504e:	60ce      	str	r6, [r1, #12]
 8005050:	60b1      	str	r1, [r6, #8]
 8005052:	e7db      	b.n	800500c <_free_r+0xac>
 8005054:	0a42      	lsrs	r2, r0, #9
 8005056:	2a04      	cmp	r2, #4
 8005058:	d813      	bhi.n	8005082 <_free_r+0x122>
 800505a:	0982      	lsrs	r2, r0, #6
 800505c:	3238      	adds	r2, #56	; 0x38
 800505e:	1c51      	adds	r1, r2, #1
 8005060:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005064:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005068:	428e      	cmp	r6, r1
 800506a:	d124      	bne.n	80050b6 <_free_r+0x156>
 800506c:	2001      	movs	r0, #1
 800506e:	1092      	asrs	r2, r2, #2
 8005070:	fa00 f202 	lsl.w	r2, r0, r2
 8005074:	6868      	ldr	r0, [r5, #4]
 8005076:	4302      	orrs	r2, r0
 8005078:	606a      	str	r2, [r5, #4]
 800507a:	60de      	str	r6, [r3, #12]
 800507c:	6099      	str	r1, [r3, #8]
 800507e:	60b3      	str	r3, [r6, #8]
 8005080:	e7de      	b.n	8005040 <_free_r+0xe0>
 8005082:	2a14      	cmp	r2, #20
 8005084:	d801      	bhi.n	800508a <_free_r+0x12a>
 8005086:	325b      	adds	r2, #91	; 0x5b
 8005088:	e7e9      	b.n	800505e <_free_r+0xfe>
 800508a:	2a54      	cmp	r2, #84	; 0x54
 800508c:	d802      	bhi.n	8005094 <_free_r+0x134>
 800508e:	0b02      	lsrs	r2, r0, #12
 8005090:	326e      	adds	r2, #110	; 0x6e
 8005092:	e7e4      	b.n	800505e <_free_r+0xfe>
 8005094:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005098:	d802      	bhi.n	80050a0 <_free_r+0x140>
 800509a:	0bc2      	lsrs	r2, r0, #15
 800509c:	3277      	adds	r2, #119	; 0x77
 800509e:	e7de      	b.n	800505e <_free_r+0xfe>
 80050a0:	f240 5154 	movw	r1, #1364	; 0x554
 80050a4:	428a      	cmp	r2, r1
 80050a6:	bf9a      	itte	ls
 80050a8:	0c82      	lsrls	r2, r0, #18
 80050aa:	327c      	addls	r2, #124	; 0x7c
 80050ac:	227e      	movhi	r2, #126	; 0x7e
 80050ae:	e7d6      	b.n	800505e <_free_r+0xfe>
 80050b0:	6889      	ldr	r1, [r1, #8]
 80050b2:	428e      	cmp	r6, r1
 80050b4:	d004      	beq.n	80050c0 <_free_r+0x160>
 80050b6:	684a      	ldr	r2, [r1, #4]
 80050b8:	f022 0203 	bic.w	r2, r2, #3
 80050bc:	4290      	cmp	r0, r2
 80050be:	d3f7      	bcc.n	80050b0 <_free_r+0x150>
 80050c0:	68ce      	ldr	r6, [r1, #12]
 80050c2:	e7da      	b.n	800507a <_free_r+0x11a>
 80050c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c8:	20000108 	.word	0x20000108
 80050cc:	20000514 	.word	0x20000514
 80050d0:	200006d4 	.word	0x200006d4
 80050d4:	20000110 	.word	0x20000110

080050d8 <__retarget_lock_acquire_recursive>:
 80050d8:	4770      	bx	lr

080050da <__retarget_lock_release_recursive>:
 80050da:	4770      	bx	lr

080050dc <__ascii_mbtowc>:
 80050dc:	b082      	sub	sp, #8
 80050de:	b901      	cbnz	r1, 80050e2 <__ascii_mbtowc+0x6>
 80050e0:	a901      	add	r1, sp, #4
 80050e2:	b142      	cbz	r2, 80050f6 <__ascii_mbtowc+0x1a>
 80050e4:	b14b      	cbz	r3, 80050fa <__ascii_mbtowc+0x1e>
 80050e6:	7813      	ldrb	r3, [r2, #0]
 80050e8:	600b      	str	r3, [r1, #0]
 80050ea:	7812      	ldrb	r2, [r2, #0]
 80050ec:	1c10      	adds	r0, r2, #0
 80050ee:	bf18      	it	ne
 80050f0:	2001      	movne	r0, #1
 80050f2:	b002      	add	sp, #8
 80050f4:	4770      	bx	lr
 80050f6:	4610      	mov	r0, r2
 80050f8:	e7fb      	b.n	80050f2 <__ascii_mbtowc+0x16>
 80050fa:	f06f 0001 	mvn.w	r0, #1
 80050fe:	e7f8      	b.n	80050f2 <__ascii_mbtowc+0x16>

08005100 <memmove>:
 8005100:	4288      	cmp	r0, r1
 8005102:	b510      	push	{r4, lr}
 8005104:	eb01 0302 	add.w	r3, r1, r2
 8005108:	d803      	bhi.n	8005112 <memmove+0x12>
 800510a:	1e42      	subs	r2, r0, #1
 800510c:	4299      	cmp	r1, r3
 800510e:	d10c      	bne.n	800512a <memmove+0x2a>
 8005110:	bd10      	pop	{r4, pc}
 8005112:	4298      	cmp	r0, r3
 8005114:	d2f9      	bcs.n	800510a <memmove+0xa>
 8005116:	1881      	adds	r1, r0, r2
 8005118:	1ad2      	subs	r2, r2, r3
 800511a:	42d3      	cmn	r3, r2
 800511c:	d100      	bne.n	8005120 <memmove+0x20>
 800511e:	bd10      	pop	{r4, pc}
 8005120:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005124:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005128:	e7f7      	b.n	800511a <memmove+0x1a>
 800512a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800512e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005132:	e7eb      	b.n	800510c <memmove+0xc>

08005134 <memset>:
 8005134:	4603      	mov	r3, r0
 8005136:	4402      	add	r2, r0
 8005138:	4293      	cmp	r3, r2
 800513a:	d100      	bne.n	800513e <memset+0xa>
 800513c:	4770      	bx	lr
 800513e:	f803 1b01 	strb.w	r1, [r3], #1
 8005142:	e7f9      	b.n	8005138 <memset+0x4>

08005144 <_realloc_r>:
 8005144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005148:	4682      	mov	sl, r0
 800514a:	460c      	mov	r4, r1
 800514c:	b929      	cbnz	r1, 800515a <_realloc_r+0x16>
 800514e:	4611      	mov	r1, r2
 8005150:	b003      	add	sp, #12
 8005152:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005156:	f7ff b8f1 	b.w	800433c <_malloc_r>
 800515a:	9201      	str	r2, [sp, #4]
 800515c:	f7ff fb14 	bl	8004788 <__malloc_lock>
 8005160:	9a01      	ldr	r2, [sp, #4]
 8005162:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005166:	f102 080b 	add.w	r8, r2, #11
 800516a:	f1b8 0f16 	cmp.w	r8, #22
 800516e:	f1a4 0908 	sub.w	r9, r4, #8
 8005172:	f025 0603 	bic.w	r6, r5, #3
 8005176:	d90a      	bls.n	800518e <_realloc_r+0x4a>
 8005178:	f038 0807 	bics.w	r8, r8, #7
 800517c:	d509      	bpl.n	8005192 <_realloc_r+0x4e>
 800517e:	230c      	movs	r3, #12
 8005180:	2700      	movs	r7, #0
 8005182:	f8ca 3000 	str.w	r3, [sl]
 8005186:	4638      	mov	r0, r7
 8005188:	b003      	add	sp, #12
 800518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518e:	f04f 0810 	mov.w	r8, #16
 8005192:	4590      	cmp	r8, r2
 8005194:	d3f3      	bcc.n	800517e <_realloc_r+0x3a>
 8005196:	45b0      	cmp	r8, r6
 8005198:	f340 8148 	ble.w	800542c <_realloc_r+0x2e8>
 800519c:	4ba9      	ldr	r3, [pc, #676]	; (8005444 <_realloc_r+0x300>)
 800519e:	eb09 0106 	add.w	r1, r9, r6
 80051a2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80051a6:	469b      	mov	fp, r3
 80051a8:	4571      	cmp	r1, lr
 80051aa:	684b      	ldr	r3, [r1, #4]
 80051ac:	d005      	beq.n	80051ba <_realloc_r+0x76>
 80051ae:	f023 0001 	bic.w	r0, r3, #1
 80051b2:	4408      	add	r0, r1
 80051b4:	6840      	ldr	r0, [r0, #4]
 80051b6:	07c7      	lsls	r7, r0, #31
 80051b8:	d447      	bmi.n	800524a <_realloc_r+0x106>
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	4571      	cmp	r1, lr
 80051c0:	eb06 0703 	add.w	r7, r6, r3
 80051c4:	d119      	bne.n	80051fa <_realloc_r+0xb6>
 80051c6:	f108 0010 	add.w	r0, r8, #16
 80051ca:	4287      	cmp	r7, r0
 80051cc:	db3f      	blt.n	800524e <_realloc_r+0x10a>
 80051ce:	eba7 0708 	sub.w	r7, r7, r8
 80051d2:	eb09 0308 	add.w	r3, r9, r8
 80051d6:	f047 0701 	orr.w	r7, r7, #1
 80051da:	f8cb 3008 	str.w	r3, [fp, #8]
 80051de:	605f      	str	r7, [r3, #4]
 80051e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80051e4:	4650      	mov	r0, sl
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	ea43 0308 	orr.w	r3, r3, r8
 80051ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80051f2:	f7ff facf 	bl	8004794 <__malloc_unlock>
 80051f6:	4627      	mov	r7, r4
 80051f8:	e7c5      	b.n	8005186 <_realloc_r+0x42>
 80051fa:	45b8      	cmp	r8, r7
 80051fc:	dc27      	bgt.n	800524e <_realloc_r+0x10a>
 80051fe:	68cb      	ldr	r3, [r1, #12]
 8005200:	688a      	ldr	r2, [r1, #8]
 8005202:	60d3      	str	r3, [r2, #12]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	eba7 0008 	sub.w	r0, r7, r8
 800520a:	280f      	cmp	r0, #15
 800520c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005210:	eb09 0207 	add.w	r2, r9, r7
 8005214:	f240 810c 	bls.w	8005430 <_realloc_r+0x2ec>
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	eb09 0108 	add.w	r1, r9, r8
 8005220:	ea43 0308 	orr.w	r3, r3, r8
 8005224:	f040 0001 	orr.w	r0, r0, #1
 8005228:	f8c9 3004 	str.w	r3, [r9, #4]
 800522c:	6048      	str	r0, [r1, #4]
 800522e:	6853      	ldr	r3, [r2, #4]
 8005230:	3108      	adds	r1, #8
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	6053      	str	r3, [r2, #4]
 8005238:	4650      	mov	r0, sl
 800523a:	f7ff fe91 	bl	8004f60 <_free_r>
 800523e:	4650      	mov	r0, sl
 8005240:	f7ff faa8 	bl	8004794 <__malloc_unlock>
 8005244:	f109 0708 	add.w	r7, r9, #8
 8005248:	e79d      	b.n	8005186 <_realloc_r+0x42>
 800524a:	2300      	movs	r3, #0
 800524c:	4619      	mov	r1, r3
 800524e:	07e8      	lsls	r0, r5, #31
 8005250:	f100 8085 	bmi.w	800535e <_realloc_r+0x21a>
 8005254:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005258:	eba9 0505 	sub.w	r5, r9, r5
 800525c:	6868      	ldr	r0, [r5, #4]
 800525e:	f020 0003 	bic.w	r0, r0, #3
 8005262:	4430      	add	r0, r6
 8005264:	2900      	cmp	r1, #0
 8005266:	d077      	beq.n	8005358 <_realloc_r+0x214>
 8005268:	4571      	cmp	r1, lr
 800526a:	d151      	bne.n	8005310 <_realloc_r+0x1cc>
 800526c:	4403      	add	r3, r0
 800526e:	f108 0110 	add.w	r1, r8, #16
 8005272:	428b      	cmp	r3, r1
 8005274:	db70      	blt.n	8005358 <_realloc_r+0x214>
 8005276:	462f      	mov	r7, r5
 8005278:	68ea      	ldr	r2, [r5, #12]
 800527a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800527e:	60ca      	str	r2, [r1, #12]
 8005280:	6091      	str	r1, [r2, #8]
 8005282:	1f32      	subs	r2, r6, #4
 8005284:	2a24      	cmp	r2, #36	; 0x24
 8005286:	d83c      	bhi.n	8005302 <_realloc_r+0x1be>
 8005288:	2a13      	cmp	r2, #19
 800528a:	d937      	bls.n	80052fc <_realloc_r+0x1b8>
 800528c:	6821      	ldr	r1, [r4, #0]
 800528e:	2a1b      	cmp	r2, #27
 8005290:	60a9      	str	r1, [r5, #8]
 8005292:	6861      	ldr	r1, [r4, #4]
 8005294:	60e9      	str	r1, [r5, #12]
 8005296:	d81c      	bhi.n	80052d2 <_realloc_r+0x18e>
 8005298:	f105 0210 	add.w	r2, r5, #16
 800529c:	f104 0108 	add.w	r1, r4, #8
 80052a0:	6808      	ldr	r0, [r1, #0]
 80052a2:	6010      	str	r0, [r2, #0]
 80052a4:	6848      	ldr	r0, [r1, #4]
 80052a6:	6050      	str	r0, [r2, #4]
 80052a8:	6889      	ldr	r1, [r1, #8]
 80052aa:	6091      	str	r1, [r2, #8]
 80052ac:	eba3 0308 	sub.w	r3, r3, r8
 80052b0:	eb05 0208 	add.w	r2, r5, r8
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	f8cb 2008 	str.w	r2, [fp, #8]
 80052bc:	6053      	str	r3, [r2, #4]
 80052be:	686b      	ldr	r3, [r5, #4]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	ea43 0308 	orr.w	r3, r3, r8
 80052c8:	606b      	str	r3, [r5, #4]
 80052ca:	4650      	mov	r0, sl
 80052cc:	f7ff fa62 	bl	8004794 <__malloc_unlock>
 80052d0:	e759      	b.n	8005186 <_realloc_r+0x42>
 80052d2:	68a1      	ldr	r1, [r4, #8]
 80052d4:	2a24      	cmp	r2, #36	; 0x24
 80052d6:	6129      	str	r1, [r5, #16]
 80052d8:	68e1      	ldr	r1, [r4, #12]
 80052da:	bf18      	it	ne
 80052dc:	f105 0218 	addne.w	r2, r5, #24
 80052e0:	6169      	str	r1, [r5, #20]
 80052e2:	bf09      	itett	eq
 80052e4:	6922      	ldreq	r2, [r4, #16]
 80052e6:	f104 0110 	addne.w	r1, r4, #16
 80052ea:	61aa      	streq	r2, [r5, #24]
 80052ec:	6960      	ldreq	r0, [r4, #20]
 80052ee:	bf02      	ittt	eq
 80052f0:	f105 0220 	addeq.w	r2, r5, #32
 80052f4:	f104 0118 	addeq.w	r1, r4, #24
 80052f8:	61e8      	streq	r0, [r5, #28]
 80052fa:	e7d1      	b.n	80052a0 <_realloc_r+0x15c>
 80052fc:	463a      	mov	r2, r7
 80052fe:	4621      	mov	r1, r4
 8005300:	e7ce      	b.n	80052a0 <_realloc_r+0x15c>
 8005302:	4621      	mov	r1, r4
 8005304:	4638      	mov	r0, r7
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	f7ff fefa 	bl	8005100 <memmove>
 800530c:	9b01      	ldr	r3, [sp, #4]
 800530e:	e7cd      	b.n	80052ac <_realloc_r+0x168>
 8005310:	18c7      	adds	r7, r0, r3
 8005312:	45b8      	cmp	r8, r7
 8005314:	dc20      	bgt.n	8005358 <_realloc_r+0x214>
 8005316:	68cb      	ldr	r3, [r1, #12]
 8005318:	688a      	ldr	r2, [r1, #8]
 800531a:	60d3      	str	r3, [r2, #12]
 800531c:	609a      	str	r2, [r3, #8]
 800531e:	4628      	mov	r0, r5
 8005320:	68eb      	ldr	r3, [r5, #12]
 8005322:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005326:	60d3      	str	r3, [r2, #12]
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	1f32      	subs	r2, r6, #4
 800532c:	2a24      	cmp	r2, #36	; 0x24
 800532e:	d843      	bhi.n	80053b8 <_realloc_r+0x274>
 8005330:	2a13      	cmp	r2, #19
 8005332:	d93f      	bls.n	80053b4 <_realloc_r+0x270>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	2a1b      	cmp	r2, #27
 8005338:	60ab      	str	r3, [r5, #8]
 800533a:	6863      	ldr	r3, [r4, #4]
 800533c:	60eb      	str	r3, [r5, #12]
 800533e:	d824      	bhi.n	800538a <_realloc_r+0x246>
 8005340:	f105 0010 	add.w	r0, r5, #16
 8005344:	f104 0308 	add.w	r3, r4, #8
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	6002      	str	r2, [r0, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	6042      	str	r2, [r0, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	6083      	str	r3, [r0, #8]
 8005354:	46a9      	mov	r9, r5
 8005356:	e756      	b.n	8005206 <_realloc_r+0xc2>
 8005358:	4580      	cmp	r8, r0
 800535a:	4607      	mov	r7, r0
 800535c:	dddf      	ble.n	800531e <_realloc_r+0x1da>
 800535e:	4611      	mov	r1, r2
 8005360:	4650      	mov	r0, sl
 8005362:	f7fe ffeb 	bl	800433c <_malloc_r>
 8005366:	4607      	mov	r7, r0
 8005368:	2800      	cmp	r0, #0
 800536a:	d0ae      	beq.n	80052ca <_realloc_r+0x186>
 800536c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005370:	f1a0 0208 	sub.w	r2, r0, #8
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	444b      	add	r3, r9
 800537a:	429a      	cmp	r2, r3
 800537c:	d120      	bne.n	80053c0 <_realloc_r+0x27c>
 800537e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005382:	f027 0703 	bic.w	r7, r7, #3
 8005386:	4437      	add	r7, r6
 8005388:	e73d      	b.n	8005206 <_realloc_r+0xc2>
 800538a:	68a3      	ldr	r3, [r4, #8]
 800538c:	2a24      	cmp	r2, #36	; 0x24
 800538e:	612b      	str	r3, [r5, #16]
 8005390:	68e3      	ldr	r3, [r4, #12]
 8005392:	bf18      	it	ne
 8005394:	f105 0018 	addne.w	r0, r5, #24
 8005398:	616b      	str	r3, [r5, #20]
 800539a:	bf09      	itett	eq
 800539c:	6923      	ldreq	r3, [r4, #16]
 800539e:	f104 0310 	addne.w	r3, r4, #16
 80053a2:	61ab      	streq	r3, [r5, #24]
 80053a4:	6962      	ldreq	r2, [r4, #20]
 80053a6:	bf02      	ittt	eq
 80053a8:	f105 0020 	addeq.w	r0, r5, #32
 80053ac:	f104 0318 	addeq.w	r3, r4, #24
 80053b0:	61ea      	streq	r2, [r5, #28]
 80053b2:	e7c9      	b.n	8005348 <_realloc_r+0x204>
 80053b4:	4623      	mov	r3, r4
 80053b6:	e7c7      	b.n	8005348 <_realloc_r+0x204>
 80053b8:	4621      	mov	r1, r4
 80053ba:	f7ff fea1 	bl	8005100 <memmove>
 80053be:	e7c9      	b.n	8005354 <_realloc_r+0x210>
 80053c0:	1f32      	subs	r2, r6, #4
 80053c2:	2a24      	cmp	r2, #36	; 0x24
 80053c4:	d82e      	bhi.n	8005424 <_realloc_r+0x2e0>
 80053c6:	2a13      	cmp	r2, #19
 80053c8:	d929      	bls.n	800541e <_realloc_r+0x2da>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	2a1b      	cmp	r2, #27
 80053ce:	6003      	str	r3, [r0, #0]
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	6043      	str	r3, [r0, #4]
 80053d4:	d80e      	bhi.n	80053f4 <_realloc_r+0x2b0>
 80053d6:	f100 0308 	add.w	r3, r0, #8
 80053da:	f104 0208 	add.w	r2, r4, #8
 80053de:	6811      	ldr	r1, [r2, #0]
 80053e0:	6019      	str	r1, [r3, #0]
 80053e2:	6851      	ldr	r1, [r2, #4]
 80053e4:	6059      	str	r1, [r3, #4]
 80053e6:	6892      	ldr	r2, [r2, #8]
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	4621      	mov	r1, r4
 80053ec:	4650      	mov	r0, sl
 80053ee:	f7ff fdb7 	bl	8004f60 <_free_r>
 80053f2:	e76a      	b.n	80052ca <_realloc_r+0x186>
 80053f4:	68a3      	ldr	r3, [r4, #8]
 80053f6:	2a24      	cmp	r2, #36	; 0x24
 80053f8:	6083      	str	r3, [r0, #8]
 80053fa:	68e3      	ldr	r3, [r4, #12]
 80053fc:	bf18      	it	ne
 80053fe:	f104 0210 	addne.w	r2, r4, #16
 8005402:	60c3      	str	r3, [r0, #12]
 8005404:	bf09      	itett	eq
 8005406:	6923      	ldreq	r3, [r4, #16]
 8005408:	f100 0310 	addne.w	r3, r0, #16
 800540c:	6103      	streq	r3, [r0, #16]
 800540e:	6961      	ldreq	r1, [r4, #20]
 8005410:	bf02      	ittt	eq
 8005412:	f100 0318 	addeq.w	r3, r0, #24
 8005416:	f104 0218 	addeq.w	r2, r4, #24
 800541a:	6141      	streq	r1, [r0, #20]
 800541c:	e7df      	b.n	80053de <_realloc_r+0x29a>
 800541e:	4603      	mov	r3, r0
 8005420:	4622      	mov	r2, r4
 8005422:	e7dc      	b.n	80053de <_realloc_r+0x29a>
 8005424:	4621      	mov	r1, r4
 8005426:	f7ff fe6b 	bl	8005100 <memmove>
 800542a:	e7de      	b.n	80053ea <_realloc_r+0x2a6>
 800542c:	4637      	mov	r7, r6
 800542e:	e6ea      	b.n	8005206 <_realloc_r+0xc2>
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	431f      	orrs	r7, r3
 8005436:	f8c9 7004 	str.w	r7, [r9, #4]
 800543a:	6853      	ldr	r3, [r2, #4]
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6053      	str	r3, [r2, #4]
 8005442:	e6fc      	b.n	800523e <_realloc_r+0xfa>
 8005444:	20000108 	.word	0x20000108

08005448 <__ascii_wctomb>:
 8005448:	b149      	cbz	r1, 800545e <__ascii_wctomb+0x16>
 800544a:	2aff      	cmp	r2, #255	; 0xff
 800544c:	bf8b      	itete	hi
 800544e:	238a      	movhi	r3, #138	; 0x8a
 8005450:	700a      	strbls	r2, [r1, #0]
 8005452:	6003      	strhi	r3, [r0, #0]
 8005454:	2001      	movls	r0, #1
 8005456:	bf88      	it	hi
 8005458:	f04f 30ff 	movhi.w	r0, #4294967295
 800545c:	4770      	bx	lr
 800545e:	4608      	mov	r0, r1
 8005460:	4770      	bx	lr
	...

08005464 <logf>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	4604      	mov	r4, r0
 800546a:	f000 f86d 	bl	8005548 <__ieee754_logf>
 800546e:	4b31      	ldr	r3, [pc, #196]	; (8005534 <logf+0xd0>)
 8005470:	4606      	mov	r6, r0
 8005472:	f993 5000 	ldrsb.w	r5, [r3]
 8005476:	1c6b      	adds	r3, r5, #1
 8005478:	d059      	beq.n	800552e <logf+0xca>
 800547a:	4621      	mov	r1, r4
 800547c:	4620      	mov	r0, r4
 800547e:	f7fb fe23 	bl	80010c8 <__aeabi_fcmpun>
 8005482:	2800      	cmp	r0, #0
 8005484:	d153      	bne.n	800552e <logf+0xca>
 8005486:	2100      	movs	r1, #0
 8005488:	4620      	mov	r0, r4
 800548a:	f7fb fe13 	bl	80010b4 <__aeabi_fcmpgt>
 800548e:	2800      	cmp	r0, #0
 8005490:	d14d      	bne.n	800552e <logf+0xca>
 8005492:	4b29      	ldr	r3, [pc, #164]	; (8005538 <logf+0xd4>)
 8005494:	9008      	str	r0, [sp, #32]
 8005496:	4620      	mov	r0, r4
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	f7fa ffc5 	bl	8000428 <__aeabi_f2d>
 800549e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054a6:	b995      	cbnz	r5, 80054ce <logf+0x6a>
 80054a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <logf+0xd8>)
 80054ae:	2100      	movs	r1, #0
 80054b0:	4620      	mov	r0, r4
 80054b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054b6:	f7fb fdd5 	bl	8001064 <__aeabi_fcmpeq>
 80054ba:	bb30      	cbnz	r0, 800550a <logf+0xa6>
 80054bc:	2301      	movs	r3, #1
 80054be:	2d02      	cmp	r5, #2
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	d117      	bne.n	80054f4 <logf+0x90>
 80054c4:	f000 f988 	bl	80057d8 <__errno>
 80054c8:	2321      	movs	r3, #33	; 0x21
 80054ca:	6003      	str	r3, [r0, #0]
 80054cc:	e017      	b.n	80054fe <logf+0x9a>
 80054ce:	2200      	movs	r2, #0
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <logf+0xdc>)
 80054d2:	2100      	movs	r1, #0
 80054d4:	4620      	mov	r0, r4
 80054d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054da:	f7fb fdc3 	bl	8001064 <__aeabi_fcmpeq>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d0ec      	beq.n	80054bc <logf+0x58>
 80054e2:	2302      	movs	r3, #2
 80054e4:	429d      	cmp	r5, r3
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	d111      	bne.n	800550e <logf+0xaa>
 80054ea:	f000 f975 	bl	80057d8 <__errno>
 80054ee:	2322      	movs	r3, #34	; 0x22
 80054f0:	6003      	str	r3, [r0, #0]
 80054f2:	e011      	b.n	8005518 <logf+0xb4>
 80054f4:	4668      	mov	r0, sp
 80054f6:	f000 f967 	bl	80057c8 <matherr>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d0e2      	beq.n	80054c4 <logf+0x60>
 80054fe:	4811      	ldr	r0, [pc, #68]	; (8005544 <logf+0xe0>)
 8005500:	f000 f964 	bl	80057cc <nan>
 8005504:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005508:	e006      	b.n	8005518 <logf+0xb4>
 800550a:	2302      	movs	r3, #2
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4668      	mov	r0, sp
 8005510:	f000 f95a 	bl	80057c8 <matherr>
 8005514:	2800      	cmp	r0, #0
 8005516:	d0e8      	beq.n	80054ea <logf+0x86>
 8005518:	9b08      	ldr	r3, [sp, #32]
 800551a:	b11b      	cbz	r3, 8005524 <logf+0xc0>
 800551c:	f000 f95c 	bl	80057d8 <__errno>
 8005520:	9b08      	ldr	r3, [sp, #32]
 8005522:	6003      	str	r3, [r0, #0]
 8005524:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005528:	f7fb faaa 	bl	8000a80 <__aeabi_d2f>
 800552c:	4606      	mov	r6, r0
 800552e:	4630      	mov	r0, r6
 8005530:	b00a      	add	sp, #40	; 0x28
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	20000684 	.word	0x20000684
 8005538:	08005a97 	.word	0x08005a97
 800553c:	c7efffff 	.word	0xc7efffff
 8005540:	fff00000 	.word	0xfff00000
 8005544:	08005995 	.word	0x08005995

08005548 <__ieee754_logf>:
 8005548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8005550:	4601      	mov	r1, r0
 8005552:	4605      	mov	r5, r0
 8005554:	d106      	bne.n	8005564 <__ieee754_logf+0x1c>
 8005556:	2100      	movs	r1, #0
 8005558:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800555c:	f7fb fca2 	bl	8000ea4 <__aeabi_fdiv>
 8005560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005564:	2800      	cmp	r0, #0
 8005566:	da03      	bge.n	8005570 <__ieee754_logf+0x28>
 8005568:	f7fb fade 	bl	8000b28 <__aeabi_fsub>
 800556c:	2100      	movs	r1, #0
 800556e:	e7f5      	b.n	800555c <__ieee754_logf+0x14>
 8005570:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005574:	db03      	blt.n	800557e <__ieee754_logf+0x36>
 8005576:	f7fb fad9 	bl	8000b2c <__addsf3>
 800557a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005582:	da36      	bge.n	80055f2 <__ieee754_logf+0xaa>
 8005584:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8005588:	f7fb fbd8 	bl	8000d3c <__aeabi_fmul>
 800558c:	f06f 0218 	mvn.w	r2, #24
 8005590:	4605      	mov	r5, r0
 8005592:	4b81      	ldr	r3, [pc, #516]	; (8005798 <__ieee754_logf+0x250>)
 8005594:	15ee      	asrs	r6, r5, #23
 8005596:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800559a:	3e7f      	subs	r6, #127	; 0x7f
 800559c:	442b      	add	r3, r5
 800559e:	4416      	add	r6, r2
 80055a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055a4:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 80055a8:	f083 537e 	eor.w	r3, r3, #1065353216	; 0x3f800000
 80055ac:	ea43 0005 	orr.w	r0, r3, r5
 80055b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80055b4:	f7fb fab8 	bl	8000b28 <__aeabi_fsub>
 80055b8:	f105 030f 	add.w	r3, r5, #15
 80055bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	4604      	mov	r4, r0
 80055c4:	dc47      	bgt.n	8005656 <__ieee754_logf+0x10e>
 80055c6:	2100      	movs	r1, #0
 80055c8:	f7fb fd4c 	bl	8001064 <__aeabi_fcmpeq>
 80055cc:	b198      	cbz	r0, 80055f6 <__ieee754_logf+0xae>
 80055ce:	2e00      	cmp	r6, #0
 80055d0:	f000 80de 	beq.w	8005790 <__ieee754_logf+0x248>
 80055d4:	4630      	mov	r0, r6
 80055d6:	f7fb fb5d 	bl	8000c94 <__aeabi_i2f>
 80055da:	4970      	ldr	r1, [pc, #448]	; (800579c <__ieee754_logf+0x254>)
 80055dc:	4605      	mov	r5, r0
 80055de:	f7fb fbad 	bl	8000d3c <__aeabi_fmul>
 80055e2:	496f      	ldr	r1, [pc, #444]	; (80057a0 <__ieee754_logf+0x258>)
 80055e4:	4604      	mov	r4, r0
 80055e6:	4628      	mov	r0, r5
 80055e8:	f7fb fba8 	bl	8000d3c <__aeabi_fmul>
 80055ec:	4601      	mov	r1, r0
 80055ee:	4620      	mov	r0, r4
 80055f0:	e7c1      	b.n	8005576 <__ieee754_logf+0x2e>
 80055f2:	2200      	movs	r2, #0
 80055f4:	e7cd      	b.n	8005592 <__ieee754_logf+0x4a>
 80055f6:	496b      	ldr	r1, [pc, #428]	; (80057a4 <__ieee754_logf+0x25c>)
 80055f8:	4620      	mov	r0, r4
 80055fa:	f7fb fb9f 	bl	8000d3c <__aeabi_fmul>
 80055fe:	4601      	mov	r1, r0
 8005600:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8005604:	f7fb fa90 	bl	8000b28 <__aeabi_fsub>
 8005608:	4621      	mov	r1, r4
 800560a:	4605      	mov	r5, r0
 800560c:	4620      	mov	r0, r4
 800560e:	f7fb fb95 	bl	8000d3c <__aeabi_fmul>
 8005612:	4601      	mov	r1, r0
 8005614:	4628      	mov	r0, r5
 8005616:	f7fb fb91 	bl	8000d3c <__aeabi_fmul>
 800561a:	4605      	mov	r5, r0
 800561c:	b916      	cbnz	r6, 8005624 <__ieee754_logf+0xdc>
 800561e:	4601      	mov	r1, r0
 8005620:	4620      	mov	r0, r4
 8005622:	e014      	b.n	800564e <__ieee754_logf+0x106>
 8005624:	4630      	mov	r0, r6
 8005626:	f7fb fb35 	bl	8000c94 <__aeabi_i2f>
 800562a:	495c      	ldr	r1, [pc, #368]	; (800579c <__ieee754_logf+0x254>)
 800562c:	4607      	mov	r7, r0
 800562e:	f7fb fb85 	bl	8000d3c <__aeabi_fmul>
 8005632:	495b      	ldr	r1, [pc, #364]	; (80057a0 <__ieee754_logf+0x258>)
 8005634:	4606      	mov	r6, r0
 8005636:	4638      	mov	r0, r7
 8005638:	f7fb fb80 	bl	8000d3c <__aeabi_fmul>
 800563c:	4601      	mov	r1, r0
 800563e:	4628      	mov	r0, r5
 8005640:	f7fb fa72 	bl	8000b28 <__aeabi_fsub>
 8005644:	4621      	mov	r1, r4
 8005646:	f7fb fa6f 	bl	8000b28 <__aeabi_fsub>
 800564a:	4601      	mov	r1, r0
 800564c:	4630      	mov	r0, r6
 800564e:	f7fb fa6b 	bl	8000b28 <__aeabi_fsub>
 8005652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005656:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800565a:	f7fb fa67 	bl	8000b2c <__addsf3>
 800565e:	4601      	mov	r1, r0
 8005660:	4620      	mov	r0, r4
 8005662:	f7fb fc1f 	bl	8000ea4 <__aeabi_fdiv>
 8005666:	4607      	mov	r7, r0
 8005668:	4630      	mov	r0, r6
 800566a:	f7fb fb13 	bl	8000c94 <__aeabi_i2f>
 800566e:	4639      	mov	r1, r7
 8005670:	4681      	mov	r9, r0
 8005672:	4638      	mov	r0, r7
 8005674:	f7fb fb62 	bl	8000d3c <__aeabi_fmul>
 8005678:	4601      	mov	r1, r0
 800567a:	4683      	mov	fp, r0
 800567c:	f7fb fb5e 	bl	8000d3c <__aeabi_fmul>
 8005680:	4680      	mov	r8, r0
 8005682:	4949      	ldr	r1, [pc, #292]	; (80057a8 <__ieee754_logf+0x260>)
 8005684:	f7fb fb5a 	bl	8000d3c <__aeabi_fmul>
 8005688:	4948      	ldr	r1, [pc, #288]	; (80057ac <__ieee754_logf+0x264>)
 800568a:	f7fb fa4f 	bl	8000b2c <__addsf3>
 800568e:	4641      	mov	r1, r8
 8005690:	f7fb fb54 	bl	8000d3c <__aeabi_fmul>
 8005694:	4946      	ldr	r1, [pc, #280]	; (80057b0 <__ieee754_logf+0x268>)
 8005696:	f7fb fa49 	bl	8000b2c <__addsf3>
 800569a:	4641      	mov	r1, r8
 800569c:	f7fb fb4e 	bl	8000d3c <__aeabi_fmul>
 80056a0:	4944      	ldr	r1, [pc, #272]	; (80057b4 <__ieee754_logf+0x26c>)
 80056a2:	f7fb fa43 	bl	8000b2c <__addsf3>
 80056a6:	4659      	mov	r1, fp
 80056a8:	f7fb fb48 	bl	8000d3c <__aeabi_fmul>
 80056ac:	4942      	ldr	r1, [pc, #264]	; (80057b8 <__ieee754_logf+0x270>)
 80056ae:	4683      	mov	fp, r0
 80056b0:	4640      	mov	r0, r8
 80056b2:	f7fb fb43 	bl	8000d3c <__aeabi_fmul>
 80056b6:	4941      	ldr	r1, [pc, #260]	; (80057bc <__ieee754_logf+0x274>)
 80056b8:	f7fb fa38 	bl	8000b2c <__addsf3>
 80056bc:	4641      	mov	r1, r8
 80056be:	f7fb fb3d 	bl	8000d3c <__aeabi_fmul>
 80056c2:	493f      	ldr	r1, [pc, #252]	; (80057c0 <__ieee754_logf+0x278>)
 80056c4:	f7fb fa32 	bl	8000b2c <__addsf3>
 80056c8:	4641      	mov	r1, r8
 80056ca:	f7fb fb37 	bl	8000d3c <__aeabi_fmul>
 80056ce:	4601      	mov	r1, r0
 80056d0:	4658      	mov	r0, fp
 80056d2:	f7fb fa2b 	bl	8000b2c <__addsf3>
 80056d6:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80057c4 <__ieee754_logf+0x27c>
 80056da:	4680      	mov	r8, r0
 80056dc:	f5c5 1057 	rsb	r0, r5, #3522560	; 0x35c000
 80056e0:	44aa      	add	sl, r5
 80056e2:	f500 7022 	add.w	r0, r0, #648	; 0x288
 80056e6:	ea40 000a 	orr.w	r0, r0, sl
 80056ea:	2800      	cmp	r0, #0
 80056ec:	dd2c      	ble.n	8005748 <__ieee754_logf+0x200>
 80056ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7fb fb22 	bl	8000d3c <__aeabi_fmul>
 80056f8:	4621      	mov	r1, r4
 80056fa:	f7fb fb1f 	bl	8000d3c <__aeabi_fmul>
 80056fe:	4605      	mov	r5, r0
 8005700:	b966      	cbnz	r6, 800571c <__ieee754_logf+0x1d4>
 8005702:	4601      	mov	r1, r0
 8005704:	4640      	mov	r0, r8
 8005706:	f7fb fa11 	bl	8000b2c <__addsf3>
 800570a:	4639      	mov	r1, r7
 800570c:	f7fb fb16 	bl	8000d3c <__aeabi_fmul>
 8005710:	4601      	mov	r1, r0
 8005712:	4628      	mov	r0, r5
 8005714:	f7fb fa08 	bl	8000b28 <__aeabi_fsub>
 8005718:	4601      	mov	r1, r0
 800571a:	e781      	b.n	8005620 <__ieee754_logf+0xd8>
 800571c:	491f      	ldr	r1, [pc, #124]	; (800579c <__ieee754_logf+0x254>)
 800571e:	4648      	mov	r0, r9
 8005720:	f7fb fb0c 	bl	8000d3c <__aeabi_fmul>
 8005724:	4629      	mov	r1, r5
 8005726:	4606      	mov	r6, r0
 8005728:	4640      	mov	r0, r8
 800572a:	f7fb f9ff 	bl	8000b2c <__addsf3>
 800572e:	4639      	mov	r1, r7
 8005730:	f7fb fb04 	bl	8000d3c <__aeabi_fmul>
 8005734:	491a      	ldr	r1, [pc, #104]	; (80057a0 <__ieee754_logf+0x258>)
 8005736:	4607      	mov	r7, r0
 8005738:	4648      	mov	r0, r9
 800573a:	f7fb faff 	bl	8000d3c <__aeabi_fmul>
 800573e:	4601      	mov	r1, r0
 8005740:	4638      	mov	r0, r7
 8005742:	f7fb f9f3 	bl	8000b2c <__addsf3>
 8005746:	e779      	b.n	800563c <__ieee754_logf+0xf4>
 8005748:	b93e      	cbnz	r6, 800575a <__ieee754_logf+0x212>
 800574a:	4641      	mov	r1, r8
 800574c:	4620      	mov	r0, r4
 800574e:	f7fb f9eb 	bl	8000b28 <__aeabi_fsub>
 8005752:	4639      	mov	r1, r7
 8005754:	f7fb faf2 	bl	8000d3c <__aeabi_fmul>
 8005758:	e7de      	b.n	8005718 <__ieee754_logf+0x1d0>
 800575a:	4910      	ldr	r1, [pc, #64]	; (800579c <__ieee754_logf+0x254>)
 800575c:	4648      	mov	r0, r9
 800575e:	f7fb faed 	bl	8000d3c <__aeabi_fmul>
 8005762:	4641      	mov	r1, r8
 8005764:	4605      	mov	r5, r0
 8005766:	4620      	mov	r0, r4
 8005768:	f7fb f9de 	bl	8000b28 <__aeabi_fsub>
 800576c:	4639      	mov	r1, r7
 800576e:	f7fb fae5 	bl	8000d3c <__aeabi_fmul>
 8005772:	490b      	ldr	r1, [pc, #44]	; (80057a0 <__ieee754_logf+0x258>)
 8005774:	4606      	mov	r6, r0
 8005776:	4648      	mov	r0, r9
 8005778:	f7fb fae0 	bl	8000d3c <__aeabi_fmul>
 800577c:	4601      	mov	r1, r0
 800577e:	4630      	mov	r0, r6
 8005780:	f7fb f9d2 	bl	8000b28 <__aeabi_fsub>
 8005784:	4621      	mov	r1, r4
 8005786:	f7fb f9cf 	bl	8000b28 <__aeabi_fsub>
 800578a:	4601      	mov	r1, r0
 800578c:	4628      	mov	r0, r5
 800578e:	e75e      	b.n	800564e <__ieee754_logf+0x106>
 8005790:	2000      	movs	r0, #0
 8005792:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005796:	bf00      	nop
 8005798:	004afb20 	.word	0x004afb20
 800579c:	3f317180 	.word	0x3f317180
 80057a0:	3717f7d1 	.word	0x3717f7d1
 80057a4:	3eaaaaab 	.word	0x3eaaaaab
 80057a8:	3e178897 	.word	0x3e178897
 80057ac:	3e3a3325 	.word	0x3e3a3325
 80057b0:	3e924925 	.word	0x3e924925
 80057b4:	3f2aaaab 	.word	0x3f2aaaab
 80057b8:	3e1cd04f 	.word	0x3e1cd04f
 80057bc:	3e638e29 	.word	0x3e638e29
 80057c0:	3ecccccd 	.word	0x3ecccccd
 80057c4:	ffcf5c30 	.word	0xffcf5c30

080057c8 <matherr>:
 80057c8:	2000      	movs	r0, #0
 80057ca:	4770      	bx	lr

080057cc <nan>:
 80057cc:	2000      	movs	r0, #0
 80057ce:	4901      	ldr	r1, [pc, #4]	; (80057d4 <nan+0x8>)
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	7ff80000 	.word	0x7ff80000

080057d8 <__errno>:
 80057d8:	4b01      	ldr	r3, [pc, #4]	; (80057e0 <__errno+0x8>)
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000014 	.word	0x20000014

080057e4 <_sbrk>:
 80057e4:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <_sbrk+0x14>)
 80057e6:	4602      	mov	r2, r0
 80057e8:	6819      	ldr	r1, [r3, #0]
 80057ea:	b909      	cbnz	r1, 80057f0 <_sbrk+0xc>
 80057ec:	4903      	ldr	r1, [pc, #12]	; (80057fc <_sbrk+0x18>)
 80057ee:	6019      	str	r1, [r3, #0]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	4402      	add	r2, r0
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	4770      	bx	lr
 80057f8:	200006d8 	.word	0x200006d8
 80057fc:	2000072c 	.word	0x2000072c

08005800 <_init>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr

0800580c <_fini>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr
